(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{1198:function(r,t,e){r.exports=e.p+"assets/img/image-20231204231216612.1a0a0f92.png"},1199:function(r,t,e){r.exports=e.p+"assets/img/image-20231204232144806.8a8a86dc.png"},1200:function(r,t,e){r.exports=e.p+"assets/img/image-20231204232514783.0ef8bcb5.png"},1535:function(r,t,e){"use strict";e.r(t);var a=e(4),_=Object(a.a)({},(function(){var r=this,t=r._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[t("h1",{attrs:{id:"_1-运行架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-运行架构"}},[r._v("#")]),r._v(" 1 运行架构")]),r._v(" "),t("p",[r._v("Spark 框架的核心是一个计算引擎，整体来说，它采用了标准 master-slave 的结构。 如下图所示，它展示了一个 Spark 执行时的基本结构。图形中的 Driver 表示 master， 负责管理整个集群中的作业任务调度。图形中的 Executor 则是 slave，负责实际执行任务。")]),r._v(" "),t("p",[t("img",{attrs:{src:e(1198),alt:"运行架构"}})]),r._v(" "),t("h1",{attrs:{id:"_2-核心组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-核心组件"}},[r._v("#")]),r._v(" 2 核心组件")]),r._v(" "),t("p",[r._v("由上图可以看出，对于 Spark 框架有两个核心组件：")]),r._v(" "),t("h2",{attrs:{id:"_2-1-driver"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-driver"}},[r._v("#")]),r._v(" 2.1 Driver")]),r._v(" "),t("p",[r._v("Spark 驱动器节点，用于执行 Spark 任务中的 main 方法，负责实际代码的执行工作。 Driver 在 Spark 作业执行时主要负责：")]),r._v(" "),t("p",[r._v("➢ 将用户程序转化为作业（job）")]),r._v(" "),t("p",[r._v("➢ 在 Executor 之间调度任务(task)")]),r._v(" "),t("p",[r._v("➢ 跟踪 Executor 的执行情况")]),r._v(" "),t("p",[r._v("➢ 通过 UI 展示查询运行情况")]),r._v(" "),t("p",[r._v("实际上，我们无法准确地描述 Driver 的定义，因为在整个的编程过程中没有看到任何有关 Driver 的字眼。所以简单理解，所谓的 Driver 就是驱使整个应用运行起来的程序，也称之为 Driver 类。")]),r._v(" "),t("h2",{attrs:{id:"_2-2-executor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-executor"}},[r._v("#")]),r._v(" 2.2 Executor")]),r._v(" "),t("p",[r._v("Spark Executor 是集群中工作节点（Worker）中的一个 JVM 进程，负责在 Spark 作业 中运行具体任务（Task），任务彼此之间相互独立。Spark 应用启动时，Executor 节点被同时启动，并且始终伴随着整个 Spark 应用的生命周期而存在。如果有 Executor 节点发生了 故障或崩溃，Spark 应用也可以继续执行，会将出错节点上的任务调度到其他 Executor 节点 上继续运行。")]),r._v(" "),t("p",[r._v("Executor 有两个核心功能：")]),r._v(" "),t("p",[r._v("➢ 负责运行组成 Spark 应用的任务，并将结果返回给驱动器进程")]),r._v(" "),t("p",[r._v("➢ 它们通过自身的块管理器（Block Manager）为用户程序中要求缓存的 RDD 提供内存 式存储。RDD 是直接缓存在 Executor 进程内的，因此任务可以在运行时充分利用缓存 数据加速运算。")]),r._v(" "),t("h2",{attrs:{id:"_2-3-master-worker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-master-worker"}},[r._v("#")]),r._v(" 2.3 Master & Worker")]),r._v(" "),t("p",[r._v("Spark 集群的独立部署环境中，不需要依赖其他的资源调度框架，自身就实现了资源调 度的功能，所以环境中还有其他两个核心组件：Master 和 Worker，这里的 Master 是一个进程，"),t("strong",[r._v("主要负责资源的调度和分配，并进行集群的监控等职责")]),r._v("，类似于 Yarn 环境中的 RM, 而 Worker 呢，也是进程，一个 Worker 运行在集群中的一台服务器上，由 Master 分配资源对数据进行并行的处理和计算，类似于 Yarn 环境中 NM。")]),r._v(" "),t("h2",{attrs:{id:"_2-4-applicationmaster"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-applicationmaster"}},[r._v("#")]),r._v(" 2.4 ApplicationMaster")]),r._v(" "),t("p",[r._v("Hadoop 用户向 YARN 集群提交应用程序时,提交程序中应该包含 ApplicationMaster，用 于向资源调度器申请执行任务的资源容器 Container，运行用户自己的程序任务 job，监控整个任务的执行，跟踪整个任务的状态，处理任务失败等异常情况。 说的简单点就是，ResourceManager（资源）和 Driver（计算）之间的解耦合靠的就是 ApplicationMaster。")]),r._v(" "),t("h1",{attrs:{id:"_3-核心概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-核心概念"}},[r._v("#")]),r._v(" 3 核心概念")]),r._v(" "),t("h2",{attrs:{id:"_3-1-executor-与-core"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-executor-与-core"}},[r._v("#")]),r._v(" 3.1 Executor 与 Core")]),r._v(" "),t("p",[r._v("Spark Executor 是集群中运行在工作节点（Worker）中的一个 JVM 进程，是整个集群中 的专门用于计算的节点。在提交应用中，可以提供参数指定计算节点的个数，以及对应的资源。这里的资源一般指的是工作节点 Executor 的内存大小和使用的虚拟 CPU 核（Core）数量。")]),r._v(" "),t("p",[r._v("应用程序相关启动参数如下：")]),r._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"center"}},[r._v("名称")]),r._v(" "),t("th",{staticStyle:{"text-align":"center"}},[r._v("说明")])])]),r._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"center"}},[t("code",[r._v("--num-executors")])]),r._v(" "),t("td",{staticStyle:{"text-align":"center"}},[r._v("配置 Executor 的数量")])]),r._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[t("code",[r._v("--executor-memory")])]),r._v(" "),t("td",{staticStyle:{"text-align":"center"}},[r._v("配置每个 Executor 的内存大小")])]),r._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[t("code",[r._v("--executor-cores")])]),r._v(" "),t("td",{staticStyle:{"text-align":"center"}},[r._v("配置每个 Executor 的虚拟 CPU core 数量")])])])]),r._v(" "),t("h2",{attrs:{id:"_3-2-并行度-parallelism"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-并行度-parallelism"}},[r._v("#")]),r._v(" 3.2 并行度（Parallelism）")]),r._v(" "),t("p",[r._v("在分布式计算框架中一般都是多个任务同时执行，由于任务分布在不同的计算节点进行 计算，所以能够真正地实现多任务并行执行，记住，这里是并行，而不是并发。这里我们将整个集群并行执行任务的数量称之为"),t("strong",[r._v("并行度")]),r._v("。那么一个作业到底并行度是多少呢？这个取决于框架的默认配置。应用程序也可以在运行过程中动态修改。")]),r._v(" "),t("h2",{attrs:{id:"_3-3-有向无环图-dag"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-有向无环图-dag"}},[r._v("#")]),r._v(" 3.3 有向无环图（DAG）")]),r._v(" "),t("p",[t("img",{attrs:{src:e(1199),alt:"image-20231204232144806"}})]),r._v(" "),t("p",[r._v("大数据计算引擎框架我们根据使用方式的不同一般会分为四类，其中第一类就是 Hadoop 所承载的 MapReduce,它将计算分为两个阶段，分别为 Map 阶段 和 Reduce 阶段。 对于上层应用来说，就不得不想方设法去拆分算法，甚至于不得不在上层应用实现多个 Job 的串联，以完成一个完整的算法，例如迭代计算。 由于这样的弊端，催生了支持 DAG 框 架的产生。因此，支持 DAG 的框架被划分为第二代计算引擎。如 Tez 以及更上层的 Oozie。这里我们不去细究各种 DAG 实现之间的区别，不过对于当时的 Tez 和 Oozie 来 说，大多还是批处理的任务。接下来就是以 Spark 为代表的第三代的计算引擎。第三代计算引擎的特点主要是 Job 内部的 DAG 支持（不跨越 Job），以及实时计算。 这里所谓的有向无环图，并不是真正意义的图形，而是由 Spark 程序直接映射成的数据流的高级抽象模型。简单理解就是将整个程序计算的执行过程用图形表示出来,这样更直观，更便于理解，可以用于表示程序的拓扑结构。")]),r._v(" "),t("p",[r._v("DAG（Directed Acyclic Graph）有向无环图是由点和线组成的拓扑图形，该图形具有方 向，不会闭环。")]),r._v(" "),t("h1",{attrs:{id:"_4-提交流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-提交流程"}},[r._v("#")]),r._v(" 4 提交流程")]),r._v(" "),t("p",[r._v("所谓的提交流程，其实就是我们开发人员根据需求写的应用程序通过 Spark 客户端提交 给 Spark 运行环境执行计算的流程。在不同的部署环境中，这个提交过程基本相同，但是又有细微的区别，我们这里不进行详细的比较，但是因为国内工作中，将 Spark 引用部署到 Yarn 环境中会更多一些，所以本课程中的提交流程是基于 Yarn 环境的。")]),r._v(" "),t("p",[t("img",{attrs:{src:e(1200),alt:"提交流程"}})]),r._v(" "),t("p",[r._v("Spark 应用程序提交到 Yarn 环境中执行的时候，一般会有两种部署执行的方式：Client 和 Cluster。两种模式主要区别在于：Driver 程序的运行节点位置。")]),r._v(" "),t("h2",{attrs:{id:"_2-1-yarn-client-模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-yarn-client-模式"}},[r._v("#")]),r._v(" 2.1 Yarn Client 模式")]),r._v(" "),t("p",[r._v("Client 模式将用于监控和调度的 Driver 模块在客户端执行，而不是在 Yarn 中，所以一 般用于测试。")]),r._v(" "),t("p",[r._v("➢ Driver 在任务提交的本地机器上运行")]),r._v(" "),t("p",[r._v("➢ Driver 启动后会和 ResourceManager 通讯申请启动 ApplicationMaster")]),r._v(" "),t("p",[r._v("➢ ResourceManager 分配 container，在合适的 NodeManager 上启动 ApplicationMaster，负责向 ResourceManager 申请 Executor 内存")]),r._v(" "),t("p",[r._v("➢ ResourceManager 接到 ApplicationMaster 的资源申请后会分配 container，然后 ApplicationMaster 在资源分配指定的 NodeManager 上启动 Executor 进程")]),r._v(" "),t("p",[r._v("➢ Executor 进程启动后会向 Driver 反向注册，Executor 全部注册完成后 Driver 开始执行 main 函数")]),r._v(" "),t("p",[r._v("➢ 之后执行到 Action 算子时，触发一个 Job，并根据宽依赖开始划分 stage，每个 stage 生 成对应的 TaskSet，之后将 task 分发到各个 Executor 上执行。")]),r._v(" "),t("h2",{attrs:{id:"_2-2-yarn-cluster-模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-yarn-cluster-模式"}},[r._v("#")]),r._v(" 2.2 Yarn Cluster 模式")]),r._v(" "),t("p",[r._v("Cluster 模式将用于监控和调度的 Driver 模块启动在 Yarn 集群资源中执行。一般应用于 实际生产环境。")]),r._v(" "),t("p",[r._v("➢ 在 YARN Cluster 模式下，任务提交后会和 ResourceManager 通讯申请启动 ApplicationMaster，")]),r._v(" "),t("p",[r._v("➢ 随后 ResourceManager 分配 container，在合适的 NodeManager 上启动 ApplicationMaster， "),t("strong",[r._v("此时的 ApplicationMaster 就是 Driver")]),r._v("。")]),r._v(" "),t("p",[r._v("➢ Driver 启动后向 ResourceManager 申请 Executor 内存，ResourceManager 接到 ApplicationMaster 的资源申请后会分配 container，然后在合适的 NodeManager 上启动 Executor 进程")]),r._v(" "),t("p",[r._v("➢ Executor 进程启动后会向 Driver 反向注册，Executor 全部注册完成后 Driver 开始执行 main 函数，")]),r._v(" "),t("p",[r._v("➢ 之后执行到 Action 算子时，触发一个 Job，并根据宽依赖开始划分 stage，每个 stage 生成对应的 TaskSet，之后将 task 分发到各个 Executor 上执行。")]),r._v(" "),t("h1",{attrs:{id:"spark-并行度和分区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spark-并行度和分区"}},[r._v("#")]),r._v(" Spark——并行度和分区")]),r._v(" "),t("p",[r._v("总结：")]),r._v(" "),t("p",[r._v("这里我们定义 Spark "),t("strong",[r._v("并发度为 Spark 同时运行的 task 个数")]),r._v("，那也就是说 Spark "),t("strong",[r._v("理论上最大并发等于 executor 个数 * 单个 executor 的 core 个数")]),r._v("，假设为 X。")]),r._v(" "),t("p",[r._v("如果我们 task 的并发度达不到 X，那么则浪费了此次为 Spark 程序申请的资源，如果我们 task 的并发度超过 X 很多，那么则可能导致最后写的文件数过多，就容易导致更多的小文件。")]),r._v(" "),t("p",[t("strong",[r._v("在 Spark 中一个 partition 会对应一个 task")]),r._v("，因此对于我们来说，理想的情况是：")]),r._v(" "),t("ol",[t("li",[r._v("对于非最终输出文件的 stage 来说，尽可能地使 partition 个数大于 X，这样让一部分 task 处于 pending 状态，才可以充分利用 core，避免让某几个 core 长时间处于空闲状态。")]),r._v(" "),t("li",[r._v("对于最终输出文件的 stage 来说，要根据最终写的目录文件大小设置合理的并发，这里基本上可以参考 256MB（如果数据量特别大的情况，也可以 1GB）写一个文件，并且保证每个文件的大小相差不大。这样可以避免数据倾斜，同时阻止了大量小文件的产生。")])]),r._v(" "),t("p",[r._v("参考 "),t("a",{attrs:{href:"https://blog.csdn.net/weixin_43240150/article/details/129896025",target:"_blank",rel:"noopener noreferrer"}},[r._v("https://blog.csdn.net/weixin_43240150/article/details/129896025"),t("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=_.exports}}]);