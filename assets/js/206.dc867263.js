(window.webpackJsonp=window.webpackJsonp||[]).push([[206],{1537:function(s,a,n){"use strict";n.r(a);var t=n(4),r=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"_1-累加器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-累加器"}},[s._v("#")]),s._v(" 1. 累加器")]),s._v(" "),a("h2",{attrs:{id:"_1-1-实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-实现原理"}},[s._v("#")]),s._v(" 1.1 实现原理")]),s._v(" "),a("p",[s._v("累加器用来把 Executor 端变量信息聚合到 Driver 端。在 Driver 程序中定义的变量，在 Executor 端的每个 Task 都会得到这个变量的一份新的副本，每个 task 更新这些副本的值后， 传回 Driver 端进行 merge。")]),s._v(" "),a("h2",{attrs:{id:"_1-2-基础编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-基础编程"}},[s._v("#")]),s._v(" 1.2 基础编程")]),s._v(" "),a("h3",{attrs:{id:"_1-2-1-系统累加器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-系统累加器"}},[s._v("#")]),s._v(" 1.2.1 系统累加器")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('val rdd = sc.makeRDD(List(1,2,3,4,5))\n// 声明累加器\nvar sum = sc.longAccumulator("sum");\nrdd.foreach(\n num => {\n // 使用累加器\n sum.add(num)\n }\n)\n// 获取累加器的值\nprintln("sum = " + sum.value)\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h3",{attrs:{id:"_1-2-2-自定义累加器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-自定义累加器"}},[s._v("#")]),s._v(" 1.2.2 自定义累加器")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 自定义累加器\n// 1. 继承 AccumulatorV2，并设定泛型\n// 2. 重写累加器的抽象方法\nclass WordCountAccumulator extends AccumulatorV2[String, mutable.Map[String, \nLong]]{\nvar map : mutable.Map[String, Long] = mutable.Map()\n// 累加器是否为初始状态\noverride def isZero: Boolean = {\n map.isEmpty\n}\n// 复制累加器\noverride def copy(): AccumulatorV2[String, mutable.Map[String, Long]] = {\n new WordCountAccumulator\n}\n// 重置累加器\noverride def reset(): Unit = {\n map.clear()\n}\n// 向累加器中增加数据 (In)\noverride def add(word: String): Unit = {\n // 查询 map 中是否存在相同的单词\n // 如果有相同的单词，那么单词的数量加 1\n // 如果没有相同的单词，那么在 map 中增加这个单词\n map(word) = map.getOrElse(word, 0L) + 1L\n}\n\n// 合并累加器\noverride def merge(other: AccumulatorV2[String, mutable.Map[String, Long]]): \nUnit = {\n val map1 = map\n val map2 = other.value\n // 两个 Map 的合并\n map = map1.foldLeft(map2)(\n ( innerMap, kv ) => {\n innerMap(kv._1) = innerMap.getOrElse(kv._1, 0L) + kv._2\n innerMap\n }\n )\n}\n// 返回累加器的结果 （Out）\noverride def value: mutable.Map[String, Long] = map\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br")])]),a("h1",{attrs:{id:"_2-广播变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-广播变量"}},[s._v("#")]),s._v(" 2. 广播变量")]),s._v(" "),a("h2",{attrs:{id:"_2-1-实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-实现原理"}},[s._v("#")]),s._v(" 2.1 实现原理")]),s._v(" "),a("p",[s._v("广播变量用来高效分发较大的对象。向所有工作节点发送一个较大的只读值，以供一个 或多个 Spark 操作使用。比如，如果你的应用需要向所有节点发送一个较大的只读查询表， 广播变量用起来都很顺手。在多个并行操作中使用同一个变量，但是 Spark 会为每个任务分别发送。")]),s._v(" "),a("h2",{attrs:{id:"_2-2-基础编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-基础编程"}},[s._v("#")]),s._v(" 2.2 基础编程")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('val rdd1 = sc.makeRDD(List( ("a",1), ("b", 2), ("c", 3), ("d", 4) ),4)\nval list = List( ("a",4), ("b", 5), ("c", 6), ("d", 7) )\n// 声明广播变量\nval broadcast: Broadcast[List[(String, Int)]] = sc.broadcast(list)\nval resultRDD: RDD[(String, (Int, Int))] = rdd1.map {\n case (key, num) => {\n var num2 = 0\n // 使用广播变量\n for ((k, v) <- broadcast.value) {\n if (k == key) {\n num2 = v\n }\n }\n (key, (num, num2))\n }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])])])}),[],!1,null,null,null);a.default=r.exports}}]);