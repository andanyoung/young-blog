(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{1061:function(n,s,e){"use strict";e.r(s);var a=e(4),r=Object(a.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("p",[n._v("从配置文件中获取属性应该是"),s("code",[n._v("SpringBoot")]),n._v("开发中最为常用的功能之一，但就是这么常用的功能，仍然有很多开发者在这个方面踩坑。")]),n._v(" "),s("p",[n._v("我整理了几种获取配置属性的方式，目的不仅是要让大家学会如何使用，更重要的是"),s("strong",[n._v("弄清配置加载、读取的底层原理")]),n._v("，一旦出现问题可以分析出其症结所在，而不是一报错取不到属性，无头苍蝇般的重启项目，在句句"),s("strong",[n._v("卧槽")]),n._v(" 中逐渐抓狂～")]),n._v(" "),s("blockquote",[s("p",[n._v("以下示例源码 Springboot 版本均为 2.7.6")])]),n._v(" "),s("p",[n._v("下边我们一一过下这几种玩法和原理，看看有哪些是你没用过的！话不多说，开始搞～")]),n._v(" "),s("h2",{attrs:{id:"一、environment"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、environment"}},[n._v("#")]),n._v(" 一、Environment")]),n._v(" "),s("p",[n._v("使用 Environment 方式来获取配置属性值非常简单，只要注入 Environment 类调用其方法"),s("code",[n._v("getProperty(属性key)")]),n._v("即可，但知其然知其所以然，简单了解下它的原理，因为后续的几种获取配置的方法都和它息息相关。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@Slf4j\n@SpringBootTest\npublic class EnvironmentTest {\n\n    @Resource\n    private Environment env;\n\n    @Test\n    public void var1Test() {\n        String var1 = env.getProperty("env101.var1");\n        log.info("Environment 配置获取 {}", var1);\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br")])]),s("h3",{attrs:{id:"_1、什么是-environment"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是-environment"}},[n._v("#")]),n._v(" 1、什么是 Environment？")]),n._v(" "),s("p",[n._v("Environment 是 springboot 核心的环境配置接口，它提供了简单的方法来访问应用程序属性，包括系统属性、操作系统环境变量、命令行参数、和应用程序配置文件中定义的属性等等。")]),n._v(" "),s("h3",{attrs:{id:"_2、配置初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、配置初始化"}},[n._v("#")]),n._v(" 2、配置初始化")]),n._v(" "),s("p",[n._v("Springboot 程序启动加载流程里，会执行"),s("code",[n._v("SpringApplication.run")]),n._v("中的"),s("code",[n._v("prepareEnvironment()")]),n._v("方法进行配置的初始化，那初始化过程每一步都做了什么呢？")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('private ConfigurableEnvironment prepareEnvironment(SpringApplicationRunListeners listeners,\n   DefaultBootstrapContext bootstrapContext, ApplicationArguments applicationArguments) {\n      /**\n      * 1、创建 ConfigurableEnvironment 对象：首先调用 getOrCreateEnvironment() 方法获取或创建\n      * ConfigurableEnvironment 对象，该对象用于存储环境参数。如果已经存在 ConfigurableEnvironment 对象，则直接使用它；否则，根据用户的配置和默认配置创建一个新的。\n      */\n      ConfigurableEnvironment environment = getOrCreateEnvironment();\n      /**\n      * 2、解析并加载用户指定的配置文件，将其作为 PropertySource 添加到环境对象中。该方法默认会解析 application.properties 和 application.yml 文件，并将其添加到 ConfigurableEnvironment 对象中。\n      * PropertySource 或 PropertySourcesPlaceholderConfigurer 加载应用程序的定制化配置。\n      */\n      configureEnvironment(environment, applicationArguments.getSourceArgs());\n      // 3、加载所有的系统属性，并将它们添加到 ConfigurableEnvironment 对象中\n      ConfigurationPropertySources.attach(environment);\n      // 4、通知监听器环境参数已经准备就绪\n      listeners.environmentPrepared(bootstrapContext, environment);\n      /**\n      *  5、将默认的属性源中的所有属性值移到环境对象的队列末尾，\n      这样用户自定义的属性值就可以覆盖默认的属性值。这是为了避免用户无意中覆盖了 Spring Boot 所提供的默认属性。\n      */\n      DefaultPropertiesPropertySource.moveToEnd(environment);\n      Assert.state(!environment.containsProperty("spring.main.environment-prefix"),\n          "Environment prefix cannot be set via properties.");\n      // 6、将 Spring Boot 应用程序的属性绑定到环境对象上，以便能够正确地读取和使用这些配置属性\n      bindToSpringApplication(environment);\n      // 7、如果没有自定义的环境类型，则使用 EnvironmentConverter 类型将环境对象转换为标准的环境类型，并添加到 ConfigurableEnvironment 对象中。\n      if (!this.isCustomEnvironment) {\n        EnvironmentConverter environmentConverter = new EnvironmentConverter(getClassLoader());\n        environment = environmentConverter.convertEnvironmentIfNecessary(environment, deduceEnvironmentClass());\n      }\n      // 8、再次加载系统配置，以防止被其他配置覆盖\n      ConfigurationPropertySources.attach(environment);\n      return environment;\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br")])]),s("p",[n._v("看看它的配置加载流程步骤：")]),n._v(" "),s("ul",[s("li",[n._v("创建 "),s("strong",[n._v("环境对象")]),n._v(" "),s("code",[n._v("ConfigurableEnvironment")]),n._v(" 用于存储环境参数；")]),n._v(" "),s("li",[s("code",[n._v("configureEnvironment")]),n._v(" 方法加载默认的 "),s("code",[n._v("application.properties")]),n._v(" 和 "),s("code",[n._v("application.yml")]),n._v(" 配置文件；以及用户指定的配置文件，将其封装为 "),s("strong",[n._v("PropertySource")]),n._v(" 添加到环境对象中；")]),n._v(" "),s("li",[s("code",[n._v("attach()")]),n._v("： 加载所有的系统属性，并将它们添加到环境对象中；")]),n._v(" "),s("li",[s("code",[n._v("listeners.environmentPrepared()")]),n._v("： 发送环境参数配置已经准备就绪的监听通知；")]),n._v(" "),s("li",[s("code",[n._v("moveToEnd()")]),n._v("： 将 "),s("strong",[n._v("系统默认")]),n._v(" 的属性源中的所有属性值移到环境对象的队列末尾，这样用户自定义的属性值就可以覆盖默认的属性值。")]),n._v(" "),s("li",[s("code",[n._v("bindToSpringApplication")]),n._v("： 应用程序的属性绑定到 Bean 对象上；")]),n._v(" "),s("li",[s("code",[n._v("attach()")]),n._v("： 再次加载系统配置，以防止被其他配置覆盖；")])]),n._v(" "),s("p",[n._v("上边的配置加载流程中，各种配置属性会封装成一个个抽象的数据结构 "),s("code",[n._v("PropertySource")]),n._v("中，这个数据结构代码格式如下，key-value 形式。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public abstract class PropertySource<T> {\n    protected final String name; // 属性源名称\n    protected final T source; // 属性源值（一个泛型，比如Map，Property）\n    public String getName();  // 获取属性源的名字\n    public T getSource(); // 获取属性源值\n    public boolean containsProperty(String name);  //是否包含某个属性\n    public abstract Object getProperty(String name);   //得到属性名对应的属性值\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br")])]),s("p",[s("code",[n._v("PropertySource")]),n._v(" 有诸多的实现类用于管理应用程序的配置属性。不同的 PropertySource 实现类可以从不同的来源获取配置属性，例如文件、环境变量、命令行参数等。其中涉及到的一些实现类有：")]),n._v(" "),s("p",[s("img",{attrs:{src:e(599),alt:""}})]),n._v(" "),s("p",[n._v("关系图")]),n._v(" "),s("ul",[s("li",[s("code",[n._v("MapPropertySource")]),n._v(": Map 键值对的对象转换为 PropertySource 对象的适配器；")]),n._v(" "),s("li",[s("code",[n._v("PropertiesPropertySource")]),n._v(": Properties 对象中的所有配置属性转换为 Spring 环境中的属性值；")]),n._v(" "),s("li",[s("code",[n._v("ResourcePropertySource")]),n._v(": 从文件系统或者 classpath 中加载配置属性，封装成 PropertySource 对象；")]),n._v(" "),s("li",[s("code",[n._v("ServletConfigPropertySource")]),n._v(": Servlet 配置中读取配置属性，封装成 PropertySource 对象；")]),n._v(" "),s("li",[s("code",[n._v("ServletContextPropertySource")]),n._v(": Servlet 上下文中读取配置属性，封装成 PropertySource 对象；")]),n._v(" "),s("li",[s("code",[n._v("StubPropertySource")]),n._v(": 是个空的实现类，它的作用仅仅是给 CompositePropertySource 类作为默认的父级属性源，以避免空指针异常；")]),n._v(" "),s("li",[s("code",[n._v("CompositePropertySource")]),n._v(": 是个复合型的实现类，内部维护了 PropertySource 集合队列，可以将多个 PropertySource 对象合并；")]),n._v(" "),s("li",[s("code",[n._v("SystemEnvironmentPropertySource")]),n._v(": 操作系统环境变量中读取配置属性，封装成 PropertySource 对象；")])]),n._v(" "),s("p",[n._v("上边各类配置初始化生成的 PropertySource 对象会被维护到集合队列中。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("List<PropertySource<?>> sources = new ArrayList<PropertySource<?>>()\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])]),s("p",[n._v("配置初始化完毕，应用程序上下文"),s("code",[n._v("AbstractApplicationContext")]),n._v("会加载配置，这样程序在运行时就可以随时获取配置信息了。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v(" private void prepareContext(DefaultBootstrapContext bootstrapContext, ConfigurableApplicationContext context,\n   ConfigurableEnvironment environment, SpringApplicationRunListeners listeners,\n   ApplicationArguments applicationArguments, Banner printedBanner) {\n    // 应用上下文加载环境对象\n  context.setEnvironment(environment);\n  postProcessApplicationContext(context);\n    .........\n  }\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br")])]),s("h3",{attrs:{id:"_3、读取配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、读取配置"}},[n._v("#")]),n._v(" 3、读取配置")]),n._v(" "),s("p",[n._v("看明白上边配置加载的流程，其实读取配置就容易理解了，无非就是遍历队列里的"),s("code",[n._v("PropertySource")]),n._v("，拿属性名称"),s("code",[n._v("name")]),n._v("匹配对应的属性值"),s("code",[n._v("source")]),n._v("。")]),n._v(" "),s("p",[s("code",[n._v("PropertyResolver")]),n._v("是获取配置的关键类，其内部提供了操作"),s("code",[n._v("PropertySource")]),n._v(" 队列的方法，核心方法"),s("code",[n._v("getProperty(key)")]),n._v("获取配置值，看了下这个类的依赖关系，发现 "),s("code",[n._v("Environment")]),n._v(" 是它子类。")]),n._v(" "),s("p",[s("img",{attrs:{src:e(600),alt:""}})]),n._v(" "),s("p",[n._v("那么直接用 PropertyResolver 来获取配置属性其实也是可以的，到这我们就大致明白了 Springboot 配置的加载和读取了。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@Slf4j\n@SpringBootTest\npublic class EnvironmentTest {\n\n    @Resource\n    private PropertyResolver env;\n\n    @Test\n    public void var1Test() {\n        String var1 = env.getProperty("env101.var1");\n        log.info("Environment 配置获取 {}", var1);\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br")])]),s("h2",{attrs:{id:"二、-value-注解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、-value-注解"}},[n._v("#")]),n._v(" 二、@Value 注解")]),n._v(" "),s("p",[n._v("@Value 注解是"),s("code",[n._v("Spring")]),n._v("框架提供的用于注入配置属性值的注解，它可用于类的"),s("code",[n._v("成员变量")]),n._v("、"),s("code",[n._v("方法参数")]),n._v("和"),s("code",[n._v("构造函数")]),n._v("参数上，"),s("strong",[n._v("这个记住很重要！")])]),n._v(" "),s("p",[n._v("在应用程序启动时，使用 @Value 注解的 Bean 会被实例化。所有使用了 @Value 注解的 Bean 会被加入到 "),s("code",[n._v("PropertySourcesPlaceholderConfigurer")]),n._v(" 的后置处理器集合中。")]),n._v(" "),s("p",[n._v("当后置处理器开始执行时，它会读取 Bean 中所有 @Value 注解所标注的值，并通过反射将解析后的属性值赋值给标有 @Value 注解的成员变量、方法参数和构造函数参数。")]),n._v(" "),s("blockquote",[s("p",[n._v("需要注意，在使用 @Value 注解时需要确保注入的属性值已经加载到 Spring 容器中，否则会导致注入失败。")])]),n._v(" "),s("h3",{attrs:{id:"如何使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何使用"}},[n._v("#")]),n._v(" 如何使用")]),n._v(" "),s("p",[n._v("在"),s("code",[n._v("src/main/resources")]),n._v("目录下的"),s("code",[n._v("application.yml")]),n._v("配置文件中添加"),s("code",[n._v("env101.var1")]),n._v("属性。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("env101:\n  var1: var1\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("p",[n._v("只要在变量上加注解 "),s("code",[n._v('@Value("${env101.var1}")')]),n._v("就可以了，@Value 注解会自动将配置文件中的"),s("code",[n._v("env101.var1")]),n._v("属性值注入到"),s("code",[n._v("var1")]),n._v("字段中，跑个单元测试看一下结果。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@Slf4j\n@SpringBootTest\npublic class EnvVariablesTest {\n\n    @Value("${env101.var1}")\n    private String var1;\n\n    @Test\n    public void var1Test(){\n        log.info("配置文件属性: {}",var1);\n    }\n}\n毫无悬念，成\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br")])]),s("p",[n._v("毫无悬念，成功拿到配置数据。")]),n._v(" "),s("p",[s("img",{attrs:{src:e(601),alt:""}})]),n._v(" "),s("p",[n._v("虽然 @Value 注解方式使用起来很简单，如果使用不当还会遇到不少坑。")]),n._v(" "),s("h3",{attrs:{id:"_1、缺失配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、缺失配置"}},[n._v("#")]),n._v(" 1、缺失配置")]),n._v(" "),s("p",[n._v("如果在代码中引用变量，配置文件中未进行配值，就会出现类似下图所示的错误。")]),n._v(" "),s("p",[s("img",{attrs:{src:e(602),alt:""}})]),n._v(" "),s("p",[n._v("为了避免此类错误导致服务启动异常，我们可以在引用变量的同时给它赋一个"),s("strong",[n._v("默认值")]),n._v("，以确保即使在未正确配值的情况下，程序依然能够正常运行。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@Value("${env101.var1:我是小富}")\nprivate String var1;\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("h3",{attrs:{id:"_2、静态变量-static-赋值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、静态变量-static-赋值"}},[n._v("#")]),n._v(" 2、静态变量（static）赋值")]),n._v(" "),s("p",[n._v("还有一种常见的使用误区，就是将 @Value 注解加到静态变量上，这样做是无法获取属性值的。静态变量是类的属性，并不属于对象的属性，而 Spring 是基于对象的属性进行依赖注入的，类在应用启动时静态变量就被初始化，"),s("strong",[n._v("此时 Bean 还未被实例化，因此不可能通过 @Value 注入属性值。")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@Slf4j\n@SpringBootTest\npublic class EnvVariablesTest {\n\n    @Value("${env101.var1}")\n    private static String var1;\n\n    @Test\n    public void var1Test(){\n        log.info("配置文件属性: {}",var1);\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])]),s("p",[n._v("即使 @Value 注解无法直接用在静态变量上，我们仍然可以通过获取已有 Bean 实例化后的属性值，再将其赋值给静态变量来实现给静态变量赋值。")]),n._v(" "),s("p",[n._v("我们可以先通过 @Value 注解将属性值注入到普通 Bean 中，然后在获取该 Bean 对应的属性值，并将其赋值给静态变量。这样，就可以在静态变量中使用该属性值了。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@Slf4j\n@SpringBootTest\npublic class EnvVariablesTest {\n\n    private static String var3;\n\n    private static String var4;\n\n    @Value("${env101.var3}")\n    public void setVar3(String var3) {\n        var3 = var3;\n    }\n\n    EnvVariablesTest(@Value("${env101.var4}") String var4){\n        var4 = var4;\n    }\n\n    public static String getVar4() {\n        return var4;\n    }\n\n    public static String getVar3() {\n        return var3;\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br")])]),s("h3",{attrs:{id:"_3、常量-final-赋值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、常量-final-赋值"}},[n._v("#")]),n._v(" 3、常量（final）赋值")]),n._v(" "),s("p",[n._v("@Value 注解加到"),s("code",[n._v("final")]),n._v("关键字上同样也无法获取属性值，因为 final 变量必须在构造方法中进行初始化，并且一旦被赋值便不能再次更改。而 @Value 注解是在 bean 实例化之后才进行属性注入的，"),s("strong",[n._v("因此无法在构造方法中初始化 final 变量。")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@Slf4j\n@SpringBootTest\npublic class EnvVariables2Test {\n\n    private final String var6;\n\n    @Autowired\n    EnvVariables2Test( @Value("${env101.var6}")  String var6) {\n\n        this.var6 = var6;\n    }\n\n    /**\n     * @value注解 final 获取\n     */\n    @Test\n    public void var1Test() {\n        log.info("final 注入: {}", var6);\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br")])]),s("h3",{attrs:{id:"_4、非注册的类中使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、非注册的类中使用"}},[n._v("#")]),n._v(" 4、非注册的类中使用")]),n._v(" "),s("p",[n._v("只有标注了"),s("code",[n._v("@Component")]),n._v("、"),s("code",[n._v("@Service")]),n._v("、"),s("code",[n._v("@Controller")]),n._v("、"),s("code",[n._v("@Repository")]),n._v(" 或 "),s("code",[n._v("@Configuration")]),n._v(" 等"),s("strong",[n._v("容器管理")]),n._v("注解的类，由 Spring 管理的 bean 中使用 @Value 注解才会生效。而对于普通的 POJO 类**，则无法使用 @Value 注解进行属性注入。**")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('/**\n * @value注解 非注册的类中使用\n * `@Component`、`@Service`、`@Controller`、`@Repository` 或 `@Configuration` 等\n * 容器管理注解的类中使用 @Value注解才会生效\n */\n@Data\n@Slf4j\n@Component\npublic class TestService {\n\n    @Value("${env101.var7}")\n    private String var7;\n\n    public String getVar7(){\n       return this.var7;\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br")])]),s("h3",{attrs:{id:"_5、引用方式不对"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、引用方式不对"}},[n._v("#")]),n._v(" 5、引用方式不对")]),n._v(" "),s("p",[n._v("如果我们想要获取 TestService 类中的某个变量的属性值，需要使用依赖注入的方式，而不能使用 new 的方式。通过依赖注入的方式创建 TestService 对象，Spring 会在创建对象时将对象所需的属性值注入到其中。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('\n  /**\n   * @value注解 引用方式不对\n   */\n  @Test\n  public void var7_1Test() {\n\n      TestService testService = new TestService();\n      log.info("引用方式不对 注入: {}", testService.getVar7());\n  }\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("blockquote",[s("p",[n._v("最后总结一下 "),s("strong",[n._v("@Value 注解要在 Bean 的生命周期内使用才能生效。")])])]),n._v(" "),s("h2",{attrs:{id:"三、-configurationproperties-注解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、-configurationproperties-注解"}},[n._v("#")]),n._v(" 三、@ConfigurationProperties 注解")]),n._v(" "),s("p",[s("code",[n._v("@ConfigurationProperties")]),n._v("注解是 SpringBoot 提供的一种更加便捷来处理配置文件中的属性值的方式，可以通过自动绑定和类型转换等机制，将指定前缀的属性集合自动绑定到一个 Bean 对象上。")]),n._v(" "),s("h3",{attrs:{id:"加载原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#加载原理"}},[n._v("#")]),n._v(" 加载原理")]),n._v(" "),s("p",[n._v("在 Springboot 启动流程加载配置的 "),s("code",[n._v("prepareEnvironment()")]),n._v(" 方法中，有一个重要的步骤方法 "),s("code",[n._v("bindToSpringApplication(environment)")]),n._v("，它的作用是将配置文件中的属性值绑定到被 "),s("code",[n._v("@ConfigurationProperties")]),n._v(" 注解标记的 Bean 对象中。但此时这些对象还没有被 Spring 容器管理，因此无法完成属性的自动注入。")]),n._v(" "),s("p",[n._v("那么这些 Bean 对象又是什么时候被注册到 Spring 容器中的呢？")]),n._v(" "),s("p",[n._v("这就涉及到了 "),s("code",[n._v("ConfigurationPropertiesBindingPostProcessor")]),n._v(" 类，它是 Bean 后置处理器，负责扫描容器中所有被 @ConfigurationProperties 注解所标记的 Bean 对象。如果找到了，则会使用 Binder 组件将外部属性的值绑定到它们身上，从而实现自动注入。")]),n._v(" "),s("p",[s("img",{attrs:{src:e(603),alt:""}})]),n._v(" "),s("ul",[s("li",[s("code",[n._v("bindToSpringApplication")]),n._v(" 主要是将属性值绑定到 Bean 对象中；")]),n._v(" "),s("li",[s("code",[n._v("ConfigurationPropertiesBindingPostProcessor")]),n._v(" 负责在 Spring 容器启动时将被注解标记的 Bean 对象注册到容器中，并完成后续的属性注入操作；")])]),n._v(" "),s("h3",{attrs:{id:"如何使用-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何使用-2"}},[n._v("#")]),n._v(" 如何使用")]),n._v(" "),s("p",[n._v("演示使用 @ConfigurationProperties 注解，在 application.yml 配置文件中添加配置项：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("env101:\n  var1: var1\n  var2: var2\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("p",[n._v("创建一个 MyConf 类用于承载所有前缀为"),s("code",[n._v("env101")]),n._v("的配置属性。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@Data\n@Configuration\n@ConfigurationProperties(prefix = "env101")\npublic class MyConf {\n\n    private String var1;\n\n    private String var2;\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br")])]),s("p",[n._v("在需要使用"),s("code",[n._v("var1")]),n._v("、"),s("code",[n._v("var2")]),n._v("属性值的地方，将 MyConf 对象注入到依赖对象中即可。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@Slf4j\n@SpringBootTest\npublic class ConfTest {\n\n    @Resource\n    private MyConf myConf;\n\n    @Test\n    public void myConfTest() {\n        log.info("@ConfigurationProperties注解 配置获取 {}", JSON.toJSONString(myConf));\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])]),s("h2",{attrs:{id:"四、-propertysources-注解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、-propertysources-注解"}},[n._v("#")]),n._v(" 四、@PropertySources 注解")]),n._v(" "),s("p",[n._v("除了系统默认的 "),s("code",[n._v("application.yml")]),n._v(" 或者 "),s("code",[n._v("application.properties")]),n._v(" 文件外，我们还可能需要使用自定义的配置文件来实现更加灵活和个性化的配置。与默认的配置文件不同的是，自定义的配置文件无法被应用自动加载，需要我们手动指定加载。")]),n._v(" "),s("p",[s("code",[n._v("@PropertySources")]),n._v(" 注解的实现原理相对简单，应用程序启动时扫描所有被该注解标注的类，获取到注解中指定自定义配置文件的路径，将指定路径下的配置文件内容加载到 Environment 中，这样可以通过 "),s("code",[n._v("@Value")]),n._v(" 注解或 "),s("code",[n._v("Environment.getProperty()")]),n._v(" 方法来获取其中定义的属性值了。")]),n._v(" "),s("h3",{attrs:{id:"如何使用-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何使用-3"}},[n._v("#")]),n._v(" 如何使用")]),n._v(" "),s("p",[n._v("在 src/main/resources/ 目录下创建自定义配置文件 "),s("code",[n._v("xiaofu.properties")]),n._v("，增加两个属性。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("env101.var9=var9\nenv101.var10=var10\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("p",[n._v("在需要使用自定义配置文件的类上添加 "),s("code",[n._v("@PropertySources")]),n._v(" 注解，注解 value 属性中指定自定义配置文件的路径，可以指定多个路径，用逗号隔开。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@Data\n@Configuration\n@PropertySources({\n        @PropertySource(value = "classpath:xiaofu.properties",encoding = "utf-8"),\n        @PropertySource(value = "classpath:xiaofu.properties",encoding = "utf-8")\n})\npublic class PropertySourcesConf {\n\n    @Value("${env101.var10}")\n    private String var10;\n\n    @Value("${env101.var9}")\n    private String var9;\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br")])]),s("p",[n._v("成功获取配置了")]),n._v(" "),s("p",[s("img",{attrs:{src:e(604),alt:""}})]),n._v(" "),s("p",[n._v("但是当我试图加载"),s("code",[n._v(".yaml")]),n._v("文件时，启动项目居然报错了，经过一番摸索我发现，@PropertySources 注解只内置了"),s("code",[n._v("PropertySourceFactory")]),n._v("适配器。也就是说它只能加载"),s("code",[n._v(".properties")]),n._v("文件。")]),n._v(" "),s("p",[s("img",{attrs:{src:e(605),alt:""}})]),n._v(" "),s("p",[n._v("那如果我想要加载一个"),s("code",[n._v(".yaml")]),n._v("类型文件，则"),s("strong",[n._v("需要自行实现 yaml 的适配器")]),n._v(" "),s("code",[n._v("YamlPropertySourceFactory")]),n._v("。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public class YamlPropertySourceFactory implements PropertySourceFactory {\n\n    @Override\n    public PropertySource<?> createPropertySource(String name, EncodedResource encodedResource) throws IOException {\n        YamlPropertiesFactoryBean factory = new YamlPropertiesFactoryBean();\n        factory.setResources(encodedResource.getResource());\n\n        Properties properties = factory.getObject();\n\n        return new PropertiesPropertySource(encodedResource.getResource().getFilename(), properties);\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])]),s("p",[n._v("而在加载配置时要显示的指定使用 "),s("code",[n._v("YamlPropertySourceFactory")]),n._v("适配器，这样就完成了 @PropertySource 注解加载 yaml 文件。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@Data\n@Configuration\n@PropertySources({\n        @PropertySource(value = "classpath:xiaofu.yaml", encoding = "utf-8", factory = YamlPropertySourceFactory.class)\n})\npublic class PropertySourcesConf2 {\n\n    @Value("${env101.var10}")\n    private String var10;\n\n    @Value("${env101.var9}")\n    private String var9;\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br")])]),s("h2",{attrs:{id:"五、yamlpropertiesfactorybean-加载-yaml-文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、yamlpropertiesfactorybean-加载-yaml-文件"}},[n._v("#")]),n._v(" 五、YamlPropertiesFactoryBean 加载 YAML 文件")]),n._v(" "),s("p",[n._v("我们可以使用 "),s("code",[n._v("YamlPropertiesFactoryBean")]),n._v(" 类将 YAML 配置文件中的属性值注入到 Bean 中。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@Configuration\npublic class MyYamlConfig {\n\n    @Bean\n    public static PropertySourcesPlaceholderConfigurer yamlConfigurer() {\n        PropertySourcesPlaceholderConfigurer configurer = new PropertySourcesPlaceholderConfigurer();\n        YamlPropertiesFactoryBean yaml = new YamlPropertiesFactoryBean();\n        yaml.setResources(new ClassPathResource("xiaofu.yml"));\n        configurer.setProperties(Objects.requireNonNull(yaml.getObject()));\n        return configurer;\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])]),s("p",[n._v("可以通过 "),s("code",[n._v("@Value")]),n._v(" 注解或 "),s("code",[n._v("Environment.getProperty()")]),n._v(" 方法来获取其中定义的属性值。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@Slf4j\n@SpringBootTest\npublic class YamlTest {\n\n    @Value("${env101.var11}")\n    private String var11;\n\n    @Test\n    public void  myYamlTest() {\n        log.info("Yaml 配置获取 {}", var11);\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])]),s("h2",{attrs:{id:"六、自定义读取"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、自定义读取"}},[n._v("#")]),n._v(" 六、自定义读取")]),n._v(" "),s("p",[n._v("如果上边的几种读取配置的方式你都不喜欢，就想自己写个更流批的轮子，那也很好办。我们直接注入"),s("code",[n._v("PropertySources")]),n._v("获取所有属性的配置队列，你是想用注解实现还是其他什么方式，就可以为所欲为了。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@Slf4j\n@SpringBootTest\npublic class CustomTest {\n\n    @Autowired\n    private PropertySources propertySources;\n\n    @Test\n    public void customTest() {\n        for (PropertySource<?> propertySource : propertySources) {\n            log.info("自定义获取 配置获取 name {} ,{}", propertySource.getName(), propertySource.getSource());\n        }\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br")])]),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[n._v("#")]),n._v(" 总结")]),n._v(" "),s("p",[n._v("我们可以通过 "),s("code",[n._v("@Value")]),n._v(" 注解、"),s("code",[n._v("Environment")]),n._v(" 类、"),s("code",[n._v("@ConfigurationProperties")]),n._v(" 注解、"),s("code",[n._v("@PropertySource")]),n._v(" 注解等方式来获取配置信息。")]),n._v(" "),s("p",[n._v("其中，@Value 注解适用于单个值的注入，而其他几种方式适用于批量配置的注入。不同的方式在效率、灵活性、易用性等方面存在差异，在选择配置获取方式时，还需要考虑个人编程习惯和业务需求。")]),n._v(" "),s("p",[n._v("如果重视代码的可读性和可维护性，则可以选择使用 "),s("code",[n._v("@ConfigurationProperties")]),n._v(" 注解；如果更注重运行效率，则可以选择使用 "),s("code",[n._v("Environment")]),n._v(" 类。总之，不同的场景需要选择不同的方式，以达到最优的效果。")])])}),[],!1,null,null,null);s.default=r.exports},599:function(n,s,e){n.exports=e.p+"assets/img/640-1687166632027-41.459f0776.png"},600:function(n,s,e){n.exports=e.p+"assets/img/640-1687166632028-42.35fa8da5.png"},601:function(n,s,e){n.exports=e.p+"assets/img/640-1687166632028-43.737c5b2c.png"},602:function(n,s,e){n.exports=e.p+"assets/img/640-1687166632028-44.1e715cc6.png"},603:function(n,s,e){n.exports=e.p+"assets/img/640-1687166632028-45.7b4e5a55.png"},604:function(n,s,e){n.exports=e.p+"assets/img/640-1687166632029-46.41475e85.png"},605:function(n,s,e){n.exports=e.p+"assets/img/640-1687166632029-47.207c268d.png"}}]);