(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{337:function(e,s,a){e.exports=a.p+"assets/img/640-1689891821-1jkjdad.bdb8fdc7.png"},338:function(e,s,a){e.exports=a.p+"assets/img/640-1689824848744-3.78558ea6.png"},339:function(e,s,a){e.exports=a.p+"assets/img/640-1689824925434-6.570de36d.png"},340:function(e,s,a){e.exports=a.p+"assets/img/640-1689828074701-9.b041ecb5.png"},341:function(e,s,a){e.exports=a.p+"assets/img/640-1689828109893-12.0667e0ad.png"},342:function(e,s,a){e.exports=a.p+"assets/img/640-1689828127158-15.565d7def.png"},343:function(e,s,a){e.exports=a.p+"assets/img/640-1689828129251-18.8013c98d.png"},344:function(e,s,a){e.exports=a.p+"assets/img/640-1689828137164-21.a6604546.png"},345:function(e,s,a){e.exports=a.p+"assets/img/640-1689828157084-24.a7e70a35.png"},346:function(e,s,a){e.exports=a.p+"assets/img/640-1689828171597-27.5c9d4f40.png"},989:function(e,s,a){"use strict";a.r(s);var n=a(4),t=Object(n.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("三分钟你将学会：")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("Dubbo 的自适应扩展机制")])]),e._v(" "),s("li",[s("p",[e._v("Dubbo 的 SPI 扩展机制")])]),e._v(" "),s("li",[s("p",[e._v("Dubbo 的自定义扩展点机制")])]),e._v(" "),s("li",[s("p",[e._v("Dubbo 的过滤器扩展机制")])]),e._v(" "),s("li",[s("p",[e._v("Dubbo 的负载均衡扩展机制；")])]),e._v(" "),s("li",[s("p",[e._v("Dubbo 的容错机制扩展；")])])]),e._v(" "),s("h2",{attrs:{id:"一、dubbo-扩展机制的概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、dubbo-扩展机制的概述"}},[e._v("#")]),e._v(" 一、Dubbo 扩展机制的概述")]),e._v(" "),s("blockquote",[s("p",[e._v("Dubbo 是一个"),s("strong",[e._v("高性能的分布式服务框架")]),e._v("，广泛应用于各种规模和种类的企业级项目中。在实际应用过程中，Dubbo 的核心能力是扩展机制，它可以让 Dubbo 具有更强的可定制化能力，也可以让 Dubbo 更好地适应各种应用场景。")])]),e._v(" "),s("p",[s("img",{attrs:{src:a(337),alt:"Dubbo的扩展机制"}})]),e._v(" "),s("p",[e._v("**Dubbo 的扩展机制主要包括：**自适应扩展机制、SPI 扩展机制、自定义扩展点机制、过滤器扩展机制、负载均衡扩展机制和容错机制扩展。")]),e._v(" "),s("p",[e._v("这些机制使得 Dubbo 的使用更加灵活方便，可以满足不同需要的业务场景，也可以根据实际情况来选择合适的扩展机制。")]),e._v(" "),s("p",[e._v("在 Dubbo 的扩展机制中，尤其需要注意自定义扩展点机制和 SPI 扩展机制。这些机制是 Dubbo 中较为重要和常用的扩展机制，充分了解这些机制可以让应用程序更加灵活和可定制。")]),e._v(" "),s("p",[s("strong",[e._v("下图展示了 Dubbo 扩展机制的调用流程：")])]),e._v(" "),s("p",[s("img",{attrs:{src:a(338),alt:"Dubbo扩展机制"}})]),e._v(" "),s("p",[e._v("上图中，Dubbo 客户端首先会通过 ExtensionLoader 加载需要使用的扩展点，ExtensionLoader 会根据客户端传入的扩展点名和配置，创建对应的扩展点实例，并返回给客户端，客户端再通过返回的扩展点实例调用相应的方法。")]),e._v(" "),s("h2",{attrs:{id:"二、dubbo-的自适应扩展机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、dubbo-的自适应扩展机制"}},[e._v("#")]),e._v(" 二、Dubbo 的自适应扩展机制")]),e._v(" "),s("h3",{attrs:{id:"_1、什么是自适应扩展机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是自适应扩展机制"}},[e._v("#")]),e._v(" 1、什么是自适应扩展机制")]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("自适应扩展机制")]),e._v("是 Dubbo 提供的一种机制，它可以使 Dubbo 框架根据实际使用情况动态地选择不同的扩展实现，从而达到最优的效果。")])]),e._v(" "),s("p",[s("strong",[e._v("自适应扩展机制的实现方式")]),e._v("是通过在扩展接口的代理类中，根据实际情况动态地生成对应扩展实现的代理类实例。")]),e._v(" "),s("p",[e._v("下图是自适应扩展机制的详细时序图：")]),e._v(" "),s("p",[s("img",{attrs:{src:a(339),alt:"自适应扩展机制"}})]),e._v(" "),s("p",[e._v("上图中")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("Client 先调用 ExtensionLoader 加载扩展点，并解析配置文件；")])]),e._v(" "),s("li",[s("p",[e._v("ExtensionLoader 根据配置文件查找实现类")])]),e._v(" "),s("li",[s("p",[e._v("然后创建一个 AdaptiveExtension 的代理对象，并将该代理对象返回给 Client；")])]),e._v(" "),s("li",[s("p",[e._v("Client 调用代理对象的方法时，AdaptiveExtension 会根据配置使用具体的扩展点实现，并将调用转发给具体的扩展点实现；")])]),e._v(" "),s("li",[s("p",[e._v("最后将结果返回给 Client；")])])]),e._v(" "),s("h3",{attrs:{id:"_2、自适应扩展机制的使用示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、自适应扩展机制的使用示例"}},[e._v("#")]),e._v(" 2、自适应扩展机制的使用示例")]),e._v(" "),s("p",[e._v("在 Dubbo 框架中，有一个名为 Protocol 的扩展接口，它有多种不同的实现方式，如 dubbo、rmi、http 等。在使用 Dubbo 时，我们可以通过@Reference 注解来注入对应的扩展实现，如：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('@Reference(protocol = "dubbo")\nprivate DemoService demoService;\n\n\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("在上述代码中，我们指定了使用 dubbo 协议的 DemoService 接口的扩展实现。")]),e._v(" "),s("p",[e._v("我们也可以通过 adaptive 属性来实现自适应调用，如：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('@Reference(adaptive = "true")\nprivate Protocol protocol;\n\n\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("在上述代码中，我们使用了 adaptive 属性，并注入了 Protocol 类型的实例。这时，Dubbo 框架会根据实际情况动态地生成对应实现的代理类，并返回对应的实例。")]),e._v(" "),s("h2",{attrs:{id:"三、dubbo-的-spi-扩展机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、dubbo-的-spi-扩展机制"}},[e._v("#")]),e._v(" 三、Dubbo 的 SPI 扩展机制")]),e._v(" "),s("h3",{attrs:{id:"_1、什么是-spi-扩展机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是-spi-扩展机制"}},[e._v("#")]),e._v(" 1、什么是 SPI 扩展机制")]),e._v(" "),s("blockquote",[s("p",[e._v("Dubbo 使用了 Java 的 SPI（Service Provider Interface）扩展机制。"),s("strong",[e._v("SPI 是 JDK 内置的一种服务发现机制")]),e._v("，其具体实现方式是在资源文件 META-INF/services 中通过名称为 SPI 接口的全限定类名创建一个文本文件，在这个文本文件中可以写入该 SPI 接口的实现类全限定类名，这样可以实现动态加载实现类的目的。")])]),e._v(" "),s("p",[s("strong",[e._v("Dubbo 中的 SPI 扩展机制")]),e._v("能够在不修改核心源代码的前提下，通过修改配置文件或者实现自定义拓展类的方式来替换或增加核心功能。")]),e._v(" "),s("p",[e._v("下图描述了 Dubbo SPI 扩展机制的工作流程：")]),e._v(" "),s("p",[s("img",{attrs:{src:a(340),alt:"SPI 扩展机制"}})]),e._v(" "),s("p",[e._v("上图描述了 Dubbo SPI 扩展机制的工作流程，其中：")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("用户向 Dubbo Framework 请求获取 ExtensionLoader，ExtensionLoader 是 Dubbo SPI 扩展机制的核心类；")])]),e._v(" "),s("li",[s("p",[e._v("Dubbo Framework 加载 ExtensionLoader，并返回给用户；")])]),e._v(" "),s("li",[s("p",[e._v("用户调用 ExtensionLoader 的方法；")])]),e._v(" "),s("li",[s("p",[e._v("ExtensionLoader 根据指定的 Extension 接口，通过 SPI 机制加载 Extension 实现；")])]),e._v(" "),s("li",[s("p",[e._v("Extension 实现将被加载，ExtensionLoader 返回 Extension 实现给用户；")])])]),e._v(" "),s("h3",{attrs:{id:"_2、spi-扩展机制的使用示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、spi-扩展机制的使用示例"}},[e._v("#")]),e._v(" 2、SPI 扩展机制的使用示例")]),e._v(" "),s("p",[e._v("首先，我们需要定义一个 SPI 扩展接口，让 Dubbo 的扩展实现类都实现该接口。")]),e._v(" "),s("p",[e._v("示例代码：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('package com.example.extension;\n\nimport com.alibaba.dubbo.common.extension.SPI;\n\n@SPI("default")\npublic interface PrintService {\n    void print(String msg);\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[e._v("在接口上添加@SPI 注解，指定该扩展的默认实现类。")]),e._v(" "),s("p",[e._v("然后，我们需要在"),s("code",[e._v("META-INF/services")]),e._v("目录下创建一个“接口全限定类名”的文件名的文件，文件中写入我们实现的 SPI 扩展类的全限定类名。")]),e._v(" "),s("p",[e._v("比如我们需要同过实现 PrintService 接口来实现打印功能，那么我们在 META-INF/services/目录下创建一个名为"),s("code",[e._v("“com.example.extension.PrintService”")]),e._v("的文件，文件内容为：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("com.example.extension.impl.ConsolePrintServiceImpl\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("接下来，我们就可以通过 Dubbo 框架自动加载通过 SPI 机制注册的实现类了。")]),e._v(" "),s("p",[e._v("示例代码：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('AnnotationConfigApplicationContext context = \nnew AnnotationConfigApplicationContext(Main.class);\n    PrintService printService = \n    ExtensionLoader.getExtensionLoader(PrintService.class).getDefaultExtension();\n    printService.print("hello world!");\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("以上代码中，我们使用 Dubbo 的扩展加载器 ExtensionLoader 来获取 PrintService 接口的默认实现类，然后调用该实现类的 print()方法即可实现打印功能。")]),e._v(" "),s("h3",{attrs:{id:"_3、dubbo-的-spi-扩展机制中自定义扩展点的实现示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、dubbo-的-spi-扩展机制中自定义扩展点的实现示例"}},[e._v("#")]),e._v(" 3、Dubbo 的 SPI 扩展机制中自定义扩展点的实现示例")]),e._v(" "),s("p",[e._v("在 Dubbo 框架中，我们可以通过自定义扩展点来增强 Dubbo 的功能。")]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("自定义扩展点")]),e._v("需要实现 Dubbo 提供的 ExtensionFactory 接口，并在"),s("code",[e._v("META-INF/dubbo/internal/")]),e._v("路径下创建一个文件名为"),s("code",[e._v("com.alibaba.dubbo.common.extension.ExtensionFactory")]),e._v("的文件，文件中写入扩展点实现类的全限定类名。")])]),e._v(" "),s("p",[e._v("示例代码：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("package com.example.extension;\n\nimport com.alibaba.dubbo.common.extension.ExtensionFactory;\n\npublic class MyExtensionFactory implements ExtensionFactory {\n    @Override\n    public <T> T getExtension(Class<T> type, String name) {\n        if (type.equals(PrintService.class)) {\n            return (T) new ConsolePrintServiceImpl();\n        }\n        return null;\n    }\n}\n\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br")])]),s("p",[e._v("在 MyExtensionFactory 中实现 getExtension()方法，并根据 type 参数判断获取哪个扩展实现类。")]),e._v(" "),s("blockquote",[s("p",[e._v("在本示例中，我们仅仅实现了 PrintService 接口的实现类，因此只需要判断 type 参数是否为 PrintService 类即可。")])]),e._v(" "),s("p",[e._v("下一步，我们需要在 META-INF/dubbo/internal/目录下创建一个名为"),s("code",[e._v("com.alibaba.dubbo.common.extension.ExtensionFactory")]),e._v("的文件，文件内容为我们实现的扩展点实现类全限定类名。")]),e._v(" "),s("p",[e._v("比如我们实现的扩展点实现类为"),s("code",[e._v("com.example.extension.MyExtensionFactory")]),e._v("，那么我们就要在 META-INF/dubbo/internal/目录下创建一个名为"),s("code",[e._v("com.alibaba.dubbo.common.extension.ExtensionFactory")]),e._v("的文件，并将文件内容写为"),s("code",[e._v("com.example.extension.MyExtensionFactory。")])]),e._v(" "),s("p",[e._v("最后，我们在程序中就可以使用自定义的扩展点了。示例代码：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('AnnotationConfigApplicationContext context = \nnew AnnotationConfigApplicationContext(Main.class);\nPrintService printService = \nExtensionLoader.getExtensionLoader(PrintService.class).getExtension("console");\nprintService.print("hello world!");\n\n\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("p",[e._v("在以上示例代码中，我们通过 getExtension()方法来获取 PrintService 接口的实现类。getExtension()方法中的参数为扩展点的 name 属性，该属性值默认为“default”。")]),e._v(" "),s("p",[e._v("在本示例中我们将 name 的值设置为“console”，因此即使用了我们自定义的扩展点实现类。")]),e._v(" "),s("h2",{attrs:{id:"四、dubbo-的自定义扩展点机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、dubbo-的自定义扩展点机制"}},[e._v("#")]),e._v(" 四、Dubbo 的自定义扩展点机制")]),e._v(" "),s("h3",{attrs:{id:"_1、什么是自定义扩展点机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是自定义扩展点机制"}},[e._v("#")]),e._v(" 1、什么是自定义扩展点机制")]),e._v(" "),s("blockquote",[s("p",[e._v("Dubbo 的"),s("strong",[e._v("自定义扩展点机制")]),e._v("是在 SPI 扩展机制的基础上，增加了自定义扩展点的实现方式。通过 Dubbo 的扩展机制，我们可以通过配置文件切换 Dubbo 内部的实现方式，但是对于用户自己实现的功能模块，如何进行扩展呢？")])]),e._v(" "),s("p",[e._v("这里就需要用到自定义扩展点机制了。")]),e._v(" "),s("p",[e._v("下图是自定义扩展点机制的详细时序图：")]),e._v(" "),s("p",[s("img",{attrs:{src:a(341),alt:"自定义扩展点机制"}})]),e._v(" "),s("p",[e._v("在上图中")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("用户首先将自己实现的扩展点注册到 Dubbo 中；")])]),e._v(" "),s("li",[s("p",[e._v("然后在需要使用该扩展点的时候，Dubbo 会根据扩展点的名称进行查找并返回相应的扩展点实例；")])]),e._v(" "),s("li",[s("p",[e._v("通过这样的机制，用户可以灵活地扩展 Dubbo 的功能，同时也可以让 Dubbo 更加适应不同的业务场景。")])])]),e._v(" "),s("p",[e._v("自定义扩展点的核心思想就是："),s("strong",[e._v("“面向接口编程，实现类实现接口，接口与实现类通过扩展点 Binder 关联。”")])]),e._v(" "),s("p",[e._v("其中，Binder 的定义可以参考以下的代码：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("public interface ExtensionFactory {\n    // 返回一个扩展点的代理对象\n    <T> T getExtension(Class<T> type, String name) throws IllegalStateException;\n}\n\npublic interface ExtensionLoader<T> {\n    T getExtension(String name);\n}\n\npublic interface ExtensionBinder<T> {\n    // 绑定\n    void bind(T instance);\n    // 获取绑定的扩展对象\n    T get();\n}\n\npublic interface ExtensionLoaderListener {\n    void onLoad();\n}\n\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br")])]),s("h3",{attrs:{id:"_2、自定义扩展点机制的使用示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、自定义扩展点机制的使用示例"}},[e._v("#")]),e._v(" 2、自定义扩展点机制的使用示例")]),e._v(" "),s("p",[e._v("为了更好地理解 Dubbo 的自定义扩展点机制，我们可以通过一个简单的示例来演示其使用方法。假设我们有一个接口 HelloService，我们想要通过自定义扩展点机制，为这个接口添加一个实现类。")]),e._v(" "),s("p",[e._v("首先，我们需要创建一个实现类 HelloServiceImpl，该实现类需要实现 HelloService 接口。")]),e._v(" "),s("p",[e._v("接着，我们需要在"),s("code",[e._v("resources/META-INF/dubbo")]),e._v("目录下创建一个名为 com.xxx.HelloService 的文件，该文件中需要指定 HelloService 接口的实现类名称。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("helloService=com.xxx.HelloServiceImpl\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("接下来，我们需要在代码中获取 HelloService 接口的实例。这可以通过以下方式实现：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('ExtensionLoader<HelloService> loader = \nExtensionLoader.getExtensionLoader(HelloService.class);\nHelloService helloService = \nloader.getExtension("helloService");\nhelloService.sayHello();\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("其中，getExtensionLoader()方法用于获取扩展点的 ExtensionLoader 实例，getExtension()方法用于 获取具体的扩展实例。")]),e._v(" "),s("p",[e._v("在上面的代码中，我们通过“helloService”这个名称获取到了实现了 HelloService 接口的 HelloServiceImpl 实例，并调用了其中的 sayHello()方法。")]),e._v(" "),s("p",[e._v("通过上述示例，我们可以看出，使用 Dubbo 的自定义扩展点机制非常简单，只需要在配置文件中指定实现类的名称，然后通过 getExtensionLoader()和 getExtension()方法获取实例即可。")]),e._v(" "),s("h3",{attrs:{id:"_3、dubbo-的自定义扩展点机制的实现示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、dubbo-的自定义扩展点机制的实现示例"}},[e._v("#")]),e._v(" 3、Dubbo 的自定义扩展点机制的实现示例")]),e._v(" "),s("p",[e._v("在 Dubbo 的自定义扩展点机制中，最核心的是 ExtensionLoader 类和 ExtensionFactory 类。")]),e._v(" "),s("p",[e._v("其中，ExtensionLoader 用于加载和管理扩展实例，ExtensionFactory 用于创建扩展实例。")]),e._v(" "),s("p",[e._v("下面，我们将通过一个简单的示例，演示 Dubbo 的自定义扩展点机制的具体实现方式。")]),e._v(" "),s("p",[s("strong",[e._v("首先，我们需要定义一个扩展点接口：")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("public interface HelloService {\n    String sayHello(String name);\n}\n\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[s("strong",[e._v("接着，我们需要实现该接口的一个实现类：")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('@SPI("helloWorld")\npublic class HelloWorldService implements HelloService {\n    @Override\n    public String sayHello(String name) {\n        return "Hello, " + name;\n    }\n}\n\n\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("p",[e._v("在这里，我们使用了@SPI 注解来指定该扩展点的默认实现，如果配置文件中没有指定其他实现，则会使用该默认实现。")]),e._v(" "),s("p",[s("strong",[e._v("接下来，我们需要创建一个名为 com.xxx.HelloService 的文件，该文件中需要指定扩展点接口的实现类名称：")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("helloWorld=com.xxx.HelloWorldService\n\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[s("strong",[e._v("最后，我们需要在代码中获取 HelloService 接口的实例，这可以通过以下代码实现：")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('ExtensionLoader<HelloService> loader = \nExtensionLoader.getExtensionLoader(HelloService.class);\nHelloService helloService = \nloader.getExtension("helloWorld");\nSystem.out.println(helloService.sayHello("Dubbo"));\n\n\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("p",[e._v("在上述代码中，我们通过 getExtensionLoader()方法获取 HelloService 接口的 ExtensionLoader 实例，然后通过 getExtension()方法获取名为“helloWorld”的实现类实例，并调用其中的 sayHello()方法。")]),e._v(" "),s("h2",{attrs:{id:"五、dubbo-的过滤器扩展机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、dubbo-的过滤器扩展机制"}},[e._v("#")]),e._v(" 五、Dubbo 的过滤器扩展机制")]),e._v(" "),s("h3",{attrs:{id:"_1、dubbo-的过滤器机制概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、dubbo-的过滤器机制概述"}},[e._v("#")]),e._v(" 1、Dubbo 的过滤器机制概述")]),e._v(" "),s("p",[s("img",{attrs:{src:a(342),alt:"图片"}})]),e._v(" "),s("blockquote",[s("p",[e._v("Dubbo 的"),s("strong",[e._v("过滤器机制")]),e._v("允许在调用前、调用后以及抛出异常时执行一些额外的操作。过滤器在调用链路中按顺序执行，可以在过滤器中实现各种功能，例如：日志记录、性能统计、权限控制等。")])]),e._v(" "),s("p",[s("img",{attrs:{src:a(343),alt:"内置过滤器"}})]),e._v(" "),s("p",[e._v("Dubbo 中内置了多个过滤器，包括：ClassLoader 过滤器、Context 过滤器、Generic 过滤器、Echo 过滤器、Token 过滤器、AccessLog 过滤器等。")]),e._v(" "),s("p",[e._v("下面是 Dubbo 的过滤器机制的时序图：")]),e._v(" "),s("p",[s("img",{attrs:{src:a(344),alt:"图片"}})]),e._v(" "),s("p",[e._v("上图中")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("服务消费者向服务提供者发送请求时，请求先经过过滤器 1；")])]),e._v(" "),s("li",[s("p",[e._v("如果过滤器 1 通过则进一步经过过滤器 2；")])]),e._v(" "),s("li",[s("p",[e._v("如果过滤器 2 通过则进一步经过过滤器 3；")])]),e._v(" "),s("li",[s("p",[e._v("如果过滤器 3 通过则将请求发送给服务提供者，服务提供者处理请求后将响应返回给服务消费者，响应也会经过相同的过滤器链路；")])]),e._v(" "),s("li",[s("p",[e._v("如果任意一个过滤器拒绝请求，则直接返回错误响应。")])])]),e._v(" "),s("h3",{attrs:{id:"_2、过滤器扩展机制的使用示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、过滤器扩展机制的使用示例"}},[e._v("#")]),e._v(" 2、过滤器扩展机制的使用示例")]),e._v(" "),s("p",[e._v("Dubbo 提供了"),s("strong",[e._v("扩展机制")]),e._v("，可以在 dubbo 配置文件中配置过滤器，示例如下：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<dubbo:provider filter="accessLogFilter" />\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("在上面的例子中，accessLogFilter 表示需要使用的过滤器名称，可以在 dubbo 配置文件中通过 dubbo:filter 标签进行定义。")]),e._v(" "),s("h3",{attrs:{id:"_3、自定义过滤器的实现示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、自定义过滤器的实现示例"}},[e._v("#")]),e._v(" 3、自定义过滤器的实现示例")]),e._v(" "),s("p",[e._v("要实现自定义过滤器，需要按照以下步骤进行：")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("定义一个类实现 org.apache.dubbo.rpc.Filter 接口；")])]),e._v(" "),s("li",[s("p",[e._v("实现接口中的方法；")])]),e._v(" "),s("li",[s("p",[e._v("在 META-INF/dubbo 目录下创建一个以"),s("code",[e._v("org.apache.dubbo.rpc.Filter")]),e._v("接口全限定名为名称的文件，并在文件中添加自定义过滤器的类名。")])])]),e._v(" "),s("p",[e._v("下面是一个自定义的过滤器示例：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('package com.example;\n\nimport org.apache.dubbo.common.extension.Activate;\nimport org.apache.dubbo.rpc.*;\n\n@Activate(group = "provider")\npublic class MyFilter implements Filter {\n    @Override\n    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n        // 在这里实现自己的逻辑\n        return invoker.invoke(invocation);\n    }\n}\n\n\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br")])]),s("p",[e._v("在上面的例子中，我们实现了一个 MyFilter 过滤器，并使用@Activate 注解指定了它是一个 provider 端的过滤器，然后在 invoke()方法中编写自己的逻辑，最后调用 invoker.invoke(invocation)方法来执行调用链路中的下一个过滤器或服务。")]),e._v(" "),s("h2",{attrs:{id:"六、dubbo-的负载均衡扩展机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、dubbo-的负载均衡扩展机制"}},[e._v("#")]),e._v(" 六、Dubbo 的负载均衡扩展机制")]),e._v(" "),s("h3",{attrs:{id:"_1、dubbo-的负载均衡扩展机制概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、dubbo-的负载均衡扩展机制概述"}},[e._v("#")]),e._v(" 1、Dubbo 的负载均衡扩展机制概述")]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("负载均衡")]),e._v("是分布式系统中的一个重要问题，它可以实现将请求分摊到多个服务提供者上，提高系统的并发能力和可用性。")])]),e._v(" "),s("p",[e._v("Dubbo 的负载均衡扩展机制允许用户自定义负载均衡策略，实现更加灵活、适合特定场景的负载均衡算法。")]),e._v(" "),s("p",[e._v("Dubbo 内置了多种负载均衡算法，包括随机、轮询、最少活跃调用等。")]),e._v(" "),s("p",[e._v("下面是 Dubbo 的负载均衡扩展机制的时序图：")]),e._v(" "),s("p",[s("img",{attrs:{src:a(345),alt:"负载均衡扩展机制"}})]),e._v(" "),s("h3",{attrs:{id:"_2、负载均衡扩展机制的使用示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、负载均衡扩展机制的使用示例"}},[e._v("#")]),e._v(" 2、负载均衡扩展机制的使用示例")]),e._v(" "),s("p",[s("strong",[e._v("Dubbo 的负载均衡扩展机制")]),e._v("可以通过在服务提供方和服务消费方的配置文件中指定负载均衡策略来使用。")]),e._v(" "),s("p",[e._v("例如，在服务提供方的配置文件中可以添加以下配置：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<dubbo:service interface="com.xxx.XxxService" loadbalance="roundrobin" />\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("在服务消费方的配置文件中可以添加以下配置：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<dubbo:reference interface="com.xxx.XxxService" loadbalance="random" />\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("这样就可以实现使用 Dubbo 内置的轮询")]),e._v(" "),s("h3",{attrs:{id:"_3、自定义负载均衡策略的实现示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、自定义负载均衡策略的实现示例"}},[e._v("#")]),e._v(" 3、自定义负载均衡策略的实现示例")]),e._v(" "),s("p",[e._v("用户可以通过实现 Dubbo 的 LoadBalance 接口来自定义负载均衡策略。")]),e._v(" "),s("p",[e._v("以下是一个示例：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("public class MyLoadBalance implements LoadBalance {\n    @Override\n    public <T> Invoker<T> select(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException {\n        // 自定义负载均衡算法实现\n        return invokers.get(0);\n    }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("h2",{attrs:{id:"七、dubbo-的容错机制扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#七、dubbo-的容错机制扩展"}},[e._v("#")]),e._v(" 七、Dubbo 的容错机制扩展")]),e._v(" "),s("h3",{attrs:{id:"_1、dubbo-的容错机制概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、dubbo-的容错机制概述"}},[e._v("#")]),e._v(" 1、Dubbo 的容错机制概述")]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("Dubbo 的容错机制")]),e._v("是指当 Dubbo 服务调用出现异常时，Dubbo 框架会根据预设的容错机制进行处理，以保证服务的高可用性。")])]),e._v(" "),s("p",[e._v("Dubbo 框架默认提供了多种容错机制，如 Failover、Failfast、Failsafe、Failback、Forking 等，也支持自定义容错机制。")]),e._v(" "),s("p",[e._v("Dubbo 的容错机制通常是通过在客户端代理层实现的，当远程服务调用出现异常时，客户端代理会根据预设的容错机制进行重试或处理，以保证服务的高可用性。")]),e._v(" "),s("p",[s("img",{attrs:{src:a(346),alt:"容错机制"}})]),e._v(" "),s("p",[e._v("在 Dubbo 的容错机制中，ClusterInvoker 负责调用远程服务，并进行容错处理。当调用远程服务发生异常时，Dubbo 会按照以下顺序进行容错处理：")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("ClusterInvoker 处理异常；")])]),e._v(" "),s("li",[s("p",[e._v("如果 ClusterInvoker 处理异常失败，则交由 Router 处理异常；")])]),e._v(" "),s("li",[s("p",[e._v("如果 Router 处理异常失败，则交由 LoadBalance 处理异常；")])]),e._v(" "),s("li",[s("p",[e._v("如果 LoadBalance 处理异常失败，则抛出异常给 InvokerInvocationHandler，最终抛出给 Consumer。同时，Dubbo 还会将异常信息进行监控，并更新调用统计信息。")])])]),e._v(" "),s("h3",{attrs:{id:"_2、容错机制扩展的使用示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、容错机制扩展的使用示例"}},[e._v("#")]),e._v(" 2、容错机制扩展的使用示例")]),e._v(" "),s("p",[s("strong",[e._v("Dubbo 默认的容错机制是 Failover")]),e._v("，即自动切换重试其他节点，达到容错和负载均衡的效果。如果需要使用其他容错机制，可以通过在服务提供方和服务消费方的配置文件中进行配置。")]),e._v(" "),s("p",[e._v("例如，我们可以通过以下方式配置使用 Failfast 容错机制：")]),e._v(" "),s("p",[e._v("在服务提供方的配置文件中增加如下配置：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<dubbo:service interface="com.example.service.SomeService" retries="0"/>\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("在服务消费方的配置文件中增加如下配置：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<dubbo:reference interface="com.example.service.SomeService" check="false" cluster="failfast"/>\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("这样，在服务调用出现异常时，Dubbo 框架会自动使用 Failfast 容错机制进行处理，即只进行一次调用，若调用失败则立即抛出异常，不进行重试。")]),e._v(" "),s("h3",{attrs:{id:"_3、自定义容错策略的实现示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、自定义容错策略的实现示例"}},[e._v("#")]),e._v(" 3、自定义容错策略的实现示例")]),e._v(" "),s("p",[e._v("如果需要实现自定义的容错策略，可以通过继承"),s("code",[e._v("org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker")]),e._v("类，并实现"),s("code",[e._v("org.apache.dubbo.rpc.Invoker")]),e._v("接口，来自定义容错策略的实现。")]),e._v(" "),s("p",[e._v("例如，我们可以通过以下代码实现一个自定义的容错策略：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("public class MyClusterInvoker<T> extends AbstractClusterInvoker<T> {\n    public MyClusterInvoker(Directory<T> directory) {\n        super(directory);\n    }\n\n    @Override\n    protected Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, LoadBalance loadbalance) throws RpcException {\n        // 自定义容错逻辑\n        ...\n    }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("p",[e._v("在实现自定义容错策略后，需要在服务提供方和服务消费方的配置文件中进行配置。")]),e._v(" "),s("p",[e._v("例如，在服务提供方的配置文件中增加如下配置：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<dubbo:service interface="com.example.service.SomeService" cluster="myClusterInvoker"/>\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("在服务消费方的配置文件中增加如下配置：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<dubbo:reference interface="com.example.service.SomeService" check="false" cluster="myClusterInvoker"/>\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("这样，在服务调用时，Dubbo 框架会使用我们自定义的 MyClusterInvoker 容错策略进行处理。")]),e._v(" "),s("h2",{attrs:{id:"八、dubbo-的扩展机制实践"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#八、dubbo-的扩展机制实践"}},[e._v("#")]),e._v(" 八、Dubbo 的扩展机制实践")]),e._v(" "),s("h3",{attrs:{id:"_1、实现一个使用自定义扩展点、过滤器、负载均衡器和容错机制的-dubbo-服务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、实现一个使用自定义扩展点、过滤器、负载均衡器和容错机制的-dubbo-服务"}},[e._v("#")]),e._v(" 1、实现一个使用自定义扩展点、过滤器、负载均衡器和容错机制的 Dubbo 服务")]),e._v(" "),s("p",[e._v("在这个实践中，我们将实现一个使用自定义扩展点、过滤器、负载均衡器和容错机制的 Dubbo 服务。")]),e._v(" "),s("h3",{attrs:{id:"_2、首先-我们需要定义一个服务接口。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、首先-我们需要定义一个服务接口。"}},[e._v("#")]),e._v(" 2、首先，我们需要定义一个服务接口。")]),e._v(" "),s("p",[e._v("例如，我们可以定义一个名为 SomeService 的服务接口，如下所示：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("public interface SomeService {\n    String sayHello(String name);\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("h3",{attrs:{id:"_3、然后-我们需要实现该服务接口。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、然后-我们需要实现该服务接口。"}},[e._v("#")]),e._v(" 3、然后，我们需要实现该服务接口。")]),e._v(" "),s("p",[e._v("例如，我们可以实现一个名为 SomeServiceImpl 的服务实现类，如下所示：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('public class SomeServiceImpl implements SomeService {\n    @Override\n    public String sayHello(String name) {\n        return "Hello, " + name + "!";\n    }\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("h3",{attrs:{id:"_4、接下来-我们需要配置-dubbo-的扩展点、过滤器、负载均衡器和容错机制。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、接下来-我们需要配置-dubbo-的扩展点、过滤器、负载均衡器和容错机制。"}},[e._v("#")]),e._v(" 4、接下来，我们需要配置 Dubbo 的扩展点、过滤器、负载均衡器和容错机制。")]),e._v(" "),s("p",[e._v("例如，我们可以在服务提供方和服务消费方的配置文件中进行如下配置：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('\x3c!-- 扩展点配置 --\x3e\n<dubbo:protocol />\n\n\x3c!-- 过滤器配置 --\x3e\n<dubbo:provider filter="com.example.filter.MyProviderFilter"/>\n<dubbo:consumer filter="com.example.filter.MyConsumerFilter"/>\n\n\x3c!-- 负载均衡器配置 --\x3e\n<dubbo:reference interface="com.example.service.SomeService" loadbalance="com.example.loadbalance.MyLoadBalance"/>\n\n\x3c!-- 容错机制配置 --\x3e\n<dubbo:service interface="com.example.service.SomeService" cluster="com.example.cluster.MyCluster"/>\n<dubbo:reference interface="com.example.service.SomeService" cluster="com.example.cluster.MyCluster"/>\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])]),s("p",[e._v("其中，"),s("code",[e._v("com.example.extension.MyProtocol")]),e._v(" 是一个自定义的 Dubbo 协议扩展点实现类，"),s("code",[e._v("com.example.filter.MyProviderFilter")]),e._v(" 和 "),s("code",[e._v("com.example.filter.MyConsumerFilter")]),e._v(" 是自定义的 Dubbo 过滤器实现类，"),s("code",[e._v("com.example.loadbalance.MyLoadBalance")]),e._v(" 是一个自定义的 Dubbo 负载均衡器实现类，"),s("code",[e._v("com.example.cluster.MyCluster")]),e._v(" 是一个自定义的 Dubbo 容错机制实现类。")]),e._v(" "),s("h3",{attrs:{id:"_5、最后-我们可以使用-dubbo-的-api-在客户端调用该服务。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、最后-我们可以使用-dubbo-的-api-在客户端调用该服务。"}},[e._v("#")]),e._v(" 5、最后，我们可以使用 Dubbo 的 API 在客户端调用该服务。")]),e._v(" "),s("p",[e._v("例如，我们可以使用如下代码在客户端调用该服务：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('// 获取 Dubbo 服务引用\nSomeService someService = DubboReferenceBuilder.newBuilder()\n        .setInterface(SomeService.class)\n        .setUrl("dubbo://localhost:20880")\n        .build();\n\n// 调用 Dubbo 服务\nString result = someService.sayHello("Dubbo");\nSystem.out.println(result);\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("p",[e._v("这样，我们就实现了一个使用自定义扩展点、过滤器、负载均衡器和容错机制的 Dubbo 服务。")])])}),[],!1,null,null,null);s.default=t.exports}}]);