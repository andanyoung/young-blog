(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{1142:function(t,a,s){"use strict";s.r(a);var n=s(4),r=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-数据库引擎不支持事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据库引擎不支持事务"}},[t._v("#")]),t._v(" "),a("strong",[t._v("1.数据库引擎不支持事务")])]),t._v(" "),a("p",[t._v("Spring 事务生效的前提是所连接的数据库要支持事务，如果底层的数据库引擎都不支持事务，则 Spring 的事务肯定会失效。")]),t._v(" "),a("p",[t._v("例如: MySQL 用的不是 InnoDB 引擎，而是用的 MyISAM 存储引擎。")]),t._v(" "),a("h2",{attrs:{id:"_2-事务方法未被-spring-容器管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-事务方法未被-spring-容器管理"}},[t._v("#")]),t._v(" "),a("strong",[t._v("2.事务方法未被 Spring 容器管理")])]),t._v(" "),a("p",[t._v("如果事务方法所在的类没有加载到 Spring IOC 容器中，也就是说，事务方法所在的类没有被 Spring 容器管理，则 Spring 事务会失效。")]),t._v(" "),a("p",[t._v("例如：你的方法所在类没有加@Component 或者@Service 注解。")]),t._v(" "),a("h2",{attrs:{id:"_3-方法没有被-public-修饰"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-方法没有被-public-修饰"}},[t._v("#")]),t._v(" "),a("strong",[t._v("3.方法没有被 public 修饰")])]),t._v(" "),a("p",[t._v("如果事务所在的方法没有被 public 修饰，此时 Spring 的事务也会失效。")]),t._v(" "),a("h2",{attrs:{id:"_4-同一类中方法之间直接的调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-同一类中方法之间直接的调用"}},[t._v("#")]),t._v(" "),a("strong",[t._v("4.同一类中方法之间直接的调用")])]),t._v(" "),a("p",[t._v("例如：如果同一个类中有两个方法分别为 A 和 B，方法 A 没有添加事务注解，而方法 B 添加了 @Transactional 事务注解，此时方法 A 直接调用方法 B，则方法 B 的事务会失效。")]),t._v(" "),a("p",[t._v("因为声明式事务管理（@Transactional）是建立在 AOP 动态代理之上的。其本质是对方法执行前后进行拦截，然后在目标方法开始执行之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。同一类内方法之间的直接调用是不走代理的，这样就无法进行功能的增强处理，所以事务不起作用。")]),t._v(" "),a("h2",{attrs:{id:"_5-未配置事务管理器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-未配置事务管理器"}},[t._v("#")]),t._v(" "),a("strong",[t._v("5.未配置事务管理器")])]),t._v(" "),a("p",[t._v("如果在项目中没有配置 Spring 的事务管理器，即使使用了 Spring 的事务管理功能，Spring 的事务也不会生效。")]),t._v(" "),a("div",{staticClass:"language-xml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.mybatis.spring.boot"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("mybatis-spring-boot-starter"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("2.1.1"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("例如：对于 SpringBoot 项目来说，导入了 mybatis 的 starter 依赖后，SpringBoot 会自动注入 DataSourceTransactionManager 事务管理器，这样我们就可以直接用 @Transactional 注解使用事务了。")]),t._v(" "),a("h2",{attrs:{id:"_6-事务传播类型不支持事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-事务传播类型不支持事务"}},[t._v("#")]),t._v(" "),a("strong",[t._v("6.事务传播类型不支持事务")])]),t._v(" "),a("p",[t._v("如果方法的事务传播类型为不支持事务的传播类型，则该方法的事务在 Spring 中会失效。")]),t._v(" "),a("p",[t._v("例如： A 方法的事务传播类型为 NOT_SUPPORTED，不支持事务，此时用带事务的方法 B 去调用 A 方法，则 A 方法的事务失效。")]),t._v(" "),a("h2",{attrs:{id:"_7-进行异常捕捉却没有抛出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-进行异常捕捉却没有抛出"}},[t._v("#")]),t._v(" "),a("strong",[t._v("7.进行异常捕捉却没有抛出")])]),t._v(" "),a("p",[t._v("比如对某一个新增数据代码段进行 try catch 异常，而 catch 里没有向外抛出异常，此时 spring 事务无法回滚。")]),t._v(" "),a("h2",{attrs:{id:"_8-错误的标注异常类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-错误的标注异常类型"}},[t._v("#")]),t._v(" "),a("strong",[t._v("8.错误的标注异常类型")])]),t._v(" "),a("p",[t._v("如果在 @Transactional 注解中标注的异常类型不是我们抛出的异常类型，则 Spring 事务的回滚会失效。")]),t._v(" "),a("p",[t._v("例如： Spring 中默认回滚的异常类型为 RuntimeException，如果此时你抛出的异常是 Exception，那么 Spring 事务中无法捕获到 Exception 异常，则事务回滚会失效。")]),t._v(" "),a("h2",{attrs:{id:"_9-开启多线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-开启多线程"}},[t._v("#")]),t._v(" "),a("strong",[t._v("9.开启多线程")])]),t._v(" "),a("p",[t._v("开启一个线程去执行数据库操作，多线程内的方法将不被 spring 事务控制。")]),t._v(" "),a("p",[t._v("例如：一个带事务的方法 A 中开启线程去执行同类中的一个 insert 方法，即使这个操作失败了，也不会回滚 A 中的其他数据库操作。")]),t._v(" "),a("p",[t._v("注意：如果把 insert 方法提出到一个新的类中，加入事务注解，就能成功的把 insert 方法加入到 spring 事务管理中。但是使用多线程事务的情况下，如果想进行回滚，比较麻烦，因为我们感知不到线程中方法执行的异常。")])])}),[],!1,null,null,null);a.default=r.exports}}]);