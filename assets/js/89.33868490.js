(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{1168:function(s,n,t){s.exports=t.p+"assets/img/image-20231102160319141.f4f2e6b9.png"},1169:function(s,n,t){s.exports=t.p+"assets/img/image-20231102160507080.c9e44d54.png"},1170:function(s,n,t){s.exports=t.p+"assets/img/image-20231102172156519.bc9b7ad0.png"},1525:function(s,n,t){"use strict";t.r(n);var a=t(4),e=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"第-7-章-集-合"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第-7-章-集-合"}},[s._v("#")]),s._v(" 第 7 章 集 合")]),s._v(" "),n("h2",{attrs:{id:"_7-1-集合简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-集合简介"}},[s._v("#")]),s._v(" 7.1 集合简介")]),s._v(" "),n("p",[s._v("1）Scala 的集合有三大类：序列 Seq、集Set、映射 Map，所有的集合都扩展自 Iterable特质。\n2）对于几乎所有的集合类，Scala 都同时提供了可变和不可变的版本，分别位于以下两个包")]),s._v(" "),n("p",[n("strong",[s._v("不可变集合")]),s._v("：scala.collection.immutable")]),s._v(" "),n("p",[n("strong",[s._v("可变集合")]),s._v("：\tscala.collection.mutable\n3）Scala 不可变集合，就是指该集合对象不可修改，每次修改就会返回一个新对象， 而不会对原对象进行修改。类似于 java 中的 String 对象\n4）可变集合，就是这个集合可以直接对原对象进行修改，而不会返回新的对象。类似于 java 中 StringBuilder 对象")]),s._v(" "),n("p",[s._v("建议：在操作集合的时候，不可变用符号，可变用方法")]),s._v(" "),n("h3",{attrs:{id:"_7-1-1-不可变集合继承图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-1-不可变集合继承图"}},[s._v("#")]),s._v(" 7.1.1 不可变集合继承图")]),s._v(" "),n("p",[n("img",{attrs:{src:t(1168),alt:"image-20231102160319141"}})]),s._v(" "),n("p",[s._v("1）Set、Map 是 Java 中也有的集合")]),s._v(" "),n("p",[s._v("2）Seq 是 Java 没有的，我们发现 List 归属到Seq 了，因此这里的 List 就和 Java 不是同一个概念了")]),s._v(" "),n("p",[s._v("3）我们前面的for 循环有一个 1 to 3，就是 IndexedSeq 下的 Range")]),s._v(" "),n("p",[s._v("4）String 也是属于 IndexedSeq")]),s._v(" "),n("p",[s._v("5）我们发现经典的数据结构比如 Queue 和 Stack 被归属到 LinearSeq(线性序列)")]),s._v(" "),n("p",[s._v("6）大家注意Scala 中的 Map 体系有一个 SortedMap，说明 Scala 的 Map 可以支持排序")]),s._v(" "),n("p",[n("strong",[s._v("7）IndexedSeq 和LinearSeq 的区别：")])]),s._v(" "),n("p",[s._v("（1）IndexedSeq 是通过索引来查找和定位，因此速度快，比如String 就是一个索引集合，通过索引即可定位 （数组）")]),s._v(" "),n("p",[s._v("（2）LinearSeq 是线型的，即有头尾的概念，这种数据结构一般是通过遍历来查找 "),n("strong",[s._v("（链表）")])]),s._v(" "),n("h3",{attrs:{id:"_7-1-2-可变集合继承图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-2-可变集合继承图"}},[s._v("#")]),s._v(" 7.1.2 可变集合继承图")]),s._v(" "),n("p",[n("img",{attrs:{src:t(1169),alt:"image-20231102160507080"}})]),s._v(" "),n("h2",{attrs:{id:"_7-2数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-2数组"}},[s._v("#")]),s._v(" 7.2数组")]),s._v(" "),n("h3",{attrs:{id:"_7-2-1不可变数组-array"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-1不可变数组-array"}},[s._v("#")]),s._v(" 7.2.1不可变数组 Array")]),s._v(" "),n("p",[s._v("1）第一种方式定义数组")]),s._v(" "),n("p",[s._v("定义："),n("code",[s._v("val arr1 = new Array[Int")]),s._v("](10)")]),s._v(" "),n("p",[s._v("（1）new 是关键字")]),s._v(" "),n("p",[s._v("（2）[Int]是指定可以存放的数据类型，如果希望存放任意数据类型，则指定Any")]),s._v(" "),n("p",[s._v("（3）(10)，表示数组的大小，确定后就不可以变化")]),s._v(" "),n("p",[s._v("2）案例实操")]),s._v(" "),n("div",{staticClass:"language-scala line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-scala"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("object")]),s._v(" TestArray"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" main"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("args"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Unit")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（1）数组定义")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" arr01 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" Array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr01"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 4")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（2）数组赋值")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（2.1）修改某个元素的值")]),s._v("\n        arr01"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（2.2）采用方法的形式给数组赋值")]),s._v("\n        arr01"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("update"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（3）遍历数组")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（3.1）查看数组")]),s._v("\n         println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr01"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("mkString"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('","')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（3.2） 普 通 遍 历")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("<-")]),s._v(" arr01"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（3.3）简化遍历")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" printx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("elem"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Unit")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n            println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("elem"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        arr01"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("foreach"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("printx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// arr01.foreach((x)=>{println(x)})")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// arr01.foreach(println(_)) arr01.foreach(println)")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（4）增加元素（由于创建的是不可变数组，增加元素，其实是产生新的数组）")]),s._v("\n        println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr01"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" ints"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" arr01 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" \n        println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ints"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br")])]),n("p",[s._v("3）第二种方式定义数组val arr1 = Array(1, 2)")]),s._v(" "),n("p",[s._v("（1）在定义数组时，直接赋初始值")]),s._v(" "),n("p",[s._v("（2）使用apply 方法创建数组对象")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('object TestArray{\n\n\tdef main(args: Array[String]): Unit = {\n\n        var arr02 = Array(1, 3, "bobo") \n        println(arr02.length)\n        for (i <- arr02) {\n        \tprintln(i)\n        }\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h3",{attrs:{id:"_7-2-2-可变数组-arraybuffer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-2-可变数组-arraybuffer"}},[s._v("#")]),s._v(" 7.2.2 可变数组 ArrayBuffer")]),s._v(" "),n("p",[s._v("定义变长数组\n"),n("code",[s._v("val arr01 = ArrayBuffer[Any](3, 2, 5)")])]),s._v(" "),n("p",[s._v("（1）[Any]存放任意数据类型")]),s._v(" "),n("p",[s._v("（2）(3, 2, 5)初始化好的三个元素")]),s._v(" "),n("p",[s._v("（3）ArrayBuffer 需要引入 scala.collection.mutable.ArrayBuffer")]),s._v(" "),n("p",[s._v("2）案例实操")]),s._v(" "),n("p",[s._v("（1）ArrayBuffer 是有序的集合\n增加元素使用的是 append 方法()，支持可变参数")]),s._v(" "),n("div",{staticClass:"language-scala line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-scala"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("scala"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("collection"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("mutable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),s._v("ArrayBuffer \n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("object")]),s._v(" TestArrayBuffer "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" main"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("args"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Unit")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（1）创建并初始赋值可变数组")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" arr01 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" ArrayBuffer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Any")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（2）遍历数组")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("<-")]),s._v(" arr01"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n            println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr01"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3 ")]),s._v("\n        println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"arr01.hash="')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" arr01"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("hashCode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（3）增加元素")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（3.1）追加数据")]),s._v("\n        arr01"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("+"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（3.2）向数组最后追加数据")]),s._v("\n        arr01"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("append"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（3.3）向指定的位置插入数据")]),s._v("\n        arr01"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("insert"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  \n        println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"arr01.hash="')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" arr01"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("hashCode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（4）修改元素")]),s._v("\n        arr01"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//修改第 2 个元素的值")]),s._v("\n        println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"------"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("<-")]),s._v(" arr01"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n            println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr01"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 5")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br")])]),n("h3",{attrs:{id:"_7-2-3-不可变数组与可变数组的转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-3-不可变数组与可变数组的转换"}},[s._v("#")]),s._v(" 7.2.3 不可变数组与可变数组的转换")]),s._v(" "),n("p",[s._v("1）说明\narr1.toBuffer\t\t//不可变数组转可变数组")]),s._v(" "),n("p",[s._v("arr2.toArray\t//可变数组转不可变数组")]),s._v(" "),n("p",[s._v("（1）arr2.toArray 返回结果才是一个不可变数组，arr2 本身没有变化")]),s._v(" "),n("p",[s._v("（2）arr1.toBuffer 返回结果才是一个可变数组，arr1 本身没有变化")]),s._v(" "),n("h3",{attrs:{id:"_7-2-4-多维数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-4-多维数组"}},[s._v("#")]),s._v(" 7.2.4 多维数组")]),s._v(" "),n("p",[s._v("1）多维数组定义\n"),n("code",[s._v("val arr = Array.ofDim[Double](3,4)")])]),s._v(" "),n("p",[s._v("说明：二维数组中有三个一维数组，每个一维数组中有四个元素")]),s._v(" "),n("p",[s._v("2） 案例实操")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('object DimArray {\n\n    def main(args: Array[String]): Unit = {\n\n        //（1）创建了一个二维数组, 有三个元素，每个元素是，含有 4 个元素一维数组()\n        val arr = Array.ofDim[Int](3, 4) \n        arr(1)(2) = 88\n\n        //（2）遍历二维数组\n        for (i <- arr) { //i 就是一维数组\n            for (j <- i) {\n            print(j + " ")\n        }\n\n        println("-----------")\n        }\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("h2",{attrs:{id:"_7-3-列表list"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-列表list"}},[s._v("#")]),s._v(" 7.3 列表List")]),s._v(" "),n("h2",{attrs:{id:"列表基本操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#列表基本操作"}},[s._v("#")]),s._v(" 列表基本操作")]),s._v(" "),n("p",[s._v("列表上的所有操作都可以用以下三种方法表示。")]),s._v(" "),n("table",[n("thead",[n("tr",[n("th",[s._v("序号")]),s._v(" "),n("th",[s._v("方法")]),s._v(" "),n("th",[s._v("描述")])])]),s._v(" "),n("tbody",[n("tr",[n("td",[s._v("1")]),s._v(" "),n("td",[s._v("head")]),s._v(" "),n("td",[s._v("此方法返回列表的第一个元素。")])]),s._v(" "),n("tr",[n("td",[s._v("2")]),s._v(" "),n("td",[s._v("tail")]),s._v(" "),n("td",[s._v("此方法返回由除第一个之外的所有元素组成的列表。")])]),s._v(" "),n("tr",[n("td",[s._v("3")]),s._v(" "),n("td",[s._v("isEmpty")]),s._v(" "),n("td",[s._v("如果列表为空，则此方法返回"),n("code",[s._v("true")]),s._v("，否则返回"),n("code",[s._v("false")]),s._v("。")])])])]),s._v(" "),n("h3",{attrs:{id:"_7-3-1-不可变-list"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-1-不可变-list"}},[s._v("#")]),s._v(" 7.3.1 不可变 List")]),s._v(" "),n("p",[s._v("1）说明")]),s._v(" "),n("p",[s._v("（1）List 默认为不可变集合")]),s._v(" "),n("p",[s._v("（2）创建一个 List（数据有顺序，可重复）")]),s._v(" "),n("p",[s._v("（3）遍历 List")]),s._v(" "),n("p",[s._v("（4）List 增加数据")]),s._v(" "),n("p",[s._v("（5）集合间合并：将一个整体拆成一个一个的个体，称为扁平化")]),s._v(" "),n("p",[s._v("（6） 取指定数据")]),s._v(" "),n("p",[s._v("（7）空集合 Nil")]),s._v(" "),n("blockquote",[n("p",[s._v("有列表都可以使用两个基本构建块定义，尾部为"),n("code",[s._v("Nil")]),s._v("和"),n("code",[s._v("::")]),s._v("，它的发音为"),n("code",[s._v("cons")]),s._v("。 "),n("code",[s._v("Nil")]),s._v("也代表空列表。以上列表可以定义如下。 //更多请阅读：https://www.yiibai.com/scala/scala_lists.html")]),s._v(" "),n("p",[s._v("使用 "),n("code",[s._v("::")]),s._v(" 拼接 使用 "),n("code",[s._v("Nil")]),s._v(" 结尾")]),s._v(" "),n("h2",{attrs:{id:"连接列表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#连接列表"}},[s._v("#")]),s._v(" 连接列表")]),s._v(" "),n("p",[s._v("可以使用"),n("code",[s._v(":::")]),s._v("操作符或"),n("code",[s._v("List.:::()")]),s._v("方法或"),n("code",[s._v("List.concat()")]),s._v("方法添加两个或多个列表。 请看下面给出的例子")])]),s._v(" "),n("p",[s._v("2）案例实操")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("object TestList {\n\n    def main(args: Array[String]): Unit = {\n\n        //（1）List 默认为不可变集合\n        //（2）创建一个 List（数据有顺序，可重复） \n        val list: List[Int] = List(1,2,3,4,3)\n\n        //（7）空集合 Nil\n        val list5 = 1::2::3::4::Nil\n\n        //（4）List 增加数据\n        //（4.1）::的运算规则从右向左\n        //val list1 =  5::list \n        val list1 = 7::6::5::list\n        //（4.2）添加到第一个元素位置\n        val list2 = list.+:(5)\n\n        //（5）集合间合并：将一个整体拆成一个一个的个体，称为扁平化\n        val list3 = List(8,9)\n        //val list4 = list3::list1 \n        val list4 = list3:::list1\n\n        //（6）取指定数据\n        println(list(0))\n\n        //（3）遍历 List\n        //list.foreach(println)\n        //list1.foreach(println)\n        //list3.foreach(println)\n        //list4.foreach(println) \n        list5.foreach(println)\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br")])]),n("h3",{attrs:{id:"_7-3-2-可变listbuffer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-2-可变listbuffer"}},[s._v("#")]),s._v(" 7.3.2 可变ListBuffer")]),s._v(" "),n("p",[s._v("1）说明\n（1）创建一个可变集合 ListBuffer")]),s._v(" "),n("p",[s._v("（2）向集合中添加数据")]),s._v(" "),n("p",[s._v("（3）打印集合数据\n2）案例实操")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import scala.collection.mutable.ListBuffer object TestList {\n    def main(args: Array[String]): Unit = {\n\n        //（1）创建一个可变集合\n        val buffer = ListBuffer(1,2,3,4)\n\n        //（2）向集合中添加数据\n        buffer.+=(5) \n        buffer.append(6) \n        buffer.insert(1,2)\n\n        //（3）打印集合数据\n        buffer.foreach(println)\n\n        //（4）修改数据\n        buffer(1) = 6 \n        buffer.update(1,7)\n\n        //（5）删除数据\n        buffer.-(5)\n        buffer.-=(5) \n        buffer.remove(5)\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("h2",{attrs:{id:"scala列表方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#scala列表方法"}},[s._v("#")]),s._v(" Scala列表方法")]),s._v(" "),n("p",[s._v("以下是使用列表时可以使用的重要方法。有关可用方法的完整列表，请查看Scala的官方文档。")]),s._v(" "),n("table",[n("thead",[n("tr",[n("th",[s._v("序号")]),s._v(" "),n("th",[s._v("方法")]),s._v(" "),n("th",[s._v("描述")])])]),s._v(" "),n("tbody",[n("tr",[n("td",[s._v("1")]),s._v(" "),n("td",[n("code",[s._v("def +(elem: A): List[A]")])]),s._v(" "),n("td",[s._v("向列表中添加一个元素")])]),s._v(" "),n("tr",[n("td",[s._v("2")]),s._v(" "),n("td",[n("code",[s._v("def ::(x: A): List[A]")])]),s._v(" "),n("td",[s._v("向列表开头位置添加一具元素。")])]),s._v(" "),n("tr",[n("td",[s._v("3")]),s._v(" "),n("td",[n("code",[s._v("def :::(prefix: List[A]): List[A]")])]),s._v(" "),n("td",[s._v("在此列表前添加给定列表中的元素。")])]),s._v(" "),n("tr",[n("td",[s._v("4")]),s._v(" "),n("td",[n("code",[s._v("def ::(x: A): List[A]")])]),s._v(" "),n("td",[s._v("在列表的开头添加一个元素"),n("code",[s._v("x")])])]),s._v(" "),n("tr",[n("td",[s._v("5")]),s._v(" "),n("td",[n("code",[s._v("def addString(b: StringBuilder): StringBuilder")])]),s._v(" "),n("td",[s._v("将列表的所有元素附加到字符串构建器。")])]),s._v(" "),n("tr",[n("td",[s._v("6")]),s._v(" "),n("td",[n("code",[s._v("def addString(b: StringBuilder, sep: String): StringBuilder")])]),s._v(" "),n("td",[s._v("使用分隔符字符串将列表的所有元素附加到字符串构建器。")])]),s._v(" "),n("tr",[n("td",[s._v("7")]),s._v(" "),n("td",[n("code",[s._v("def apply(n: Int): A")])]),s._v(" "),n("td",[s._v("通过列表中的索引选择一个元素。")])]),s._v(" "),n("tr",[n("td",[s._v("8")]),s._v(" "),n("td",[n("code",[s._v("def contains(elem: Any): Boolean")])]),s._v(" "),n("td",[s._v("测试列表是否包含给定元素值。")])]),s._v(" "),n("tr",[n("td",[s._v("9")]),s._v(" "),n("td",[n("code",[s._v("def copyToArray(xs: Array[A], start: Int, len: Int): Unit")])]),s._v(" "),n("td",[s._v("将列表的元素复制到数组。在给定的数组"),n("code",[s._v("xs")]),s._v("中填充该列表的最多为长度("),n("code",[s._v("len")]),s._v(")元素，从"),n("code",[s._v("start")]),s._v("位置开始。")])]),s._v(" "),n("tr",[n("td",[s._v("10")]),s._v(" "),n("td",[n("code",[s._v("def distinct: List[A]")])]),s._v(" "),n("td",[s._v("从列表中创建一个新的列表，而不会有任何重复的元素。")])]),s._v(" "),n("tr",[n("td",[s._v("11")]),s._v(" "),n("td",[n("code",[s._v("def drop(n: Int): List[A]")])]),s._v(" "),n("td",[s._v("返回除了前"),n("code",[s._v("n")]),s._v("个之外的所有元素。")])]),s._v(" "),n("tr",[n("td",[s._v("12")]),s._v(" "),n("td",[n("code",[s._v("def dropRight(n: Int): List[A]")])]),s._v(" "),n("td",[s._v("返回除最后"),n("code",[s._v("n")]),s._v("个之外的所有元素。")])]),s._v(" "),n("tr",[n("td",[s._v("13")]),s._v(" "),n("td",[n("code",[s._v("def dropWhile(p: (A) => Boolean): List[A]")])]),s._v(" "),n("td",[s._v("删除满足谓词的元素的最长前缀。")])]),s._v(" "),n("tr",[n("td",[s._v("14")]),s._v(" "),n("td",[n("code",[s._v("def endsWith[B](that: Seq[B]): Boolean")])]),s._v(" "),n("td",[s._v("测试列表是否以给定的顺序结束。")])]),s._v(" "),n("tr",[n("td",[s._v("15")]),s._v(" "),n("td",[n("code",[s._v("def equals(that: Any): Boolean")])]),s._v(" "),n("td",[s._v("任意序列的"),n("code",[s._v("equals")]),s._v("方法，将此序列与其他对象进行比较。")])]),s._v(" "),n("tr",[n("td",[s._v("16")]),s._v(" "),n("td",[n("code",[s._v("def exists(p: (A) => Boolean): Boolean")])]),s._v(" "),n("td",[s._v("测试一个谓词是否适用于列表的某些元素。")])]),s._v(" "),n("tr",[n("td",[s._v("17")]),s._v(" "),n("td",[n("code",[s._v("def filter(p: (A) => Boolean): List[A]")])]),s._v(" "),n("td",[s._v("返回列表中满足谓词的所有元素。")])]),s._v(" "),n("tr",[n("td",[s._v("18")]),s._v(" "),n("td",[n("code",[s._v("def forall(p: (A) => Boolean): Boolean")])]),s._v(" "),n("td",[s._v("测试列表中所有元素的谓词是否成立。")])]),s._v(" "),n("tr",[n("td",[s._v("19")]),s._v(" "),n("td",[n("code",[s._v("def foreach(f: (A) => Unit): Unit")])]),s._v(" "),n("td",[s._v("将函数"),n("code",[s._v("f")]),s._v("应用于列表的所有元素。")])]),s._v(" "),n("tr",[n("td",[s._v("20")]),s._v(" "),n("td",[n("code",[s._v("def head: A")])]),s._v(" "),n("td",[s._v("选择列表的第一个元素。")])]),s._v(" "),n("tr",[n("td",[s._v("21")]),s._v(" "),n("td",[n("code",[s._v("def indexOf(elem: A, from: Int): Int")])]),s._v(" "),n("td",[s._v("在索引位置之后，查找列表中第一个出现值的索引。")])]),s._v(" "),n("tr",[n("td",[s._v("22")]),s._v(" "),n("td",[n("code",[s._v("def init: List[A]")])]),s._v(" "),n("td",[s._v("返回除上一个以外的所有元素。")])]),s._v(" "),n("tr",[n("td",[s._v("23")]),s._v(" "),n("td",[n("code",[s._v("def intersect(that: Seq[A]): List[A]")])]),s._v(" "),n("td",[s._v("计算列表和另一个序列之间的多集合交集。")])]),s._v(" "),n("tr",[n("td",[s._v("24")]),s._v(" "),n("td",[n("code",[s._v("def isEmpty: Boolean")])]),s._v(" "),n("td",[s._v("测试列表是否为空。")])]),s._v(" "),n("tr",[n("td",[s._v("25")]),s._v(" "),n("td",[n("code",[s._v("def iterator: Iterator[A]")])]),s._v(" "),n("td",[s._v("在可迭代对象中包含的所有元素上创建一个新的迭代器。")])]),s._v(" "),n("tr",[n("td",[s._v("26")]),s._v(" "),n("td",[n("code",[s._v("def last: A")])]),s._v(" "),n("td",[s._v("返回最后一个元素。")])]),s._v(" "),n("tr",[n("td",[s._v("27")]),s._v(" "),n("td",[n("code",[s._v("def lastIndexOf(elem: A, end: Int): Int")])]),s._v(" "),n("td",[s._v("查找列表中某些值的最后一次出现的索引; 在给定的结束指数之前或之中。")])]),s._v(" "),n("tr",[n("td",[s._v("28")]),s._v(" "),n("td",[n("code",[s._v("def length: Int")])]),s._v(" "),n("td",[s._v("返回列表的长度。")])]),s._v(" "),n("tr",[n("td",[s._v("29")]),s._v(" "),n("td",[n("code",[s._v("def map[B](f: (A) => B): List[B]")])]),s._v(" "),n("td",[s._v("通过将函数应用于此列表的所有元素来构建新集合。")])]),s._v(" "),n("tr",[n("td",[s._v("30")]),s._v(" "),n("td",[n("code",[s._v("def max: A")])]),s._v(" "),n("td",[s._v("查找最大元素。")])]),s._v(" "),n("tr",[n("td",[s._v("31")]),s._v(" "),n("td",[n("code",[s._v("def min: A")])]),s._v(" "),n("td",[s._v("查找最小元素。")])]),s._v(" "),n("tr",[n("td",[s._v("32")]),s._v(" "),n("td",[n("code",[s._v("def mkString: String")])]),s._v(" "),n("td",[s._v("显示字符串中列表的所有元素。")])]),s._v(" "),n("tr",[n("td",[s._v("33")]),s._v(" "),n("td",[n("code",[s._v("def mkString(sep: String): String")])]),s._v(" "),n("td",[s._v("使用分隔符字符串显示字符串中列表的所有元素。")])]),s._v(" "),n("tr",[n("td",[s._v("34")]),s._v(" "),n("td",[n("code",[s._v("def reverse: List[A]")])]),s._v(" "),n("td",[s._v("以相反的顺序返回带有元素的新列表。")])]),s._v(" "),n("tr",[n("td",[s._v("35")]),s._v(" "),n("td",[n("code",[s._v("def sorted[B >: A]: List[A]")])]),s._v(" "),n("td",[s._v("根据顺序规则对列表进行排序。")])]),s._v(" "),n("tr",[n("td",[s._v("36")]),s._v(" "),n("td",[n("code",[s._v("def startsWith[B](that: Seq[B], offset: Int): Boolean")])]),s._v(" "),n("td",[s._v("测试列表是否包含给定索引处的给定序列。")])]),s._v(" "),n("tr",[n("td",[s._v("37")]),s._v(" "),n("td",[n("code",[s._v("def sum: A")])]),s._v(" "),n("td",[s._v("将这个集合所有元素相加。")])]),s._v(" "),n("tr",[n("td",[s._v("38")]),s._v(" "),n("td",[n("code",[s._v("def tail: List[A]")])]),s._v(" "),n("td",[s._v("返回除第一个之外的所有元素。")])]),s._v(" "),n("tr",[n("td",[s._v("39")]),s._v(" "),n("td",[n("code",[s._v("def take(n: Int): List[A]")])]),s._v(" "),n("td",[s._v("返回第一个“n”个元素。")])]),s._v(" "),n("tr",[n("td",[s._v("40")]),s._v(" "),n("td",[n("code",[s._v("def takeRight(n: Int): List[A]")])]),s._v(" "),n("td",[s._v("返回最后的“n”个元素。")])]),s._v(" "),n("tr",[n("td",[s._v("41")]),s._v(" "),n("td",[n("code",[s._v("def toArray: Array[A]")])]),s._v(" "),n("td",[s._v("将列表转换为数组。")])]),s._v(" "),n("tr",[n("td",[s._v("42")]),s._v(" "),n("td",[n("code",[s._v("def toBuffer[B >: A]: Buffer[B]")])]),s._v(" "),n("td",[s._v("将列表转换为可变缓冲区。")])]),s._v(" "),n("tr",[n("td",[s._v("43")]),s._v(" "),n("td",[n("code",[s._v("def toMap[T, U]: Map[T, U]")])]),s._v(" "),n("td",[s._v("将此列表转换为映射。")])]),s._v(" "),n("tr",[n("td",[s._v("44")]),s._v(" "),n("td",[n("code",[s._v("def toSeq: Seq[A]")])]),s._v(" "),n("td",[s._v("将列表转换为序列。")])]),s._v(" "),n("tr",[n("td",[s._v("45")]),s._v(" "),n("td",[n("code",[s._v("def toSet[B >: A]: Set[B]")])]),s._v(" "),n("td",[s._v("将列表转换为一个集合。")])]),s._v(" "),n("tr",[n("td",[s._v("46")]),s._v(" "),n("td",[n("code",[s._v("def toString(): String")])]),s._v(" "),n("td",[s._v("将列表转换为字符串。")])])])]),s._v(" "),n("h2",{attrs:{id:"_7-4-set-集合"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-set-集合"}},[s._v("#")]),s._v(" 7.4 Set 集合")]),s._v(" "),n("p",[s._v("默认情况下， Scala 使用的是不可变集合， 如果你想使用可变集合， 需要引用"),n("code",[s._v("scala.collection.mutable.Set")]),s._v(" 包")]),s._v(" "),n("p",[s._v("1） 说明")]),s._v(" "),n("p",[s._v("（1） Set 默认是不可变集合，数据无序")]),s._v(" "),n("p",[s._v("（2） 数据不可重复")]),s._v(" "),n("p",[s._v("（3） 遍历集合")]),s._v(" "),n("p",[s._v("2） 案例实操")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("object TestSet {\n\n    def main(args: Array[String]): Unit = {\n\n        //（1）Set 默认是不可变集合，数据无序\n        val set = Set(1,2,3,4,5,6)\n\n        //（2）数据不可重复\n        val set1 = Set(1,2,3,4,5,6,3)\n\n        //（3）遍历集合\n        for(x<-set1){ \n        \tprintln(x)\n        }\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("h2",{attrs:{id:"_7-4-2-可变mutable-set"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-2-可变mutable-set"}},[s._v("#")]),s._v(" 7.4.2 可变mutable.Set")]),s._v(" "),n("p",[s._v("1）说明\n（1）创建可变集合 mutable.Set\n（2）打印集合\n（3）集合添加元素\n（4）向集合中添加元素，返回一个新的 Set\n（5）删除数据")]),s._v(" "),n("p",[s._v("2）案例实操")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('object TestSet {\n\n    def main(args: Array[String]): Unit = {\n\n        //（1）创建可变集合\n        val set = mutable.Set(1,2,3,4,5,6)\n\n        //（3）集合添加元素set += 8\n\n        //（4）向集合中添加元素，返回一个新的 \n        Set val ints = set.+(9)\n        println(ints) \n        println("set2=" + set)\n\n        //（5）删除数据\n        set-=(5)\n\n        //（2）打印集合\n        set.foreach(println) \n        println(set.mkString(","))\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("h3",{attrs:{id:"_7-5-map-集合"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-map-集合"}},[s._v("#")]),s._v(" 7.5 Map 集合")]),s._v(" "),n("p",[s._v("Scala 中的 Map 和 Java 类似，也是一个散列表，它存储的内容也是键值对（key-value） 映射")]),s._v(" "),n("h3",{attrs:{id:"_7-5-1-不可变-map"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-1-不可变-map"}},[s._v("#")]),s._v(" 7.5.1 不可变 Map")]),s._v(" "),n("p",[s._v("1）说明\n（1）创建不可变集合 Map\n（2）循环打印\n（3）访问数据\n（4）如果 key 不存在，返回 0")]),s._v(" "),n("p",[s._v("2）案例实操")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('object TestMap {\n\n    def main(args: Array[String]): Unit = {\n        // Map\n        //（1）创建不可变集合 Map\n        val map = Map( "a"->1, "b"->2, "c"->3 )\n\n        //（3）访问数据\n        for (elem <- map.keys) {\n        // 使用 get 访问 map 集合的数据，会返回特殊类型 Option(选项):有值（Some），无值(None)\n            println(elem + "=" + map.get(elem).get)\n        }\n\n        //（4） 如 果 key 不 存 在 ， 返 回 0 \n        println(map.get("d").getOrElse(0)) \n        println(map.getOrElse("d", 0))\n\n        //（2）循环打印\n        map.foreach((kv)=>{println(kv)})\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("h3",{attrs:{id:"_7-5-2-可变map"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-2-可变map"}},[s._v("#")]),s._v(" 7.5.2 可变Map")]),s._v(" "),n("p",[s._v("1）说明\n（1）创建可变集合\n（2）打印集合\n（3）向集合增加数据\n（4）删除数据\n（5）修改数据")]),s._v(" "),n("p",[s._v("2）案例实操")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('object TestSet {\n\n    def main(args: Array[String]): Unit = {\n\n    //（1）创建可变集合\n    val map = mutable.Map( "a"->1, "b"->2, "c"->3 )\n\n    //（3）向集合增加数据map.+=("d"->4)\n\n    // 将数值 4 添加到集合，并把集合中原值 1 返回\n    val maybeInt: Option[Int] = map.put("a", 4) \n    println(maybeInt.getOrElse(0))\n\n    //（4）删除数据\n    map.-=("b", "c")\n\n    //（5）修改数据\n    map.update("d",5) map("d") = 5\n\n    //（2）打印集合\n    map.foreach((kv)=>{println(kv)})\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("h2",{attrs:{id:"_7-6-元组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-6-元组"}},[s._v("#")]),s._v(" 7.6 元组")]),s._v(" "),n("p",[s._v("1）说明")]),s._v(" "),n("p",[s._v("元组也是可以理解为一个容器，可以存放各种相同或不同类型的数据。说的简单点，就是将多个无关的数据封装为一个整体，称为元组。注意：元组中最大只能有 22 个元素。")]),s._v(" "),n("p",[s._v("2）案例实操\n（1）声明元组的方式：(元素 1，元素 2，元素 3)\n（2）访问元组\n（3）Map 中的键值对其实就是元组,只不过元组的元素个数为 2，称之为对偶")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('object TestTuple {\n\n    def main(args: Array[String]): Unit = {\n\n        //（1）声明元组的方式：(元素 1，元素 2，元素 3)\n        val tuple: (Int, String, Boolean) = (40,"bobo",true)\n\n        //（2）访问元组\n        //（2.1）通过元素的顺序进行访问，调用方式：_顺序号\n        println(tuple._1)\n        println(tuple._2) println(tuple._3)\n\n        //（2.2）通过索引访问数据\n        println(tuple.productElement(0))\n\n        //（2.3）通过迭代器访问数据\n        for (elem <- tuple.productIterator) { \n        \tprintln(elem)\n        }\n\n        //（3）Map 中的键值对其实就是元组,只不过元组的元素个数为 2，称之为对偶\n        val map = Map("a"->1, "b"->2, "c"->3)  \n        val map1 = Map(("a",1), ("b",2), ("c",3))\n        map.foreach(tuple=>{println(tuple._1 + "=" + tuple._2)})\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("h2",{attrs:{id:"_7-7-集合常用函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-7-集合常用函数"}},[s._v("#")]),s._v(" 7.7 集合常用函数")]),s._v(" "),n("h3",{attrs:{id:"_7-7-1-基本属性和常用操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-7-1-基本属性和常用操作"}},[s._v("#")]),s._v(" 7.7.1 基本属性和常用操作")]),s._v(" "),n("p",[s._v("1）说明")]),s._v(" "),n("p",[s._v("（1）获取集合长度\n（2）获取集合大小\n（3）循环遍历\n（4）迭代器\n（5）生成字符串\n（6）是否包含")]),s._v(" "),n("p",[s._v("2）案例实操")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('object TestList {\n\n    def main(args: Array[String]): Unit = {\n\n        val list: List[Int] = List(1, 2, 3, 4, 5, 6, 7)\n\n        //（1）获取集合长度\n        println(list.length)\n\n        //（2）获取集合大小,等同于 length \n        println(list.size)\n\n        //（3）循环遍历\n        list.foreach(println)\n\n        //（4）迭代器\n        for (elem <- list.itera tor) { \n        \tprintln(elem)\n        }\n\n        //（5）生成字符串\n        println(list.mkString(","))\n\n        //（6）是否包含\n        println(list.contains(3))\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br")])]),n("h2",{attrs:{id:"_7-7-2-衍生集合"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-7-2-衍生集合"}},[s._v("#")]),s._v(" 7.7.2 衍生集合")]),s._v(" "),n("p",[s._v("1）说明")]),s._v(" "),n("p",[s._v("（1）获取集合的头")]),s._v(" "),n("p",[s._v("（2）获取集合的尾（不是头的就是尾）\n（3）集合最后一个数据\n（4）集合初始数据（不包含最后一个）\n（5）反转\n（6）取前（后）n 个元素\n（7）去掉前（后）n 个元素\n（8）并集\n（9）交集\n（10）差集\n（11）拉链\n（12）滑窗")]),s._v(" "),n("p",[s._v("2）案例实操")]),s._v(" "),n("div",{staticClass:"language-scala line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-scala"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("object")]),s._v(" TestList "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" main"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("args"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Unit")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" list1"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" List"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" List"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" list2"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" List"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" List"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（1）获取集合的头")]),s._v("\n        println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（2）获取集合的尾（不是头的就是尾） ")]),s._v("\n        println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("tail"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（3）集合最后一个数据")]),s._v("\n        println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("last"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（4）集合初始数据（不包含最后一个） ")]),s._v("\n        println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("init"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（5）反转")]),s._v("\n        println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("reverse"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（6）取前（后）n 个元素")]),s._v("\n        println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("take"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n        println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("takeRight"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（7）去掉前（后）n 个元素")]),s._v("\n        println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("drop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n        println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("dropRight"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（8）并集")]),s._v("\n        println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("union"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（9）交集")]),s._v("\n        println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("intersect"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（10）差集")]),s._v("\n        println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("diff"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（11）拉链 注:如果两个集合的元素个数不相等，那么会将同等数量的数据进行拉链，多余的数据省略不用")]),s._v("\n        println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("zip"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（12）滑窗")]),s._v("\n        list1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sliding"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("foreach"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br")])]),n("h3",{attrs:{id:"_7-7-3-集合计算简单函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-7-3-集合计算简单函数"}},[s._v("#")]),s._v(" 7.7.3 集合计算简单函数")]),s._v(" "),n("p",[s._v("1）说明\n（1）求和\n（2）求乘积\n（3）最大值\n（4）最小值\n（5）排序\n2）实操")]),s._v(" "),n("div",{staticClass:"language-scala line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-scala"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("object")]),s._v(" TestList "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" main"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("args"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Unit")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" list"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" List"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" List"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（1）求和")]),s._v("\n        println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（2）求乘积")]),s._v("\n        println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("product"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（3）最大值")]),s._v("\n        println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("max"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（4）最小值")]),s._v("\n        println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("min"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（5）排序")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// （5.1）按照元素大小排序")]),s._v("\n        println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sortBy"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("=>")]),s._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// （5.2）按照元素的绝对值大小排序")]),s._v("\n        println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sortBy"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("=>")]),s._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("abs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// （5.3）按元素大小升序排序")]),s._v("\n        println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sortWith"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("=>")]),s._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// （5.4）按元素大小降序排序")]),s._v("\n        println"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sortWith"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("=>")]),s._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br")])]),n("p",[s._v("（1）sorted\n对一个集合进行自然排序，通过传递隐式的Ordering")]),s._v(" "),n("p",[s._v("（2）sortBy\n对一个属性或多个属性进行排序，通过它的类型。\n（3）sortWith\n基于函数的排序，通过一个 comparator 函数，实现自定义排序的逻辑。")]),s._v(" "),n("h3",{attrs:{id:"_7-7-4-集合计算高级函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-7-4-集合计算高级函数"}},[s._v("#")]),s._v(" 7.7.4 集合计算高级函数")]),s._v(" "),n("p",[s._v("1）说明\n（1）过滤\n遍历一个集合并从中获取满足指定条件的元素组成一个新的集合\n（2）转化/映射（map）")]),s._v(" "),n("p",[s._v("将集合中的每一个元素映射到某一个函数\n（3）扁平化\n（4）扁平化+映射 注：flatMap 相当于先进行 map 操作，在进行 flatten 操作集合中的每个元素的子元素映射到某个函数并返回新集合\n（5）分组(group)\n按照指定的规则对集合的元素进行分组\n（6）简化（归约）")]),s._v(" "),n("p",[s._v("（7）折叠")]),s._v(" "),n("p",[s._v("2）实操")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('object TestList {\n\n    def main(args: Array[String]): Unit = {\n\n        val list: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9)\n        val nestedList: List[List[Int]] = List(List(1, 2, 3), List(4, 5, 6), List(7, 8, 9))\n        val\twordList:\tList[String]\t=\tList("hello\tworld",\t"hello atguigu", "hello scala")\n\n        //（1）过滤\n        println(list.filter(x => x % 2 == 0))\n\n        //（2）转化/映射\n        println(list.map(x => x + 1))\n\n        //（3）扁平化\n        println(nestedList.flatten)\n\n        //（4）扁平化+映射 注：flatMap 相当于先进行 map 操作，在进行 flatten操作\n        println(wordList.flatMap(x => x.split(" ")))\n\n        //（5）分组\n        println(list.groupBy(x => x % 2))\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("p",[s._v("3）Reduce 方法")]),s._v(" "),n("p",[s._v("Reduce 简化（归约） ：通过指定的逻辑将集合中的数据进行聚合，从而减少数据，最终获取结果。\n案例实操")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('object TestReduce {\n\n    def main(args: Array[String]): Unit = { \n        val list = List(1,2,3,4)\n        // 将数据两两结合，实现运算规则\n        val i: Int = list.reduce( (x,y) => x-y ) \n        println("i = " + i)\n\n        // 从源码的角度，reduce 底层调用的其实就是 reduceLeft\n        //val i1 = list.reduceLeft((x,y) => x-y)\n\n        // ((4-3)-2-1) = -2\n        val i2 = list.reduceRight((x,y) => x-y) println(i2)\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("4）Fold 方法")]),s._v(" "),n("p",[s._v("Fold 折叠：化简的一种特殊情况。\n（1）案例实操：fold 基本使用")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("object TestFold {\n\n    def main(args: Array[String]): Unit = { \n    \n    \tval list = List(1,2,3,4)\n        // fold 方法使用了函数柯里化，存在两个参数列表\n        // 第一个参数列表为 ： 零值（初始值）\n        // 第二个参数列表为： 简化规则\n        // fold 底层其实为 foldLeft\n        val i = list.foldLeft(1)((x,y)=>x-y) \n        val i1 = list.foldRight(10)((x,y)=>x-y)\n        println(i) \n        println(i1)\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("（2）案例实操：两个集合合并")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('object TestFold {\n\n    def main(args: Array[String]): Unit = {\n\n        // 两个 Map 的数据合并\n        val map1 = mutable.Map("a"->1, "b"->2, "c"->3)\n        val map2 = mutable.Map("a"->4, "b"->5, "d"->6)\n\n        val map3: mutable.Map[String, Int] = map2.foldLeft(map1)\n        {\n            (map, kv) => { \n            \tval k = kv._1 val v = kv._2\n            \tmap(k) = map.getOrElse(k, 0) + v map\n        \t}\n        }\n\n        println(map3)\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("h3",{attrs:{id:"_7-7-5-普通wordcount-案例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-7-5-普通wordcount-案例"}},[s._v("#")]),s._v(" 7.7.5 普通WordCount 案例")]),s._v(" "),n("p",[s._v("1）需求\n单词计数：将集合中出现的相同的单词，进行计数，取计数排名前三的结果\n2）需求分析")]),s._v(" "),n("p",[n("img",{attrs:{src:t(1170),alt:"image-20231102172156519"}})]),s._v(" "),n("p",[s._v("3）案例实操")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('object TestWordCount {\n\n    def main(args: Array[String]): Unit = {\n        // 单词计数：将集合中出现的相同的单词，进行计数，取计数排名前三的结果\n        val stringList = List("Hello Scala Hbase kafka", "Hello Scala Hbase", "Hello Scala", "Hello")\n\n        // 1) 将每一个字符串转换成一个一个单词\n        val\twordList:\tList[String]\t= stringList.flatMap(str=>str.split(" "))\n        //println(wordList)\n\n        // 2) 将相同的单词放置在一起\n        val\twordToWordsMap:\tMap[String,\tList[String]]\t= wordList.groupBy(word=>word)\n        //println(wordToWordsMap)\n\n        // 3) 对相同的单词进行计数\n        // (word, list) => (word, count)\n        val\twordToCountMap:\tMap[String,\tInt]\t= wordToWordsMap.map(tuple=>(tuple._1, tuple._2.size))\n\n        // 4) 对计数完成后的结果进行排序（降序）\n        val\tsortList:\tList[(String,\tInt)]\t= wordToCountMap.toList.sortWith {\n        \t(left, right) => { \n        \t\tleft._2 > right._2\n        \t}\n        }\n\n        // 5) 对排序后的结果取前 3 名\n        val resultList: List[(String, Int)] = sortList.take(3)\n\n        println(resultList)\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br")])]),n("h3",{attrs:{id:"_7-7-6-复杂wordcount-案例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-7-6-复杂wordcount-案例"}},[s._v("#")]),s._v(" 7.7.6 复杂WordCount 案例")]),s._v(" "),n("p",[s._v("1）方式一")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('object Test_ComplexWordCount {\n  def main(args: Array[String]): Unit = {\n    val tupleList: List[(String, Int)] = List(\n      ("hello", 1),\n      ("hello world", 2),\n      ("hello scala", 3),\n      ("hello spark from scala", 1),\n      ("hello flink from scala", 2)\n    )\n\n    // 思路一：直接展开为普通版本\n    val newStringList: List[String] = tupleList.map(\n      kv => {\n        (kv._1.trim + " ") * kv._2\n      }\n    )\n    println(newStringList)\n\n    // 接下来操作与普通版本完全一致\n    val wordCountList: List[(String, Int)] = newStringList\n      .flatMap(_.split(" "))    // 空格分词\n      .groupBy( word => word )     // 按照单词分组\n      .map( kv => (kv._1, kv._2.size) )     // 统计出每个单词的个数\n      .toList\n      .sortBy(_._2)(Ordering[Int].reverse)\n      .take(3)\n\n    println(wordCountList)\n\n    println("================================")\n\n    // 思路二：直接基于预统计的结果进行转换\n    // 1. 将字符串打散为单词，并结合对应的个数包装成二元组\n    val preCountList: List[(String, Int)] = tupleList.flatMap(\n      tuple => {\n        val strings: Array[String] = tuple._1.split(" ")\n        strings.map( word => (word, tuple._2) )\n      }\n    )\n    println(preCountList)\n\n    // 2. 对二元组按照单词进行分组\n    val preCountMap: Map[String, List[(String, Int)]] = preCountList.groupBy( _._1 )\n    println(preCountMap)\n\n    // 3. 叠加每个单词预统计的个数值\n    val countMap: Map[String, Int] = preCountMap.mapValues(\n      tupleList => tupleList.map(_._2).sum\n    )\n    println(countMap)\n\n    // 4. 转换成list，排序取前3\n    val countList = countMap.toList\n      .sortWith(_._2 > _._2)\n      .take(3)\n    println(countList)\n  }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br")])]),n("h2",{attrs:{id:"_7-8-队列"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-8-队列"}},[s._v("#")]),s._v(" 7.8 队列")]),s._v(" "),n("p",[s._v("1）说明\nScala 也提供了队列（Queue）的数据结构，队列的特点就是先进先出。进队和出队的方法分别为 enqueue 和dequeue。\n2）案例实操")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('object TestQueue {\n\n    def main(args: Array[String]): Unit = { \n    \tval que = new mutable.Queue[String]() \n    \tque.enqueue("a", "b", "c")\n    \tprintln(que.dequeue()) \n    \tprintln(que.dequeue()) \n    \tprintln(que.dequeue())\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h2",{attrs:{id:"_7-9-并行集合"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-9-并行集合"}},[s._v("#")]),s._v(" 7.9 并行集合")]),s._v(" "),n("p",[s._v("1）说明\nScala 为了充分使用"),n("strong",[s._v("多核 CPU")]),s._v("，提供了并行集合（有别于前面的串行集合），用于多核环境的并行计算。\n2）案例实操")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("object TestPar {\n\n    def main(args: Array[String]): Unit = {\n    \n         val result1 = (0 to 100).map{case _ =>  Thread.currentThread.getName}\n\n         val result2 = (0 to 100).par.map{case _ =>  Thread.currentThread.getName }\n         println(result1)\n         println(result2)\n     }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h1",{attrs:{id:"参考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://www.yiibai.com/scala/scala_overview.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://www.yiibai.com/scala/scala_overview.html"),n("OutboundLink")],1)])])}),[],!1,null,null,null);n.default=e.exports}}]);