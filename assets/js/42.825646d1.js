(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{596:function(s,e,n){"use strict";n.r(e);var a=n(4),t=Object(a.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("blockquote",[e("p",[s._v("Mybatis 经过一系列操作最终封装成 "),e("code",[s._v("Statement\\PreparedStatement")]),s._v(",交个 JDBC 处理，所以我们需要回归下 JDBC。参考"),e("a",{attrs:{href:"https://blog.csdn.net/agonie201218/article/details/129157261?spm=1001.2014.3001.5501",target:"_blank",rel:"noopener noreferrer"}},[s._v("JDBC 简单的示例"),e("OutboundLink")],1)])]),s._v(" "),e("h1",{attrs:{id:"mybatis-功能架构设计"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-功能架构设计"}},[s._v("#")]),s._v(" MyBatis 功能架构设计")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/07c7d3e87703e205c6527c66c36f8be2.png#pic_center",alt:"MyBatis功能架构设计"}})]),s._v(" "),e("h2",{attrs:{id:"mybatis-功能架构讲解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-功能架构讲解"}},[s._v("#")]),s._v(" MyBatis 功能架构讲解")]),s._v(" "),e("p",[s._v("我们把 Mybatis 的功能架构分为三层：")]),s._v(" "),e("p",[s._v("(1)API 接口层：提供给外部使用的接口 API，开发人员通过这些本地 API 来操纵数据库。接口层一接收到调用请求就会调用数据处理层来完成具体的数据处理。")]),s._v(" "),e("p",[s._v("(2)数据处理层：负责具体的 SQL 查找、SQL 解析、SQL 执行和执行结果映射处理等。它主要的目的是根据调用的请求完成一次数据库操作。")]),s._v(" "),e("p",[s._v("(3)基础支撑层：负责最基础的功能支撑，包括连接管理、事务管理、配置加载和缓存处理，这些都是共用的东西，将他们抽取出来作为最基础的组件。为上层的数据处理层提供最基础的支撑。")]),s._v(" "),e("h1",{attrs:{id:"mybatis-框架架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-框架架构"}},[s._v("#")]),s._v(" MyBatis 框架架构")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/060b74d05c8c9ae64833c83f1db8147c.png#pic_center",alt:"MyBatis框架架构 "}})]),s._v(" "),e("h2",{attrs:{id:"mybatis-框架架构讲解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-框架架构讲解"}},[s._v("#")]),s._v(" MyBatis 框架架构讲解：")]),s._v(" "),e("p",[s._v("这张图从上往下看。MyBatis 的初始化，会从 mybatis-config.xml 配置文件，解析构造成 Configuration 这个类，就是图中的红框。")]),s._v(" "),e("p",[s._v("(1)加载配置：配置来源于两个地方，一处是配置文件，一处是 Java 代码的注解，将 SQL 的配置信息加载成为一个个 MappedStatement 对象（包括了传入参数映射配置、执行的 SQL 语句、结果映射配置），存储在内存中。")]),s._v(" "),e("p",[s._v("(2)SQL 解析：当 API 接口层接收到调用请求时，会接收到传入 SQL 的 ID 和传入对象（可以是 Map、JavaBean 或者基本数据类型），Mybatis 会根据 SQL 的 ID 找到对应的 MappedStatement，然后根据传入参数对象对 MappedStatement 进行解析，解析后可以得到最终要执行的 SQL 语句和参数。")]),s._v(" "),e("p",[s._v("(3)SQL 执行：将最终得到的 SQL 和参数拿到数据库进行执行，得到操作数据库的结果。")]),s._v(" "),e("p",[s._v("(4)结果映射：将操作数据库的结果按照映射的配置进行转换，可以转换成 HashMap、JavaBean 或者基本数据类型，并将最终结果返回。")]),s._v(" "),e("h1",{attrs:{id:"mybatis-核心类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-核心类"}},[s._v("#")]),s._v(" MyBatis 核心类")]),s._v(" "),e("h2",{attrs:{id:"_1、sqlsessionfactorybuilder"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、sqlsessionfactorybuilder"}},[s._v("#")]),s._v(" 1、SqlSessionFactoryBuilder")]),s._v(" "),e("p",[s._v("每一个 MyBatis 的应用程序的入口是 SqlSessionFactoryBuilder。")]),s._v(" "),e("p",[s._v("它的作用是通过 XML 配置文件创建 Configuration 对象（当然也可以在程序中自行创建），然后通过 build 方法创建 SqlSessionFactory 对象。没有必要每次访问 Mybatis 就创建一次 SqlSessionFactoryBuilder，通常的做法是创建一个全局的对象就可以了。示例程序如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('private static SqlSessionFactoryBuilder sqlSessionFactoryBuilder;\nprivate static SqlSessionFactory sqlSessionFactory;\n\nprivate static void init() throws IOException {\n        String resource = "mybatis-config.xml";\n        Reader reader = Resources.getResourceAsReader(resource);\n        sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();\n        sqlSessionFactory = sqlSessionFactoryBuilder.build(reader);\n}\n        org.apache.ibatis.session.Configuration 是mybatis初始化的核心。\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[s._v("mybatis-config.xml 中的配置，最后会解析 xml 成 Configuration 这个类。")]),s._v(" "),e("p",[s._v("SqlSessionFactoryBuilder 根据传入的数据流(XML)生成 Configuration 对象，然后根据 Configuration 对象创建默认的 SqlSessionFactory 实例。")]),s._v(" "),e("h2",{attrs:{id:"_2、sqlsessionfactory-对象由-sqlsessionfactorybuilder-创建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、sqlsessionfactory-对象由-sqlsessionfactorybuilder-创建"}},[s._v("#")]),s._v(" 2、SqlSessionFactory 对象由 SqlSessionFactoryBuilder 创建：")]),s._v(" "),e("p",[s._v("它的主要功能是创建 SqlSession 对象，和 SqlSessionFactoryBuilder 对象一样，没有必要每次访问 Mybatis 就创建一次 SqlSessionFactory，通常的做法是创建一个全局的对象就可以了。SqlSessionFactory 对象一个必要的属性是 Configuration 对象，它是保存 Mybatis 全局配置的一个配置对象，通常由 SqlSessionFactoryBuilder 从 XML 配置文件创建。这里给出一个简单的示例：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('<?xml version="1.0" encoding="UTF-8" ?>\n<!DOCTYPE configuration PUBLIC\n        "-//mybatis.org//DTD Config 3.0//EN"\n        "http://mybatis.org/dtd/mybatis-3-config.dtd">\n<configuration>\n    \x3c!-- 配置别名 --\x3e\n    <typeAliases>\n        <typeAlias type="org.iMybatis.abc.dao.UserDao" alias="UserDao" />\n        <typeAlias type="org.iMybatis.abc.dto.UserDto" alias="UserDto" />\n    </typeAliases>\n\n    \x3c!-- 配置环境变量 --\x3e\n    <environments default="development">\n        <environment id="development">\n            <transactionManager type="JDBC" />\n            <dataSource type="POOLED">\n                <property name="driver" value="com.mysql.jdbc.Driver" />\n                <property name="url" value="jdbc:mysql://127.0.0.1:3306/iMybatis?characterEncoding=GBK" />\n                <property name="username" value="iMybatis" />\n                <property name="password" value="iMybatis" />\n            </dataSource>\n        </environment>\n    </environments>\n\n    \x3c!-- 配置mappers --\x3e\n    <mappers>\n        <mapper resource="org/iMybatis/abc/dao/UserDao.xml" />\n    </mappers>\n\n</configuration>\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br")])]),e("h3",{attrs:{id:"configuration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[s._v("#")]),s._v(" Configuration")]),s._v(" "),e("p",[s._v("MyBatis 在初始化的时候，会将 MyBatis 的配置信息全部加载到内存中，使⽤ org.apache.ibatis.session.Configuration 实例来维护")]),s._v(" "),e("p",[s._v("下⾯进⼊对配置⽂件解析部分： ⾸先对 Configuration 对象进⾏介绍：")]),s._v(" "),e("p",[s._v("Configuration 对象的结构和 xml 配置⽂件的对象⼏乎相同。 回顾⼀下 xml 中的配置标签有哪些： properties (属性)，settings (设置)，typeAliases (类型别名)，typeHandlers (类型处理 器)，objectFactory (对象⼯⼚)，mappers (映射器)等 Configuration 也有对应的对象属性来封 装它们 也就是说，初始化配置⽂件信息的本质就是创建 Configuration 对象，将解析的 xml 数据封装到 Configuration 内部属性中")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('InputStream resourceAsStream = Resources.getResourceAsStream("sqlMapConfig.xml");\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsStream);\n---\n\npublic SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {\n        try {\n            // 创建 XMLConfigBuilder, XMLConfigBuilder是专门解析mybatis的配置文件的类\n            XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);\n            // 执行 XML 解析\n            // 创建 DefaultSqlSessionFactory 对象\n            return build(parser.parse());\n        } catch (Exception e) {\n            throw ExceptionFactory.wrapException("Error building SqlSession.", e);\n        } finally {\n            ErrorContext.instance().reset();\n            try {\n                inputStream.close();\n            } catch (IOException e) {\n                // Intentionally ignore. Prefer previous error.\n            }\n        }\n    }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('/**\n     * 解析 XML\n     *\n     * 具体 MyBatis 有哪些 XML 标签，参见 《XML 映射配置文件》http://www.mybatis.org/mybatis-3/zh/configuration.html\n     *\n     * @param root 根节点\n     */\n    private void parseConfiguration(XNode root) {\n        try {\n            //issue #117 read properties first\n            // 解析 <properties /> 标签\n            propertiesElement(root.evalNode("properties"));\n            // 解析 <settings /> 标签\n            Properties settings = settingsAsProperties(root.evalNode("settings"));\n            // 加载自定义的 VFS 实现类\n            loadCustomVfs(settings);\n            // 解析 <typeAliases /> 标签\n            typeAliasesElement(root.evalNode("typeAliases"));\n            // 解析 <plugins /> 标签\n            pluginElement(root.evalNode("plugins"));\n            // 解析 <objectFactory /> 标签\n            objectFactoryElement(root.evalNode("objectFactory"));\n            // 解析 <objectWrapperFactory /> 标签\n            objectWrapperFactoryElement(root.evalNode("objectWrapperFactory"));\n            // 解析 <reflectorFactory /> 标签\n            reflectorFactoryElement(root.evalNode("reflectorFactory"));\n            // 赋值 <settings /> 到 Configuration 属性\n            settingsElement(settings);\n            // read it after objectFactory and objectWrapperFactory issue #631\n            // 解析 <environments /> 标签\n            environmentsElement(root.evalNode("environments"));\n            // 解析 <databaseIdProvider /> 标签\n            databaseIdProviderElement(root.evalNode("databaseIdProvider"));\n            // 解析 <typeHandlers /> 标签\n            typeHandlerElement(root.evalNode("typeHandlers"));\n            // 解析 <mappers /> 标签\n            mapperElement(root.evalNode("mappers"));\n        } catch (Exception e) {\n            throw new BuilderException("Error parsing SQL Mapper Configuration. Cause: " + e, e);\n        }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br")])]),e("h3",{attrs:{id:"介绍一下-mappedstatement"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍一下-mappedstatement"}},[s._v("#")]),s._v(" 介绍⼀下 MappedStatement ：")]),s._v(" "),e("p",[s._v("作⽤：MappedStatement 与 Mapper 配置⽂件中的⼀个 select/update/insert/delete 节点相对应。 mapper 中配置的标签都被封装到了此对象中，主要⽤途是描述⼀条 SQL 语句。")]),s._v(" "),e("p",[e("strong",[s._v("初始化过程：")]),s._v(" 回顾刚开 始介绍的加载配置⽂件的过程中，会对 mybatis-config.xml 中的各个标签都进⾏ 解析，其中有 mappers 标签⽤来引⼊ mapper.xml ⽂件或者配置 mapper 接⼝的⽬录")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('<select id="getUser" resultType="user" >\n select * from user where id=#{id}\n</select>\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("这样的⼀个 select 标签会在初始化配置⽂件时被解析封装成⼀个 MappedStatement 对象，然后存储在 Configuration 对象的 mappedStatements 属性中，mappedStatements 是⼀个 HashMap，存储时 key =全限定类名+⽅法名，value =对应的 MappedStatement 对象")]),s._v(" "),e("p",[s._v("在 configuration"),e("strong",[s._v("中对应的属性为")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('Map<String, MappedStatement> mappedStatements = new StrictMap<MappedStatement>\n("Mapped Statements collection")\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("在 XMLConfigBuilder 中的处理：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('private void parseConfiguration(XNode root) {\n     try {\n         //省略其他标签的处理\n         mapperElement(root.evalNode("mappers"));\n     } catch (Exception e) {\n         throw new BuilderException("Error parsing SQL Mapper Configuration. Cause:" + e, e);\n     }\n }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("到此对 xml 配置⽂件的解析就结束了，回到步骤 2.中调⽤的重载 build ⽅法")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 5.调⽤的重载⽅法\npublic SqlSessionFactory build(Configuration config) {\n //创建了 DefaultSqlSessionFactory 对象，传⼊ Configuration 对象。\n return new DefaultSqlSessionFactory(config);\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h2",{attrs:{id:"_3、sqlsession"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、sqlsession"}},[s._v("#")]),s._v(" 3、SqlSession")]),s._v(" "),e("p",[s._v("SqlSession 是⼀个接⼝，它类似于数据库的 session 概念，由于不是线程安全的。通常将它与 ThreadLocal 绑定，⼀个会话使⽤⼀ 个 SqlSession,并且在使⽤完毕后需要 close。它有两个实现类：DefaultSqlSession (默认)和 SqlSessionManager (弃⽤，不做介绍) SqlSession 是 MyBatis 中⽤于和数据库交互的顶层类，")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public class DefaultSqlSession implements SqlSession {\n    private final Configuration configuration;\n    private final Executor executor;\n    /**\n     * 是否自动提交事务\n     */\n    private final boolean autoCommit;\n    /**\n     * 是否发生数据变更\n     */\n    private boolean dirty;\n    /**\n     * Cursor 数组\n     */\n    private List<Cursor<?>> cursorList;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[s._v("SqlSession 中的两个最重要的参数，configuration 与初始化时的相同，Executor 为执⾏器")]),s._v(" "),e("p",[s._v("SqlSession ：默认创建 DefaultSqlSession 并且开启一级缓存，创建执行器 、赋值。")]),s._v(" "),e("p",[s._v("SqlSession 有一个重要的方法 getMapper，顾名思义，这个方式是用来获取 Mapper 对象的。什么是 Mapper 对象？根据 Mybatis 的官方手册，应用程序除了要初始并启动 Mybatis 之外，还需要定义一些接口，接口里定义访问数据库的方法，存放接口的包路径下需要放置同名的 XML 配置文件。")]),s._v(" "),e("p",[s._v("SqlSession 的 getMapper 方法是联系应用程序和 Mybatis 纽带，应用程序访问 getMapper 时，Mybatis 会根据传入的接口类型和对应的 XML 配置文件生成一个"),e("strong",[s._v("代理对象")]),s._v("，这个代理对象就叫 Mapper 对象。应用程序获得 Mapper 对象后，就应该通过这个 Mapper 对象来访问 Mybatis 的 SqlSession 对象，这样就达到里插入到 Mybatis 流程的目的。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('SqlSession session= sqlSessionFactory.openSession();\nUserDao userDao = session.getMapper(UserDao.class);\nUserDto user = new UserDto();\nuser.setUsername("iMybatis");\nList<UserDto> users = userDao.queryUsers(user);\n\n---\npublic interface UserDao {\n    public List<UserDto> queryUsers(UserDto user) throws Exception;\n}\n\n---\n<?xml version="1.0" encoding="UTF-8" ?>\n<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">\n<mapper namespace="org.iMybatis.abc.dao.UserDao">\n\t<select id="queryUsers" parameterType="UserDto" resultType="UserDto"\n\t\tuseCache="false">\n\t\t\t<![CDATA[\n\t\t\t\tselect * from t_user t where t.username = #{username}\n        \t]]>\n    </select>\n</mapper>\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br")])]),e("h2",{attrs:{id:"_4、executor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、executor"}},[s._v("#")]),s._v(" 4、Executor")]),s._v(" "),e("p",[s._v("Executor 对象在创建 Configuration 对象的时候创建，并且缓存在 Configuration 对象里。Executor 对象的主要功能是调用 StatementHandler 访问数据库，并将查询结果存入缓存中（如果配置了缓存的话）。")]),s._v(" "),e("p",[s._v("Executor 也是⼀个接⼝，他有三个常⽤的实现类：")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("BatchExecutor (重⽤语句并执⾏批量更新）")])]),s._v(" "),e("li",[e("p",[s._v("ReuseExecutor (重⽤预处理语句 prepared statements）")])]),s._v(" "),e("li",[e("p",[s._v("SimpleExecutor (普通的执⾏器，默认)")]),s._v(" "),e("p",[s._v("继续分析，初始化完毕后，我们就要执⾏ SQL 了")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('SqlSession sqlSession = factory.openSession();\nList<User> list = sqlSession.selectList("com.admin4j.mapper.UserMapper.getUserByName");\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])])])]),s._v(" "),e("h3",{attrs:{id:"获得-sqlsession"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获得-sqlsession"}},[s._v("#")]),s._v(" 获得 sqlSession")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('//6. 进入openSession方法\n  @Override\n  public SqlSession openSession() {\n      //getDefaultExecutorType()传递的是SimpleExecutor\n      return openSessionFromDataSource(configuration.getDefaultExecutorType(), null, false);\n  }\n\n---\n\t//7. 进入openSessionFromDataSource。\n  //ExecutorType 为Executor的类型，TransactionIsolationLevel为事务隔离级别，autoCommit是否开启事务\n  //openSession的多个重载方法可以指定获得的SeqSession的Executor类型和事务的处理\n  private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {\n      Transaction tx = null;\n      try {\n          // 获得 Environment 对象\n          final Environment environment = configuration.getEnvironment();\n          // 创建 Transaction 对象\n          final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);\n          tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);\n          // 创建 Executor 对象\n          final Executor executor = configuration.newExecutor(tx, execType);\n          // 创建 DefaultSqlSession 对象\n          return new DefaultSqlSession(configuration, executor, autoCommit);\n      } catch (Exception e) {\n          // 如果发生异常，则关闭 Transaction 对象\n          closeTransaction(tx); // may have fetched a connection so lets call close()\n          throw ExceptionFactory.wrapException("Error opening session.  Cause: " + e, e);\n      } finally {\n          ErrorContext.instance().reset();\n      }\n  }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br")])]),e("h3",{attrs:{id:"执行-sqlsession-中的-api-以-selectlist-为例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行-sqlsession-中的-api-以-selectlist-为例"}},[s._v("#")]),s._v(" 执⾏ sqlsession 中的 api,以 selectList 为例")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('    //8.进入selectList方法，多个重载方法\n    @Override\n    public <E> List<E> selectList(String statement) {\n        return this.selectList(statement, null);\n    }\n\n    @Override\n    public <E> List<E> selectList(String statement, Object parameter) {\n        return this.selectList(statement, parameter, RowBounds.DEFAULT);\n    }\n\n    @Override\n    public <E> List<E> selectList(String statement, Object parameter, RowBounds rowBounds) {\n        try {\n            // 获得 MappedStatement 对象\n            // 根据传⼊的全限定名+⽅法名从映射的Map中取出MappedStatement对象\n            MappedStatement ms = configuration.getMappedStatement(statement);\n            // 执行查询\n            //调⽤Executor中的⽅法处理\n            //RowBounds是⽤来逻辑分⻚\n            // wrapCollection(parameter)是⽤来装饰集合或者数组参数\n            return executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);\n        } catch (Exception e) {\n            throw ExceptionFactory.wrapException("Error querying database.  Cause: " + e, e);\n        } finally {\n            ErrorContext.instance().reset();\n        }\n    }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br")])]),e("h3",{attrs:{id:"源码剖析-executor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#源码剖析-executor"}},[s._v("#")]),s._v(" 源码剖析-executor")]),s._v(" "),e("p",[s._v("再创建 SqlSeeeion 时会创建 executor")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 创建 Executor 对象\nfinal Executor executor = configuration.newExecutor(tx, execType);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("再 Configuration 类中创建 Executor 对象源码，其中如果开启缓存的换就将创建的 executor 设为 CachingExecutor 的代理，"),e("code",[s._v("executor = new CachingExecutor(executor)")]),s._v("，并返回 CachingExecutor")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("/**\n * 创建 Executor 对象\n *\n * @param transaction 事务对象\n * @param executorType 执行器类型\n * @return Executor 对象\n */\npublic Executor newExecutor(Transaction transaction, ExecutorType executorType) {\n    // 获得执行器类型\n    executorType = executorType == null ? defaultExecutorType : executorType; // 使用默认\n    executorType = executorType == null ? ExecutorType.SIMPLE : executorType; // 使用 ExecutorType.SIMPLE\n    // 创建对应实现的 Executor 对象\n    Executor executor;\n    if (ExecutorType.BATCH == executorType) {\n        executor = new BatchExecutor(this, transaction);\n    } else if (ExecutorType.REUSE == executorType) {\n        executor = new ReuseExecutor(this, transaction);\n    } else {\n        executor = new SimpleExecutor(this, transaction);\n    }\n    // 如果开启缓存，创建 CachingExecutor 对象，进行包装\n    if (cacheEnabled) {\n        executor = new CachingExecutor(executor);\n    }\n    // 应用插件\n    executor = (Executor) interceptorChain.pluginAll(executor);\n    return executor;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br")])]),e("p",[s._v("继续源码中的步骤，进⼊ executor.query()")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('//此⽅法在SimpleExecutor的⽗类BaseExecutor中实现\n    @Override\n    public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException {\n        // 根据传⼊的参数动态获得SQL语句，最后返回⽤BoundSql对象表示\n        BoundSql boundSql = ms.getBoundSql(parameterObject);\n        // 为本次查询创建缓存的Key\n        CacheKey key = createCacheKey(ms, parameterObject, rowBounds, boundSql);\n        // 查询\n        return query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);\n    }\n\n---\n//进⼊query的重载⽅法中\npublic <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)\n            throws SQLException {\n\n        // 从 MappedStatement 中获取 Cache，注意这里的 Cache 是从MappedStatement中获取的\n        // 也就是我们上面解析Mapper中<cache/>标签中创建的，它保存在Configration中\n        // 我们在初始化解析xml时分析过每一个MappedStatement都有一个Cache对象，就是这里\n        Cache cache = ms.getCache();\n\n        // 如果配置文件中没有配置 <cache>，则 cache 为空\n        if (cache != null) {\n            //如果需要刷新缓存的话就刷新：flushCache="true"\n            flushCacheIfRequired(ms);\n            if (ms.isUseCache() && resultHandler == null) {\n                // 暂时忽略，存储过程相关\n                ensureNoOutParams(ms, boundSql);\n                @SuppressWarnings("unchecked")\n                // 从二级缓存中，获取结果\n                List<E> list = (List<E>) tcm.getObject(cache, key);\n                if (list == null) {\n                    // 如果没有值，则执行查询，这个查询实际也是先走一级缓存查询，一级缓存也没有的话，则进行DB查询\n                    list = delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);\n                    // 缓存查询结果\n                    tcm.putObject(cache, key, list); // issue #578 and #116\n                }\n                // 如果存在，则直接返回结果\n                return list;\n            }\n        }\n        // 不使用缓存，则从数据库中查询(会查一级缓存) 调用父类的方法\n        return delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);\n    }\n\n\n---  父类BaseExecutor\n    public <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {\n        ErrorContext.instance().resource(ms.getResource()).activity("executing a query").object(ms.getId());\n        // 已经关闭，则抛出 ExecutorException 异常\n        if (closed) {\n            throw new ExecutorException("Executor was closed.");\n        }\n        // 清空本地缓存，如果 queryStack 为零，并且要求清空本地缓存。\n        if (queryStack == 0 && ms.isFlushCacheRequired()) {\n            clearLocalCache();\n        }\n        List<E> list;\n        try {\n            // queryStack + 1\n            queryStack++;\n            // 从一级缓存中，获取查询结果\n            list = resultHandler == null ? (List<E>) localCache.getObject(key) : null;\n            // 获取到，则进行处理\n            if (list != null) {\n                handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);\n            // 获得不到，则从数据库中查询\n            } else {\n                list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);\n            }\n        } finally {\n            // queryStack - 1\n            queryStack--;\n        }\n        if (queryStack == 0) {\n            // 执行延迟加载\n            for (DeferredLoad deferredLoad : deferredLoads) {\n                deferredLoad.load();\n            }\n            // issue #601\n            // 清空 deferredLoads\n            deferredLoads.clear();\n            // 如果缓存级别是 LocalCacheScope.STATEMENT ，则进行清理\n            if (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) {\n                // issue #482\n                clearLocalCache();\n            }\n        }\n        return list;\n    }\n\n // 从数据库中读取操作\n    private <E> List<E> queryFromDatabase(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {\n        List<E> list;\n        // 在缓存中，添加占位对象。此处的占位符，和延迟加载有关，可见 `DeferredLoad#canLoad()` 方法\n        localCache.putObject(key, EXECUTION_PLACEHOLDER);\n        try {\n            // 执行读操作\n            list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);\n        } finally {\n            // 从缓存中，移除占位对象\n            localCache.removeObject(key);\n        }\n        // 添加到缓存中\n        localCache.putObject(key, list);\n        // 暂时忽略，存储过程相关\n        if (ms.getStatementType() == StatementType.CALLABLE) {\n            localOutputParameterCache.putObject(key, parameter);\n        }\n        return list;\n    }\n\n --- 最终调用子类的doQuery 实现具体查询\n @Override\n    public <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) throws SQLException {\n        Statement stmt = null;\n        try {\n            Configuration configuration = ms.getConfiguration();\n            // 传入参数创建StatementHanlder对象来执行查询\n            StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);\n            // 创建jdbc中的statement对象\n            stmt = prepareStatement(handler, ms.getStatementLog());\n            // 执行 StatementHandler  ，进行读操作\n            return handler.query(stmt, resultHandler);\n        } finally {\n            // 关闭 StatementHandler 对象\n            closeStatement(stmt);\n        }\n    }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br"),e("span",{staticClass:"line-number"},[s._v("67")]),e("br"),e("span",{staticClass:"line-number"},[s._v("68")]),e("br"),e("span",{staticClass:"line-number"},[s._v("69")]),e("br"),e("span",{staticClass:"line-number"},[s._v("70")]),e("br"),e("span",{staticClass:"line-number"},[s._v("71")]),e("br"),e("span",{staticClass:"line-number"},[s._v("72")]),e("br"),e("span",{staticClass:"line-number"},[s._v("73")]),e("br"),e("span",{staticClass:"line-number"},[s._v("74")]),e("br"),e("span",{staticClass:"line-number"},[s._v("75")]),e("br"),e("span",{staticClass:"line-number"},[s._v("76")]),e("br"),e("span",{staticClass:"line-number"},[s._v("77")]),e("br"),e("span",{staticClass:"line-number"},[s._v("78")]),e("br"),e("span",{staticClass:"line-number"},[s._v("79")]),e("br"),e("span",{staticClass:"line-number"},[s._v("80")]),e("br"),e("span",{staticClass:"line-number"},[s._v("81")]),e("br"),e("span",{staticClass:"line-number"},[s._v("82")]),e("br"),e("span",{staticClass:"line-number"},[s._v("83")]),e("br"),e("span",{staticClass:"line-number"},[s._v("84")]),e("br"),e("span",{staticClass:"line-number"},[s._v("85")]),e("br"),e("span",{staticClass:"line-number"},[s._v("86")]),e("br"),e("span",{staticClass:"line-number"},[s._v("87")]),e("br"),e("span",{staticClass:"line-number"},[s._v("88")]),e("br"),e("span",{staticClass:"line-number"},[s._v("89")]),e("br"),e("span",{staticClass:"line-number"},[s._v("90")]),e("br"),e("span",{staticClass:"line-number"},[s._v("91")]),e("br"),e("span",{staticClass:"line-number"},[s._v("92")]),e("br"),e("span",{staticClass:"line-number"},[s._v("93")]),e("br"),e("span",{staticClass:"line-number"},[s._v("94")]),e("br"),e("span",{staticClass:"line-number"},[s._v("95")]),e("br"),e("span",{staticClass:"line-number"},[s._v("96")]),e("br"),e("span",{staticClass:"line-number"},[s._v("97")]),e("br"),e("span",{staticClass:"line-number"},[s._v("98")]),e("br"),e("span",{staticClass:"line-number"},[s._v("99")]),e("br"),e("span",{staticClass:"line-number"},[s._v("100")]),e("br"),e("span",{staticClass:"line-number"},[s._v("101")]),e("br"),e("span",{staticClass:"line-number"},[s._v("102")]),e("br"),e("span",{staticClass:"line-number"},[s._v("103")]),e("br"),e("span",{staticClass:"line-number"},[s._v("104")]),e("br"),e("span",{staticClass:"line-number"},[s._v("105")]),e("br"),e("span",{staticClass:"line-number"},[s._v("106")]),e("br"),e("span",{staticClass:"line-number"},[s._v("107")]),e("br"),e("span",{staticClass:"line-number"},[s._v("108")]),e("br"),e("span",{staticClass:"line-number"},[s._v("109")]),e("br"),e("span",{staticClass:"line-number"},[s._v("110")]),e("br"),e("span",{staticClass:"line-number"},[s._v("111")]),e("br"),e("span",{staticClass:"line-number"},[s._v("112")]),e("br"),e("span",{staticClass:"line-number"},[s._v("113")]),e("br"),e("span",{staticClass:"line-number"},[s._v("114")]),e("br"),e("span",{staticClass:"line-number"},[s._v("115")]),e("br"),e("span",{staticClass:"line-number"},[s._v("116")]),e("br"),e("span",{staticClass:"line-number"},[s._v("117")]),e("br"),e("span",{staticClass:"line-number"},[s._v("118")]),e("br"),e("span",{staticClass:"line-number"},[s._v("119")]),e("br"),e("span",{staticClass:"line-number"},[s._v("120")]),e("br"),e("span",{staticClass:"line-number"},[s._v("121")]),e("br"),e("span",{staticClass:"line-number"},[s._v("122")]),e("br"),e("span",{staticClass:"line-number"},[s._v("123")]),e("br"),e("span",{staticClass:"line-number"},[s._v("124")]),e("br"),e("span",{staticClass:"line-number"},[s._v("125")]),e("br"),e("span",{staticClass:"line-number"},[s._v("126")]),e("br"),e("span",{staticClass:"line-number"},[s._v("127")]),e("br"),e("span",{staticClass:"line-number"},[s._v("128")]),e("br"),e("span",{staticClass:"line-number"},[s._v("129")]),e("br")])]),e("p",[s._v("上述的 Executor.query()⽅法⼏经转折，最后会创建⼀个 StatementHandler 对象，然后将必要的参数传 递给 StatementHandler，使⽤ StatementHandler 来完成对数据库的查询，最终返回 List 结果集。 从上⾯的代码中我们可以看出，Executor 的功能和作⽤是")]),s._v(" "),e("ul",[e("li",[s._v("1、根据传递的参数，完成 SQL 语句的动态解析，⽣成 BoundSql 对象，供 StatementHandler 使⽤； -")]),s._v(" "),e("li",[s._v("2、为查询创建缓存，以提⾼性能")]),s._v(" "),e("li",[s._v("3、创建 JDBC 的"),e("strong",[s._v("Statement")]),s._v("（PreparedStatement）连接对象，传递给"),e("em",[s._v("StatementHandler")]),s._v("对象，返回 List 查询结果。")])]),s._v(" "),e("h2",{attrs:{id:"_5、statementhandler"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5、statementhandler"}},[s._v("#")]),s._v(" 5、StatementHandler")]),s._v(" "),e("p",[s._v("StatementHandler 对象主要完成两个⼯作：")]),s._v(" "),e("ul",[e("li",[s._v("对于 JDBC 的 PreparedStatement 类型的对象，创建的过程中，我们使⽤的是 SQL 语句字符串会包含若⼲个？占位符，我们其后再对占位符进⾏设值。StatementHandler 通过 parameterize(statement)⽅法对 Statement 进⾏设值；")]),s._v(" "),e("li",[s._v("StatementHandler 通过 List query(Statement statement, ResultHandler resultHandler)⽅法来 完成执⾏ Statement，和将 Statement 对象返回的 resultSet 封装成 List； 进⼊到 StatementHandler 的 parameterize(statement)⽅法的实现：")])]),s._v(" "),e("p",[s._v("上方 SimpleExecutor.doQuery() 方法初始化 StatementHandler 和 Statement")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 传入参数创建StatementHanlder对象来执行查询\nStatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);\n// 创建jdbc中的statement对象\nstmt = prepareStatement(handler, ms.getStatementLog());\n// 执行 StatementHandler  ，进行读操作\nreturn handler.query(stmt, resultHandler);\n\n---\n// 初始化 StatementHandler 对象\n    private Statement prepareStatement(StatementHandler handler, Log statementLog) throws SQLException {\n        Statement stmt;\n        // 获得 Connection 对象\n        Connection connection = getConnection(statementLog);\n        // 创建 Statement 或 PrepareStatement 对象\n        stmt = handler.prepare(connection, transaction.getTimeout());\n        // 设置 SQL 上的参数，例如 PrepareStatement 对象上的占位符\n        handler.parameterize(stmt);\n        return stmt;\n    }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br")])]),e("p",[s._v("进⼊到 StatementHandler（PreparedStatementHandler） 的 parameterize(statement)⽅法的实现：")]),s._v(" "),e("blockquote",[e("p",[s._v("StatementHandler 包含各种 sql 参数 通过 "),e("code",[s._v("parameterHandler.setParameters((PreparedStatement) statement);")]),s._v("构建出一个 PreparedStatement 对象")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('public void parameterize(Statement statement) throws SQLException {\n //使⽤ParameterHandler对象来完成对Statement的设值\n parameterHandler.setParameters((PreparedStatement) statement);\n}\n\n---\n public void setParameters(PreparedStatement ps) {\n        ErrorContext.instance().activity("setting parameters").object(mappedStatement.getParameterMap().getId());\n        // 遍历 ParameterMapping 数组\n        List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();\n        if (parameterMappings != null) {\n            for (int i = 0; i < parameterMappings.size(); i++) {\n                // 获得 ParameterMapping 对象\n                ParameterMapping parameterMapping = parameterMappings.get(i);\n                if (parameterMapping.getMode() != ParameterMode.OUT) {\n                    // 获得值\n                    Object value;\n                    String propertyName = parameterMapping.getProperty();\n                    if (boundSql.hasAdditionalParameter(propertyName)) { // issue #448 ask first for additional params\n                        value = boundSql.getAdditionalParameter(propertyName);\n                    } else if (parameterObject == null) {\n                        value = null;\n                    } else if (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) {\n                        value = parameterObject;\n                    } else {\n                        MetaObject metaObject = configuration.newMetaObject(parameterObject);\n                        value = metaObject.getValue(propertyName);\n                    }\n                    // 获得 typeHandler、jdbcType 属性\n                    TypeHandler typeHandler = parameterMapping.getTypeHandler();\n                    JdbcType jdbcType = parameterMapping.getJdbcType();\n                    if (value == null && jdbcType == null) {\n                        jdbcType = configuration.getJdbcTypeForNull();\n                    }\n                    // 设置 ? 占位符的参数\n                    try {\n                        typeHandler.setParameter(ps, i + 1, value, jdbcType);\n                    } catch (TypeException | SQLException e) {\n                        throw new TypeException("Could not set parameters for mapping: " + parameterMapping + ". Cause: " + e, e);\n                    }\n                }\n            }\n        }\n    }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br")])]),e("p",[s._v("从上述的代码可以看到,StatementHandler 的 parameterize(Statement)⽅法调⽤了 ParameterHandler 的 setParameters(statement)⽅法， ParameterHandler 的 setParameters(Statement )⽅法负责根据我们输⼊的参数，对 statement 对象的 ?占位符处进⾏赋值。 进⼊到 StatementHandler 的 List query(Statement statement, ResultHandler resultHandler)⽅法的实现：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("@Override\npublic <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {\n\tPreparedStatement ps = (PreparedStatement) statement;\n\t// 执行查询\n\tps.execute();\n\t// 处理返回结果\n\treturn resultSetHandler.handleResultSets(ps);\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("从上述代码我们可以看出，StatementHandler 的"),e("code",[s._v("List query(Statement statement, ResultHandler resultHandler)")]),s._v("⽅法的实现，是调⽤了 ResultSetHandler 的 handleResultSets(Statement)⽅法。")]),s._v(" "),e("p",[s._v("ResultSetHandler 的 handleResultSets(Statement)⽅法会将 Statement 语句执⾏后⽣成的 resultSet 结 果集转换成 List 结果集")]),s._v(" "),e("h2",{attrs:{id:"_6、resultsethandler"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6、resultsethandler"}},[s._v("#")]),s._v(" 6、ResultSetHandler")]),s._v(" "),e("p",[s._v("处理查询结果。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(' \t//\n    // HANDLE RESULT SETS\n    //\n    // 处理 {@link java.sql.ResultSet} 结果集\n    @Override\n    public List<Object> handleResultSets(Statement stmt) throws SQLException {\n        ErrorContext.instance().activity("handling results").object(mappedStatement.getId());\n\n        // 多 ResultSet 的结果集合，每个 ResultSet 对应一个 Object 对象。而实际上，每个 Object 是 List<Object> 对象。\n        // 在不考虑存储过程的多 ResultSet 的情况，普通的查询，实际就一个 ResultSet ，也就是说，multipleResults 最多就一个元素。\n        final List<Object> multipleResults = new ArrayList<>();\n\n        int resultSetCount = 0;\n        // 获得首个 ResultSet 对象，并封装成 ResultSetWrapper 对象\n        ResultSetWrapper rsw = getFirstResultSet(stmt);\n\n        // 获得 ResultMap 数组\n        // 在不考虑存储过程的多 ResultSet 的情况，普通的查询，实际就一个 ResultSet ，也就是说，resultMaps 就一个元素。\n        List<ResultMap> resultMaps = mappedStatement.getResultMaps();\n        int resultMapCount = resultMaps.size();\n        validateResultMapsCount(rsw, resultMapCount); // 校验\n        while (rsw != null && resultMapCount > resultSetCount) {\n            // 获得 ResultMap 对象\n            ResultMap resultMap = resultMaps.get(resultSetCount);\n            // 处理 ResultSet ，将结果添加到 multipleResults 中\n            handleResultSet(rsw, resultMap, multipleResults, null);\n            // 获得下一个 ResultSet 对象，并封装成 ResultSetWrapper 对象\n            rsw = getNextResultSet(stmt);\n            // 清理\n            cleanUpAfterHandlingResultSet();\n            // resultSetCount ++\n            resultSetCount++;\n        }\n\n        // 因为 `mappedStatement.resultSets` 只在存储过程中使用，本系列暂时不考虑，忽略即可\n        String[] resultSets = mappedStatement.getResultSets();\n        if (resultSets != null) {\n            while (rsw != null && resultSetCount < resultSets.length) {\n                ResultMapping parentMapping = nextResultMaps.get(resultSets[resultSetCount]);\n                if (parentMapping != null) {\n                    String nestedResultMapId = parentMapping.getNestedResultMapId();\n                    ResultMap resultMap = configuration.getResultMap(nestedResultMapId);\n                    handleResultSet(rsw, resultMap, null, parentMapping);\n                }\n                rsw = getNextResultSet(stmt);\n                cleanUpAfterHandlingResultSet();\n                resultSetCount++;\n            }\n        }\n\n        // 如果是 multipleResults 单元素，则取首元素返回\n        return collapseSingleResultList(multipleResults);\n    }\n\n---\n// 处理 ResultSet ，将结果添加到 multipleResults 中\n    private void handleResultSet(ResultSetWrapper rsw, ResultMap resultMap, List<Object> multipleResults, ResultMapping parentMapping) throws SQLException {\n        try {\n            // 暂时忽略，因为只有存储过程的情况，调用该方法，parentMapping 为非空\n            if (parentMapping != null) {\n                handleRowValues(rsw, resultMap, null, RowBounds.DEFAULT, parentMapping);\n            } else {\n                // 如果没有自定义的 resultHandler ，则创建默认的 DefaultResultHandler 对象\n                if (resultHandler == null) {\n                    // 创建 DefaultResultHandler 对象\n                    DefaultResultHandler defaultResultHandler = new DefaultResultHandler(objectFactory);\n                    // 处理 ResultSet 返回的每一行 Row\n                    handleRowValues(rsw, resultMap, defaultResultHandler, rowBounds, null);\n                    // 添加 defaultResultHandler 的处理的结果，到 multipleResults 中\n                    multipleResults.add(defaultResultHandler.getResultList());\n                } else {\n                    // 处理 ResultSet 返回的每一行 Row\n                    handleRowValues(rsw, resultMap, resultHandler, rowBounds, null);\n                }\n            }\n        } finally {\n            // issue #228 (close resultsets)\n            // 关闭 ResultSet 对象\n            closeResultSet(rsw.getResultSet());\n        }\n    }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br"),e("span",{staticClass:"line-number"},[s._v("67")]),e("br"),e("span",{staticClass:"line-number"},[s._v("68")]),e("br"),e("span",{staticClass:"line-number"},[s._v("69")]),e("br"),e("span",{staticClass:"line-number"},[s._v("70")]),e("br"),e("span",{staticClass:"line-number"},[s._v("71")]),e("br"),e("span",{staticClass:"line-number"},[s._v("72")]),e("br"),e("span",{staticClass:"line-number"},[s._v("73")]),e("br"),e("span",{staticClass:"line-number"},[s._v("74")]),e("br"),e("span",{staticClass:"line-number"},[s._v("75")]),e("br"),e("span",{staticClass:"line-number"},[s._v("76")]),e("br"),e("span",{staticClass:"line-number"},[s._v("77")]),e("br"),e("span",{staticClass:"line-number"},[s._v("78")]),e("br"),e("span",{staticClass:"line-number"},[s._v("79")]),e("br"),e("span",{staticClass:"line-number"},[s._v("80")]),e("br"),e("span",{staticClass:"line-number"},[s._v("81")]),e("br")])]),e("h1",{attrs:{id:"mapper-代理方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mapper-代理方式"}},[s._v("#")]),s._v(" Mapper 代理方式:")]),s._v(" "),e("p",[s._v("回顾下写法:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('public static void main(String[] args) {\n     //前三步都相同\n     InputStream inputStream = Resources.getResourceAsStream("sqlMapConfig.xml");\n     SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(inputStream);\n     SqlSession sqlSession = factory.openSession();\n     //这⾥不再调⽤SqlSession的api,⽽是获得了接⼝对象，调⽤接⼝中的⽅法。\n     UserMapper mapper = sqlSession.getMapper(UserMapper.class);\n     List<User> list = mapper.getUserByName("tom");\n }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("思考⼀个问题，通常的 Mapper 接⼝我们都没有实现的⽅法却可以使⽤，是为什么呢？答案很简单动态代理")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('<mappers>\n <mapper class="com.admin4j.mapper.UserMapper"/>\n <package name="com.admin4j.mapper"/>\n</mappers>\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("ul",[e("li",[s._v("当解析 mappers 标签时，它会判断解析到的是 mapper 配置⽂件时，会再将对应配置⽂件中的增删改查标签封装成 MappedStatement 对象，存⼊ mappedStatements 中。(上⽂介绍了)当判断解析到接⼝时，会建此接口对应的 MapperProxyFactory 对象，存⼊ HashMap 中，key =接⼝的字节码对象，value =此接口对应的 MapperProxyFactory 对象")])]),s._v(" "),e("h2",{attrs:{id:"源码剖析-getmapper"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#源码剖析-getmapper"}},[s._v("#")]),s._v(" 源码剖析-getMapper()")]),s._v(" "),e("p",[s._v("进⼊ sqlSession.getMapper(UserMapper.class )中")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('//DefaultSqlSession 中的 getMapper\n public <T> T getMapper(Class<T> type) {\n \treturn configuration.<T>getMapper(type, this);\n }\n\n---\n //configuration 中的给 getMapper\n public <T> T getMapper(Class<T> type, SqlSession sqlSession) {\n\t return mapperRegistry.getMapper(type, sqlSession);\n }\n\n---\n \t//MapperRegistry 中的 getMapper\n    public <T> T getMapper(Class<T> type, SqlSession sqlSession) {\n        // 获得 MapperProxyFactory 对象\n        final MapperProxyFactory<T> mapperProxyFactory = (MapperProxyFactory<T>) knownMappers.get(type);\n        // 不存在，则抛出 BindingException 异常\n        if (mapperProxyFactory == null) {\n            throw new BindingException("Type " + type + " is not known to the MapperRegistry.");\n        }\n        /// 通过动态代理工厂生成实例。\n        try {\n            return mapperProxyFactory.newInstance(sqlSession);\n        } catch (Exception e) {\n            throw new BindingException("Error getting mapper instance. Cause: " + e, e);\n        }\n    }\n\n---\n//MapperProxyFactory 类中的 newInstance ⽅法\n    public T newInstance(SqlSession sqlSession) {\n        // 创建了JDK动态代理的invocationHandler接口的实现类mapperProxy\n        final MapperProxy<T> mapperProxy = new MapperProxy<>(sqlSession, mapperInterface, methodCache);\n        // 调用了重载方法\n        return newInstance(mapperProxy);\n    }\n\n   protected T newInstance(MapperProxy<T> mapperProxy) {\n\n        return (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), new Class[]{mapperInterface}, mapperProxy);\n    }\n\n ---\n    // 构造，传入了SqlSession，说明每个session中的代理对象的不同的！\n    public MapperProxy(SqlSession sqlSession, Class<T> mapperInterface, Map<Method, MapperMethod> methodCache) {\n        this.sqlSession = sqlSession;\n        this.mapperInterface = mapperInterface;\n        this.methodCache = methodCache;\n    }\n\n\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br")])]),e("h2",{attrs:{id:"源码剖析-invoke"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#源码剖析-invoke"}},[s._v("#")]),s._v(" 源码剖析-invoke()")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[s._v("@Override\npublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n    try {\n        // 如果是 Object 定义的方法，直接调用\n        if (Object.class.equals(method.getDeclaringClass())) {\n            return method.invoke(this, args);\n\n        } else if (isDefaultMethod(method)) {\n            return invokeDefaultMethod(proxy, method, args);\n        }\n    } catch (Throwable t) {\n        throw ExceptionUtil.unwrapThrowable(t);\n    }\n    // 获得 MapperMethod 对象\n    final MapperMethod mapperMethod = cachedMapperMethod(method);\n    // 重点在这：MapperMethod最终调用了执行的方法\n    return mapperMethod.execute(sqlSession, args);\n}\n")])])]),e("p",[s._v("进⼊ execute ⽅法进⼊ execute ⽅法")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('public Object execute(SqlSession sqlSession, Object[] args) {\n        Object result;\n        //判断mapper中的方法类型，最终调用的还是SqlSession中的方法\n        switch (command.getType()) {\n            case INSERT: {\n                // 转换参数\n                Object param = method.convertArgsToSqlCommandParam(args);\n                // 执行 INSERT 操作\n                // 转换 rowCount\n                result = rowCountResult(sqlSession.insert(command.getName(), param));\n                break;\n            }\n            case UPDATE: {\n                // 转换参数\n                Object param = method.convertArgsToSqlCommandParam(args);\n                // 转换 rowCount\n                result = rowCountResult(sqlSession.update(command.getName(), param));\n                break;\n            }\n            case DELETE: {\n                // 转换参数\n                Object param = method.convertArgsToSqlCommandParam(args);\n                // 转换 rowCount\n                result = rowCountResult(sqlSession.delete(command.getName(), param));\n                break;\n            }\n            case SELECT:\n                // 无返回，并且有 ResultHandler 方法参数，则将查询的结果，提交给 ResultHandler 进行处理\n                if (method.returnsVoid() && method.hasResultHandler()) {\n                    executeWithResultHandler(sqlSession, args);\n                    result = null;\n                // 执行查询，返回列表\n                } else if (method.returnsMany()) {\n                    result = executeForMany(sqlSession, args);\n                // 执行查询，返回 Map\n                } else if (method.returnsMap()) {\n                    result = executeForMap(sqlSession, args);\n                // 执行查询，返回 Cursor\n                } else if (method.returnsCursor()) {\n                    result = executeForCursor(sqlSession, args);\n                // 执行查询，返回单个对象\n                } else {\n                    // 转换参数\n                    Object param = method.convertArgsToSqlCommandParam(args);\n                    // 查询单条\n                    result = sqlSession.selectOne(command.getName(), param);\n                    if (method.returnsOptional() &&\n                            (result == null || !method.getReturnType().equals(result.getClass()))) {\n                        result = Optional.ofNullable(result);\n                    }\n                }\n                break;\n            case FLUSH:\n                result = sqlSession.flushStatements();\n                break;\n            default:\n                throw new BindingException("Unknown execution method for: " + command.getName());\n        }\n        // 返回结果为 null ，并且返回类型为基本类型，则抛出 BindingException 异常\n        if (result == null && method.getReturnType().isPrimitive() && !method.returnsVoid()) {\n            throw new BindingException("Mapper method \'" + command.getName()\n                    + " attempted to return null from a method with a primitive return type (" + method.getReturnType() + ").");\n        }\n        // 返回结果\n        return result;\n    }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br")])]),e("h1",{attrs:{id:"sqlsession-创建过程总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sqlsession-创建过程总结"}},[s._v("#")]),s._v(" SqlSession 创建过程总结")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdn.net/20170623205900852",alt:""}})]),s._v(" "),e("ol",[e("li",[s._v("首先"),e("code",[s._v("SqlSessionFactoryBuilder")]),s._v("去读取 mybatis 的配置文件，然后 build 一个"),e("code",[s._v("DefaultSqlSessionFactory")]),s._v("，即得到"),e("code",[s._v("SqlSessionFactory")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {\n    try {\n      //通过XMLConfigBuilder解析配置文件，解析的配置相关信息都会封装为一个Configuration对象\n      XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);\n      //然后返回一个DefaultSqlSessionFactory\n      return build(parser.parse());\n    } catch (Exception e) {\n      throw ExceptionFactory.wrapException("Error building SqlSession.", e);\n    } finally {\n      ErrorContext.instance().reset();\n      try {\n        inputStream.close();\n      } catch (IOException e) {\n        // Intentionally ignore. Prefer previous error.\n      }\n    }\n  }\n\n //得到DefaultSqlSessionFactory\n public SqlSessionFactory build(Configuration config) {\n   return new DefaultSqlSessionFactory(config);\n }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br")])]),e("p",[s._v("根据 xml 或者注解生成 MappedStatement 对象放在 Configurationd 对象里属性为 mappedStatements 的一个 HashMap，存储时 key =全限定类名+⽅法名，value =对应的 MappedStatement 对象")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('/**\n * MappedStatement 映射\n *\n * KEY：`${namespace}.${id}`\n */\nprotected final Map<String, MappedStatement> mappedStatements = new StrictMap<>("Mapped Statements collection");\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("ol",{attrs:{start:"2"}},[e("li",[s._v("Configuration 配置类包含大量 new 方法创建各种类")])]),s._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/cca2f536e308d15f4723eccc251cafde.png#pic_center",alt:"image-20230222155019796"}})]),s._v(" "),e("p",[s._v("每创建一个新的对象都会"),e("strong",[s._v("应用插件")]),s._v("生成一个代理对象。以 Executor 为例，")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\t/**\n     * 创建 Executor 对象\n     *\n     * @param transaction 事务对象\n     * @param executorType 执行器类型\n     * @return Executor 对象\n     */\n    public Executor newExecutor(Transaction transaction, ExecutorType executorType) {\n        // 获得执行器类型\n        executorType = executorType == null ? defaultExecutorType : executorType; // 使用默认\n        executorType = executorType == null ? ExecutorType.SIMPLE : executorType; // 使用 ExecutorType.SIMPLE\n        // 创建对应实现的 Executor 对象\n        Executor executor;\n        if (ExecutorType.BATCH == executorType) {\n            executor = new BatchExecutor(this, transaction);\n        } else if (ExecutorType.REUSE == executorType) {\n            executor = new ReuseExecutor(this, transaction);\n        } else {\n            executor = new SimpleExecutor(this, transaction);\n        }\n        // 如果开启缓存，创建 CachingExecutor 对象，进行包装\n        if (cacheEnabled) {\n            executor = new CachingExecutor(executor);\n        }\n        // 应用插件\n        executor = (Executor) interceptorChain.pluginAll(executor);\n        return executor;\n    }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br")])]),e("ol",{attrs:{start:"3"}},[e("li",[e("p",[s._v("获取到"),e("code",[s._v("SqlSessionFactory")]),s._v("之后，就可以利用"),e("code",[s._v("SqlSessionFactory")]),s._v("方法的"),e("code",[s._v("openSession")]),s._v("来获取"),e("code",[s._v("SqlSession")]),s._v("对象了。")]),s._v(" "),e("p",[s._v("得到"),e("code",[s._v("SqlSession")]),s._v("对象之后就可以利用"),e("code",[s._v("SqlSession")]),s._v("内部的方法进行 CRUD 操作了。")])]),s._v(" "),e("li",[e("p",[s._v("注意一点，"),e("code",[s._v("Connection")]),s._v("对象是在"),e("code",[s._v("SqlSession")]),s._v("对象创建之后进行 CURD 操作中创建的。深入查找之后找到在"),e("code",[s._v("ManagedTransaction")]),s._v("类中找到获取"),e("code",[s._v("Connection")]),s._v("对象的关键代码如下：")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('  protected void openConnection() throws SQLException {\n    if (log.isDebugEnabled()) {\n      log.debug("Opening JDBC Connection");\n    }\n    //dataSource 来源有三种，JndiDatasource，PooledDataSource，UnpooledDataSource，配置文件中定义\n    this.connection = this.dataSource.getConnection();\n    if (this.level != null) {\n      this.connection.setTransactionIsolation(this.level.getLevel());\n    }\n  }\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[s._v("SqlSession 每执行完一个 sql 就会关闭链接(放入连接池)。如果不想让他关闭，可以参考"),e("a",{attrs:{href:"https://andyoung.blog.csdn.net/article/details/109848566",target:"_blank",rel:"noopener noreferrer"}},[s._v("MyBatis 千万级数据查询解决方案，避免 OOM"),e("OutboundLink")],1)]),s._v(" "),e("h1",{attrs:{id:"执行-sql-流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行-sql-流程"}},[s._v("#")]),s._v(" 执行 sql 流程")]),s._v(" "),e("ul",[e("li",[e("ol",[e("li",[s._v("调用 SqlSession 的 Executor 执行 sql")])]),s._v(" "),e("ul",[e("li",[e("p",[s._v("根据 ID 获取 MappedStatement,")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("MappedStatement ms = configuration.getMappedStatement(statement);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])])])])]),s._v(" "),e("li",[e("ol",{attrs:{start:"2"}},[e("li",[s._v("Executor 调用 StatementHandler 创建 JDBC 的 Statement（PreparedStatement）连接对象，并且执行 sql 获取到 ResultSetHandler")])])]),s._v(" "),e("li",[e("ol",{attrs:{start:"3"}},[e("li",[s._v("ResultSetHandler 装换成返回的具体对象")])])])]),s._v(" "),e("h1",{attrs:{id:"mybatis-成员层次-职责"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-成员层次-职责"}},[s._v("#")]),s._v(" MyBatis 成员层次&职责")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/c12ce1266375c59ae348554182ca413d.png#pic_center",alt:"图片"}})]),s._v(" "),e("ol",[e("li",[s._v("SqlSession 作为 MyBatis 工作的主要顶层 API，表示和数据库交互的会话，完成必要数据库增删改查功能")]),s._v(" "),e("li",[s._v("Executor MyBatis 执行器，是 MyBatis 调度的核心，负责 SQL 语句的生成和查询缓存的维护")]),s._v(" "),e("li",[s._v("StatementHandler 封装了 JDBC Statement 操作，负责对 JDBCstatement 的操作，如设置参数、将 Statement 结果集转换成 List 集合。")]),s._v(" "),e("li",[s._v("ParameterHandler 负责对用户传递的参数转换成 JDBC Statement 所需要的参数")]),s._v(" "),e("li",[s._v("ResultSetHandler *负责将 JDBC 返回的 ResultSet 结果集对象转换成 List 类型的集合；")]),s._v(" "),e("li",[s._v("TypeHandler 负责 java 数据类型和 jdbc 数据类型之间的映射和转换")]),s._v(" "),e("li",[s._v("MappedStatement MappedStatement 维护了一条<select|update|delete|insert>节点的封")]),s._v(" "),e("li",[s._v("SqlSource 负责根据用户传递的 parameterObject，动态地生成 SQL 语句，将信息封装到 BoundSql 对象中，并返回")]),s._v(" "),e("li",[s._v("BoundSql 表示动态生成的 SQL 语句以及相应的参数信息")]),s._v(" "),e("li",[s._v("Configuration MyBatis 所有的配置信息都维持在 Configuration 对象之中")])]),s._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200923195343993.png#pic_center",alt:"MyBatis 架构与原理到执行流程"}})]),s._v(" "),e("h1",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),e("p",[s._v("https://blog.csdn.net/zwx900102/article/details/108455514")]),s._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/agonie201218/article/details/129157261",target:"_blank",rel:"noopener noreferrer"}},[s._v("JDBC 简单的示例"),e("OutboundLink")],1)]),s._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/andanyoung/source/tree/main/mybatis",target:"_blank",rel:"noopener noreferrer"}},[s._v("手写 mybatis"),e("OutboundLink")],1)]),s._v(" "),e("p",[e("a",{attrs:{href:"https://andyoung.blog.csdn.net/article/details/125059190",target:"_blank",rel:"noopener noreferrer"}},[s._v("mybatis 最常用的 SqlSessionFactory 和 SqlSession，你真的了解吗？"),e("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=t.exports}}]);