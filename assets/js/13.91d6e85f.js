(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{338:function(n,s,a){"use strict";a.r(s);var t=a(4),e=Object(t.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"第-2-章-spring-基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第-2-章-spring-基础"}},[n._v("#")]),n._v(" 第 2 章 Spring 基础")]),n._v(" "),s("p",[n._v("在上一章节中，我们学习了 Java 的注解与反射，在这一章节我们将了解一下 Spring 框架，并学习 Spring 框架中重要的编程思想控制反转（IOC）、面向切面编程（AOP）。语言只是工具，最重要的是编程思想。掌握了编程思想，不仅是 Java，其他编程语言也就容易学习了。\n本章主要涉及的知识点：")]),n._v(" "),s("ul",[s("li",[n._v("Spring 概述：了解 Spring 框架的起源、简介、结构。")]),n._v(" "),s("li",[n._v("依赖注入：什么是依赖注入？依赖注入的好处是什么？")]),n._v(" "),s("li",[n._v("控制反转：什么是控制反转？依赖注入与控制反转的联系是什么？")]),n._v(" "),s("li",[n._v("面向切面编程：什么是面向切面编程？面向切面编程的原理。")]),n._v(" "),s("li",[n._v("实例应用：通过本章 IOC、AOP 示例，演示 Spring 中 IOC、AOP 的简单应用，通过动手实践加深对 IOC、AOP 的理解。")])]),n._v(" "),s("h2",{attrs:{id:"_2-1-spring-框架介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-spring-框架介绍"}},[n._v("#")]),n._v(" 2.1 Spring 框架介绍")]),n._v(" "),s("p",[n._v("本节主要对 Spring 框架进行简单介绍，了解框架起源、框架组成结构，对 Spring 框架有一个大概的认识。官网地址："),s("a",{attrs:{href:"https://spring.io/",target:"_blank",rel:"noopener noreferrer"}},[n._v("https://spring.io/"),s("OutboundLink")],1)]),n._v(" "),s("h3",{attrs:{id:"_2-1-1-起源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-起源"}},[n._v("#")]),n._v(" 2.1.1 起源")]),n._v(" "),s("p",[n._v("首先，追根溯源，了解它是怎么来的。在 Spring 框架出现之前，使用 EJB 开发 J2EE 应用可没那么容易。EJB 要严格地实现各种不同类型的接口，代码复用性低，配置也比较复杂和单调，同样使用 JNDI 进行对象查找的代码也是单调而枯燥，而且 EJB 不容易学，开发效率低。Spring 出现的初衷就是为了解决类似的这些问题。")]),n._v(" "),s("p",[n._v("Spring 最大的目的之一就是使 J2EE 开发更加容易。同时，Spring 不仅仅是一个单层的框架，而是类似一个平台或者生态体系。在这个平台或者生态体系中，可以将 Struts、Hibernate 等单层框架最佳的方式融合在一起，为企业级应用提供完美的解决方案。Spring 的形成，最初来自 Rod Jahnson 所著的一本很有影响力的图书《Expert One-on-One J2EE Design and Development》（出版于 2002 年），就是在这本书中第一次出现了 Spring 的一些核心思想。另外，《Expert One-on-One J2EE Development without EJB》更进一步地阐述了在不使用 EJB 开发 J2EE 企业级应用的一些设计思想和具体的做法。")]),n._v(" "),s("h3",{attrs:{id:"_2-1-2-简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-简介"}},[n._v("#")]),n._v(" 2.1.2 简介")]),n._v(" "),s("p",[n._v("了解了 Spring 框架的起源之后，下面来了解一下 Spring 到底是什么。用一句话概括，Spring 就是一个开源的轻量级的控制反转（IoC）和面向切面（AOP）的容器框架。下面来分析一下这句话。")]),n._v(" "),s("ul",[s("li",[n._v("（1）开源：因为开源、免费，用户无须经过任何人同意即可修改代码，可控制性强，不受他人限制。")]),n._v(" "),s("li",[n._v("（2）轻量级：从大小与开销两方面而言，Spring 都是轻量的。完整的 Spring 框架可以在一个大小只有 1MB 多的 JAR 文件里发布，并且 Spring 所需的处理开销也是微不足道的。此外，Spring 是非侵入式的，Spring 应用中的对象不依赖于 Spring 的特定类。")]),n._v(" "),s("li",[n._v("（3）控制反转：软件设计中通常用耦合度和内聚度作为衡量模块独立程度的标准，划分模块的一个准则就是高内聚低耦合，Spring 通过控制反转技术降低了耦合度。")]),n._v(" "),s("li",[n._v("（4）面向切片：Spring 支持面向切片的编程，允许通过分离应用的业务逻辑与系统级服务进行内聚性的开发，应用对象只需实现业务逻辑，它们并不负责（甚至是意识）其他系统级关注点，例如日志或事务支持。")]),n._v(" "),s("li",[n._v("（5）容器：容器就是用来装东西的。Spring 容器包含并管理应用对象的配置和生命周期。")]),n._v(" "),s("li",[n._v("（6）框架：Spring 可以将简单的组件配置、组合成为复杂的应用，相当于是一个脚手架，开发者要做的就是把组件放进去，实现业务逻辑。")])]),n._v(" "),s("h3",{attrs:{id:"_2-1-3-框架结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-3-框架结构"}},[n._v("#")]),n._v(" 2.1.3 框架结构")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v("Spring框架结构如图2-1所示。\n")])])]),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/031f68512967ecb0cfaef249291f7569.png",alt:"图2-1"}})]),n._v(" "),s("p",[n._v("Spring 由 20 多个模块组成，可以分为核心容器（Core Container）、数据访问／集成（Data Access/Integration）、Web、面向切面编程（AOP，Aspect Oriented Programming）、设备（Instrumentation）、消息发送（Messaging）和测试（Test）。")]),n._v(" "),s("h4",{attrs:{id:"_1-核心容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-核心容器"}},[n._v("#")]),n._v(" 1．核心容器")]),n._v(" "),s("p",[n._v("核心容器包含 spring-core、spring-beans、spring-context、spring-context-support 和 spring-expression（Spring Expression Language）这些模块。\nspring-core 和 spring-beans 构成了框架最基础的部分，包括控制反转和依赖注入功能。\n"),s("a",{attrs:{href:"https://andyoung.blog.csdn.net/article/details/109731834",target:"_blank",rel:"noopener noreferrer"}},[n._v("spring-context"),s("OutboundLink")],1),n._v("是基于 spring-core 和 spring-beans 构建的，提供了一种以框架风格来访问对象的方式，类似于 JNDI 注册。ApplicationContext 接口是 spring-context 的焦点。\nspring-context-support 为集成第三方库（如定时器 Quartz）提供支持。\nspring-expression 提供了一种强大的表达式语言，可以在运行时查询和操作对象。")]),n._v(" "),s("h4",{attrs:{id:"_2-aop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-aop"}},[n._v("#")]),n._v(" 2．AOP")]),n._v(" "),s("p",[n._v("spring-aop 模块提供了一个 AOP 面向切面编程的实现。\nspring-aspects 模块提供与 AspectJ 的集成。\nspring-instrument 模块提供一些类级的工具支持和 ClassLoader 级的实现，用于服务器。spring-instrument-tomcat 模块针对 tomcat 的 instrument 实现。")]),n._v(" "),s("h4",{attrs:{id:"_3-消息发送"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-消息发送"}},[n._v("#")]),n._v(" 3．消息发送")]),n._v(" "),s("p",[n._v("从 Spring 4 开始包含了一个 spring-messaging 模块，对 Spring 集成项目 Message、MessageChannel 和 MessageHandler 进行了重要的抽象，是基于消息发送应用的基础。")]),n._v(" "),s("h4",{attrs:{id:"_4-数据访问-集成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-数据访问-集成"}},[n._v("#")]),n._v(" 4．数据访问／集成")]),n._v(" "),s("p",[n._v("数据访问／集成层包含 JDBC（spring-jdbc）、ORM（spring-orm）、OXM（spring-oxm）、JMS（spring-jms）和事务（spring-tx）模块。\n5．Web\nWeb 层包含 spring-web、spring-webmvc、spring-websocket 和 spring-webflux 模块。其中，spring-web 提供了面向 Web 集成的基本特性，比如文件上传功能。Spring-webmvc 模块包含了 Spring 的 MVC 和 REST Web Service 实现。spring-webflux 是一个新的非堵塞函数式 Reactive Web 框架，可以用来建立异步的、非阻塞、事件驱动的服务，并且扩展性非常好。")]),n._v(" "),s("h4",{attrs:{id:"_6-测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-测试"}},[n._v("#")]),n._v(" 6．测试")]),n._v(" "),s("p",[n._v("Spring-test 模块支持 Spring 组建 JUnit 和 TestNG 的单元测试和集成测试。")]),n._v(" "),s("h2",{attrs:{id:"_2-2-spring-ioc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-spring-ioc"}},[n._v("#")]),n._v(" 2.2 Spring IoC")]),n._v(" "),s("h3",{attrs:{id:"_2-2-1-什么是-spring-ioc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-什么是-spring-ioc"}},[n._v("#")]),n._v(" 2.2.1 什么是 Spring IoC")]),n._v(" "),s("p",[s("strong",[n._v("IoC（Inversion of Control:控制反转）")]),n._v(" 是一种设计思想，而不是一个具体的技术实现。IoC 的思想就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。")]),n._v(" "),s("p",[s("strong",[n._v("为什么叫控制反转？")])]),n._v(" "),s("ul",[s("li",[s("strong",[n._v("控制")]),n._v(" ：指的是对象创建（实例化、管理）的权力")]),n._v(" "),s("li",[s("strong",[n._v("反转")]),n._v(" ：控制权交给外部环境（Spring 框架、IoC 容器）")])]),n._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/f14e44e7418dc41af9867df1a053e293.png",alt:"为什么叫控制反转？"}})]),n._v(" "),s("p",[n._v("将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注入。这样可以很大程度上简化应用的开发，把应用从复杂的依赖关系中解放出来。 IoC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件/注解即可，完全不用考虑对象是如何被创建出来的。")]),n._v(" "),s("p",[n._v("在实际项目中一个 Service 类可能依赖了很多其他的类，假如我们需要实例化这个 Service，你可能要每次都要搞清这个 Service 所有底层类的构造函数，这可能会把人逼疯。如果利用 IoC 的话，你只需要配置好，然后在需要的地方引用就行了，这大大增加了项目的可维护性且降低了开发难度。")]),n._v(" "),s("p",[n._v("在 Spring 中， IoC 容器是 Spring 用来实现 IoC 的载体， IoC 容器实际上就是个 Map（key，value），Map 中存放的是各种对象。")]),n._v(" "),s("p",[n._v("Spring 时代我们一般通过 XML 文件来配置 Bean，后来开发人员觉得 XML 文件来配置不太好，于是 SpringBoot 注解配置就慢慢开始流行起来。")]),n._v(" "),s("h3",{attrs:{id:"_2-2-2-ioc-实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-ioc-实例"}},[n._v("#")]),n._v(" 2.2.2 IOC 实例")]),n._v(" "),s("blockquote",[s("p",[n._v("光说不练假把式，特别是 IT 技术，经常会出现看能看懂但写不出来的尴尬局面。上面分析了一下依赖注入与控制反转，本节将通过示例来加深理解。这里还是使用人与空气的例子。\n人依赖空气，在传统的方式创建两个类：一个是 Person 类，一个是 CleanAir 类。")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('class CleanAir{\n\n    public  String toString(){\n        return "CleanAir";\n    }\n}\n\nclass Person{\n\n    CleanAir air;\n    public Person(CleanAir air){\n        this.air = air;\n    }\n    public  String toString(){\n        return "Person";\n    }\n\n    public void breath(){\n        System.out.println(air.toString());\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br")])]),s("p",[n._v("上面两个类实现了依赖的关系，还有就是注入。在了解注入之前，我们还有一个问题要思考。有这样一句话：世界上唯一不变的就是变化。之前干净的空气不复存在，而 Person 依赖的不再是 CleanAir，而是比 CleanAir 更有内涵的 DirtyAir。如果还是按照上面的方式来，那就需要在增加一个 DirtyAir 类的同时修改 Person。这种强依赖有很大的弊端，一个地方变化引起其他地方变化，而且改变的只是 Air，但 Person 也要改变。怎么样才能尽量减少修改的地方呢？于是面向接口的编程出现了。下面先定义一个接口 IAir，类 CleanAir 实现接口 IAir，在 Person 中不再直接依赖 CleanAir，而是依赖接口 IAir，这样即使是 DirtyAir 也只需要给 Person 修改不同的 Air 就行了。这个注入的过程，利用 Spring 框架只需要改一下配置即可实现。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('interface IAir {}\n\nclass CleanAir implements IAir{\n\n    public  String toString(){\n        return "CleanAir";\n    }\n}\n\nclass DirtyAir implements IAir{\n\n    public  String toString(){\n        return "DirtyAir";\n    }\n}\n\nclass Person{\n\n    IAir air;\n    public Person(IAir air){\n        this.air = air;\n    }\n    public  String toString(){\n        return "Person";\n    }\n\n    public void breath(){\n        System.out.println(air.toString());\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br")])]),s("p",[n._v("上面定义 IAir 接口算是对依赖关系的优化，降低了人与空气的耦合度，但是并没有使用 New 关键字创建对象，只是定义了依赖关系。下面用 Spring 实现注入。")]),n._v(" "),s("ul",[s("li",[n._v("（1）创建一个 Maven Project，archetype 选择 quickstart，如图 2-2 所示。")])]),n._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/5a40214387ddc1092286e131997b7249.png",alt:"图2-2"}})]),n._v(" "),s("p",[n._v("图 2-2")]),n._v(" "),s("ul",[s("li",[n._v("（2）创建之后，既然要使用 Spring 框架来实现注入，那肯定要在项目中引入 Spring 框架，配置 pom.xml，添加依赖。\n① 在 properties 节点配置要引入 Spring 的版本号，这里用的是 5.0.0.RELEASE。")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("  <properties>\n    <spring．version>5.0.0.RELEASE</spring.version>\n  </properties>\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("p",[n._v("② 引入。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v(" <dependencies>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-core</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-context</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n  </dependencies>\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])]),s("ul",[s("li",[s("p",[n._v("（3）实现依赖注入。")]),n._v(" "),s("p",[n._v("前面创建的 IAir 接口、Person 类、CleanAir 类、DirtyAir 类实现了依赖关系，但是怎么让 Spring 框架识别到呢？不可能把各个类创建好就结束了，还需要进行配置才能让 Spring 知道哪些是组件。这里对 Person 类、CleanAir 类、DirtyAir 类在上面定义的基础上进行修改。")])])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public interface IAir {\n}\n\n@Component\npublic class CleanAir implements IAir {\n    public  String toString(){\n        return "CleanAir";\n    }\n}\n\n@Component\npublic class DirtyAir implements IAir {\n    public  String toString(){\n        return "DirtyAir";\n    }\n}\n\n\n@Component\npublic class Person {\n\n    IAir air;\n    @Autowired //对构造函数进行标注\n    public Person(@Qualifier("dirtyair") IAir air){\n        this.air = air;\n    }\n    public  String toString(){\n        return "Person";\n    }\n\n    public void breath(){\n        System.out.println(air.toString());\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br")])]),s("p",[n._v("在上面的代码中使用了@Component 将类注解成组件，使用@Autowired 将 IAir 类型对象注入 Person 中。CleanAir 类、DirtyAir 类都实现了 IAir 接口，怎么让 Person 具体注入哪个对象呢？使用@Qualifier 关键字来进行区分，这里使用的是 qualifier=dirtyair。同时这些组件定义之后还要告诉 Spring 框架组件位置在哪，所以在 scr/main/resources 下新建了 ApplicationContext.xml 进行配置。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n       xmlns:context="http://www.springframework.org/schema/context"\n       xsi:schemaLocation="http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context\n       http://www.springframework.org/schema/context/spring-context.xsd">\n\n    <context:component-scan base-package="spring.tutorial.chapter2.*" />\n    <bean id="CleanAir" class="spring.tutorial.chapter2.air.impl.CleanAir">\n        <qualifier value="cleanair"/>\n    </bean>\n    <bean id="DirtyAir" class="spring.tutorial.chapter2.air.impl.DirtyAir">\n        <qualifier value="dirtyair"/>\n    </bean>\n    <bean id="person" class="spring.tutorial.chapter2.Person" />\n</beans>\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br")])]),s("ul",[s("li",[n._v("（4）测试。\n在 main 中获取到应用上下文，通过 getBean 方法获取 Person 对象，然后调用 Breath()方法。不了解 ClassPathXmlApplicationContext、getBean 这些方法也没关系，在后面的章节会有详细介绍。")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public class Chapter1\n{\n    public static void main( String[] args )\n    {\n        ApplicationContext context = new ClassPathXmlApplicationContext(new  String[] {\n            "ApplicationContext.xml"\n        });\n        BeanFactory factory = context;\n        Person person = (Person) factory.getBean("person");\n        person.breath();\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])]),s("blockquote",[s("p",[n._v("输出结果：")])]),n._v(" "),s("p",[s("code",[n._v("DirtyAir")])]),n._v(" "),s("p",[n._v("如果想使用 CleanAir 对象，只需要把 Person 类中@Qualifier 注解 value 的值改为 CleanAir 对应的 beanId：cleanair。")]),n._v(" "),s("ul",[s("li",[n._v("（5）小结\n参考上面的示例思考 2.2.1 和 2.2.2 节中的概念，就会发现依赖注入、控制反转其实也不难。理解了依赖注入、控制反转对后面 Spring 框架的学习会有更大的帮助。")])]),n._v(" "),s("h2",{attrs:{id:"_2-3-spring-aop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-spring-aop"}},[n._v("#")]),n._v(" 2.3 Spring AoP")]),n._v(" "),s("p",[n._v("本节主要认识横切、纵切，理解什么是 AOP（Aspect-Oriented Programming，面向切面编程）以及 AOP 的实现原理。在此基础上通过示例动手操作加深理解。")]),n._v(" "),s("h3",{attrs:{id:"_2-3-1-什么是-aop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-什么是-aop"}},[n._v("#")]),n._v(" 2.3.1 什么是 AOP")]),n._v(" "),s("p",[n._v("AOP(Aspect-Oriented Programming:面向切面编程)能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。")]),n._v(" "),s("p",[n._v("Spring AOP 就是基于动态代理的，如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 "),s("strong",[n._v("JDK Proxy")]),n._v("，去创建代理对象，而对于"),s("strong",[n._v("没有实现接口的对象")]),n._v("，就无法使用 JDK Proxy 去进行代理了，这时候 Spring AOP 会使用 "),s("strong",[n._v("Cglib")]),n._v(" 生成一个被代理对象的子类来作为代理，如下图所示：")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/230ae587a322d6e4d09510161987d346.jpeg",alt:""}})]),n._v(" "),s("p",[n._v("当然你也可以使用 "),s("strong",[n._v("AspectJ")]),n._v(" ！Spring AOP 已经集成了 AspectJ ，AspectJ 应该算的上是 Java 生态系统中最完整的 AOP 框架了。")]),n._v(" "),s("p",[n._v("AOP 切面编程设计到的一些专业术语：")]),n._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[n._v("术语")]),n._v(" "),s("th",{staticStyle:{"text-align":"center"}},[n._v("含义")])])]),n._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[n._v("目标(Target)")]),n._v(" "),s("td",{staticStyle:{"text-align":"center"}},[n._v("被通知的对象")])]),n._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[n._v("代理(Proxy)")]),n._v(" "),s("td",{staticStyle:{"text-align":"center"}},[n._v("向目标对象应用通知之后创建的代理对象")])]),n._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[n._v("连接点(JoinPoint)")]),n._v(" "),s("td",{staticStyle:{"text-align":"center"}},[n._v("目标对象的所属类中，定义的所有方法均为连接点")])]),n._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[n._v("切入点(Pointcut)")]),n._v(" "),s("td",{staticStyle:{"text-align":"center"}},[n._v("被切面拦截 / 增强的连接点（切入点一定是连接点，连接点不一定是切入点）")])]),n._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[n._v("通知(Advice)")]),n._v(" "),s("td",{staticStyle:{"text-align":"center"}},[n._v("增强的逻辑 / 代码，也即拦截到目标对象的连接点之后要做的事情")])]),n._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[n._v("切面(Aspect)")]),n._v(" "),s("td",{staticStyle:{"text-align":"center"}},[n._v("切入点(Pointcut)+通知(Advice)")])]),n._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[n._v("Weaving(织入)")]),n._v(" "),s("td",{staticStyle:{"text-align":"center"}},[n._v("将通知应用到目标对象，进而生成代理对象的过程动作")])])])]),n._v(" "),s("h3",{attrs:{id:"_2-3-2-spring-aop-和-aspectj-aop-有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-spring-aop-和-aspectj-aop-有什么区别"}},[n._v("#")]),n._v(" 2.3.2 Spring AOP 和 AspectJ AOP 有什么区别？")]),n._v(" "),s("p",[s("strong",[n._v("Spring AOP 属于运行时增强，而 AspectJ 是编译时增强。")]),n._v(" Spring AOP 基于代理(Proxying)，而 AspectJ 基于字节码操作(Bytecode Manipulation)。")]),n._v(" "),s("p",[n._v("Spring AOP 已经集成了 AspectJ ，AspectJ 应该算的上是 Java 生态系统中最完整的 AOP 框架了。AspectJ 相比于 Spring AOP 功能更加强大，但是 Spring AOP 相对来说更简单，")]),n._v(" "),s("p",[n._v("如果我们的切面比较少，那么两者性能差异不大。但是，当切面太多的话，最好选择 AspectJ ，它比 Spring AOP 快很多。")]),n._v(" "),s("h3",{attrs:{id:"_2-2-3-aspectj-定义的通知类型有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-aspectj-定义的通知类型有哪些"}},[n._v("#")]),n._v(" 2.2.3 AspectJ 定义的通知类型有哪些？")]),n._v(" "),s("ul",[s("li",[s("strong",[n._v("Before")]),n._v("（前置通知）：目标对象的方法调用之前触发")]),n._v(" "),s("li",[s("strong",[n._v("After")]),n._v(" （后置通知）：目标对象的方法调用之后触发")]),n._v(" "),s("li",[s("strong",[n._v("AfterReturning")]),n._v("（返回通知）：目标对象的方法调用完成，在返回结果值之后触发")]),n._v(" "),s("li",[s("strong",[n._v("AfterThrowing")]),n._v("（异常通知） ：目标对象的方法运行中抛出 / 触发异常后触发。AfterReturning 和 AfterThrowing 两者互斥。如果方法调用成功无异常，则会有返回值；如果方法抛出了异常，则不会有返回值。")]),n._v(" "),s("li",[s("strong",[n._v("Around")]),n._v(" （环绕通知）：编程式控制目标对象的方法调用。环绕通知是所有通知类型中可操作范围最大的一种，因为它可以直接拿到目标对象，以及要执行的方法，所以环绕通知可以任意的在目标对象的方法调用前后搞事，甚至不调用目标对象的方法")])]),n._v(" "),s("h3",{attrs:{id:"_2-3-4-多个切面的执行顺序如何控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-4-多个切面的执行顺序如何控制"}},[n._v("#")]),n._v(" 2.3.4 多个切面的执行顺序如何控制？")]),n._v(" "),s("p",[n._v("1、通常使用"),s("code",[n._v("@Order")]),n._v(" 注解直接定义切面顺序")]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 值越小优先级越高")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[n._v("@Order")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[n._v("@Component")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[n._v("@Aspect")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("public")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("class")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("LoggingAspect")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("implements")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Ordered")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[s("strong",[n._v("2、实现"),s("code",[n._v("Ordered")]),n._v(" 接口重写 "),s("code",[n._v("getOrder")]),n._v(" 方法。")])]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[n._v("@Component")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[n._v("@Aspect")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("public")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("class")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("LoggingAspect")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("implements")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Ordered")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// ....")]),n._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[n._v("@Override")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("public")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("int")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("getOrder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 返回值越小优先级越高")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("return")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])]),s("h3",{attrs:{id:"_2-3-5-aop-原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-5-aop-原理"}},[n._v("#")]),n._v(" 2.3.5 AOP 原理")]),n._v(" "),s("p",[n._v("AOP 实际上是由目标类的代理类实现的。AOP 代理其实是由 AOP 框架动态生成的一个对象，该对象可作为目标对象使用。AOP 代理包含了目标对象的全部方法（见图 2-3），但 AOP 代理中的方法与目标对象的方法存在差异，AOP 方法在特定切入点添加了增强处理，并回调了目标对象的方法。")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/dd6f5be29662380983b819737ac4cefe.png",alt:"image-20201113011738068"}})]),n._v(" "),s("p",[n._v("图 2-3\n由于是代理实现 AOP，因此有必要学习一下代理。下面通过实例一步一步地了解静态代理和动态代理。新建一个 ServiceImplA 类，实现 IService 接口，想在调用 service 方法前后增加日志打印或为 service 方法增加 try catch，那么该怎么做呢？")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('package spring.tutorial.chapter2.AOP;\n\npublic interface IService {\n    public void service(String name) throws Exception;\n}\n\npackage spring.tutorial.chapter2.AOP.impl;\n\npublic class ServiceImplA implements IService {\n\n    @Override\n    public void service(String name) throws Exception {\n        System.out.println("ServiceImplA name"+name);\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br")])]),s("h4",{attrs:{id:"_1-在每处调用的地方增加日志和-try-catch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-在每处调用的地方增加日志和-try-catch"}},[n._v("#")]),n._v(" 1．在每处调用的地方增加日志和 try catch")]),n._v(" "),s("p",[n._v("这也是一种方法，但缺点是很明显的，就是每处都要更改，量也会很大，显然不可取。这里是每个点都要加，一个方法可能被调用多处，就要写多次。而且以后再进行修改时也不方便，每个地方都要修改。")]),n._v(" "),s("h4",{attrs:{id:"_2-代理模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-代理模式"}},[n._v("#")]),n._v(" 2．代理模式")]),n._v(" "),s("p",[n._v("代理模式又分为动态代理模式和静态代理模式。")]),n._v(" "),s("ul",[s("li",[n._v("（1）静态代理\n静态代理关键是在代理对象和目标对象实现共同的接口，并且代理对象持有目标对象的引用。这里用类 ProxyServiceA 来实现 IService 接口，同时将实现 IService 接口的对象作为一个属性。")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('package spring.tutorial.chapter2.AOP.impl;\n\nimport spring.tutorial.chapter2.AOP.IService;\n\npublic class ProxyServiceA implements IService {\n\n    private IService service;\n    public ProxyServiceA(IService service){\n        this.service = service;\n    }\n    @Override\n    public void service(String name) throws Exception {\n        System.out.println("log start");\n        try {\n            service.service(name);\n        }catch (Exception e){\n            throw e;\n        }\n        System.out.println("log end");\n    }\n\n  public static void main(String[] args) throws Exception {\n      IService service = new ServiceImplA();\n      service= new ProxyServiceA(service);\n      service.service("CYW");\n  }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br")])]),s("blockquote",[s("p",[n._v("输出结果：")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("log start\nServiceImplA nameCYW\nlog end\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br")])]),s("p",[n._v("有了 ProxyServiceA 之后，打印日志和增加 try-catch 只需放在 ProxyServiceA 类里面，便于后续修改，比如现在打印日志是输出在操作台的，哪天需要输入到日志文件时也只需修改 ProxyServiceA 中的打印操作即可。但问题来了：项目中的接口可不止一个，可能会有很多，而且每个接口中的方法也会有好多，这样一个一个地增加也是问题，于是有了动态代理。")]),n._v(" "),s("ul",[s("li",[n._v("（2）动态代理\n在 Java 的动态代理机制中，有两个重要的类或接口：一个是 InvocationHandler(Interface)，另一个是 Proxy(Class)。这一个类和接口是实现动态代理所必须用到的")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('package spring.tutorial.chapter2.AOP.impl;\n\npublic class DynaProxyService implements InvocationHandler {\n    private Object target;//目标对象\n\n    public  Object bind(Object object){\n        this.target = object;\n        //生产动态代理对象\n        Object obj = Proxy.newProxyInstance(this.target.getClass().getClassLoader(), this.target.getClass().getInterfaces(), this);\n        return  obj;\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        Object result = null;\n        System.out.println("method:"+ method);\n        System.out.println("args:"+ args);\n        System.out.println("target:"+ this.target);\n        System.out.println("log start");\n        try {\n             result = method.invoke(this.target, args);\n        }catch (Exception e){\n            throw e;\n        }\n        System.out.println("log end");\n        return  result;\n    }\n\n    public static void main(String[] args) throws Exception {\n        IService service = (IService) new DynaProxyService().bind(new ServiceImplA());\n        service.service("CYM");\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br")])]),s("blockquote",[s("p",[n._v("输出结果")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("method:public abstract void spring.tutorial.chapter2.AOP.IService.service(java.lang.String) throws java.lang.Exception\nargs:[Ljava.lang.Object;@1d44bcfa\ntarget:spring.tutorial.chapter2.AOP.impl.ServiceImplA@266474c2\nlog start\nServiceImplA nameCYM\nlog end\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])]),s("p",[n._v("通过 Proxy.newProxyInstance()生成的动态代理对象 A 都会与实现 InvocationHandler 接口的对象 B 关联，动态代理对象 A 调用目标对象方法时都会变成调用 B 中的 invoke 方法。在 invoke 方法中织入增强处理，并通过反射回调目标对象方法。在本例中，通过 bind()生成目标对象 ServiceImplA 的动态代理对象 A，A 关联了实现 InvocationHandler 接口对象的 DynaProxyServiceA，当动态代理对象 A 调用目标对象方法时会执行 DynaProxyServiceA 的 invoke 方法，增加 try-catch、打印日志，并回调目标对象的方法。\n与前面的静态代理比较发现，动态代理不用再为每个接口手动创建代理类，其他对象只要与 InvocationHandler 接口对象 bind，就能获得该 InvocationHandler 接口对象的织入增强。")]),n._v(" "),s("h2",{attrs:{id:"_2-4-小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-小结"}},[n._v("#")]),n._v(" 2.4 小结")]),n._v(" "),s("p",[n._v("我们回顾一下这一章节的主要内容，主要了解了 Spring 框架，学习了 IOC、AOP。在 Spring 框架部分，了解了框架的来源、七大模块。在 IOC 部分，介绍了依赖注入、控制反转以及两者的区别，以人与空气为例，使用 Spring 框架演示什么是依赖注入，也对 Spring 有一个大概的认识。在 AOP 部分，主要介绍了横切和纵切的概念、AOP 的概念，并通过实例来了解 AOP 的原理。")]),n._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[n._v("#")]),n._v(" 参考")]),n._v(" "),s("p",[s("a",{attrs:{href:"https://blog.csdn.net/agonie201218/article/details/109731834",target:"_blank",rel:"noopener noreferrer"}},[n._v("Spring Context 你真的懂了吗"),s("OutboundLink")],1)]),n._v(" "),s("p",[n._v("https://www.cnblogs.com/deveypf/p/11406940.html")]),n._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/andanyoung/spring-tutorial",target:"_blank",rel:"noopener noreferrer"}},[n._v("源码下载"),s("OutboundLink")],1)]),n._v(" "),s("p",[s("a",{attrs:{href:"https://javadoop.com/post/spring-ioc",target:"_blank",rel:"noopener noreferrer"}},[n._v("Spring IOC 容器源码分析"),s("OutboundLink")],1)]),n._v(" "),s("p",[n._v("["),s("a",{attrs:{href:"https://www.cnblogs.com/zrtqsk/p/3735273.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("Spring Bean 的生命周期（非常详细）"),s("OutboundLink")],1),n._v("](https://www.cnblogs.com/zrtqsk/p/3735273.html)")])])}),[],!1,null,null,null);s.default=e.exports}}]);