(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{1505:function(s,a,n){"use strict";n.r(a);var r=n(4),e=Object(r.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h3",{attrs:{id:"第-3-章-kafka-生产者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-3-章-kafka-生产者"}},[s._v("#")]),s._v(" 第 3 章 Kafka 生产者")]),s._v(" "),a("h2",{attrs:{id:"_3-1-生产者消息发送流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-生产者消息发送流程"}},[s._v("#")]),s._v(" 3.1 生产者消息发送流程")]),s._v(" "),a("h3",{attrs:{id:"_3-1-1-发送原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-发送原理"}},[s._v("#")]),s._v(" 3.1.1 发送原理")]),s._v(" "),a("p",[s._v("在消息发送的过程中，涉及到了"),a("strong",[s._v("两个线程——main 线程和 Sender 线程")]),s._v("。在 main 线程 中创建了一个"),a("strong",[s._v("双端队列 RecordAccumulator")]),s._v("。main 线程将消息发送给 RecordAccumulator， Sender 线程不断从 RecordAccumulator 中拉取消息发送到 Kafka Broker。")]),s._v(" "),a("p",[a("img",{attrs:{src:n(257),alt:"发送流程"}}),s._v("\\")]),s._v(" "),a("h3",{attrs:{id:"_3-1-2-生产者重要参数列表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-生产者重要参数列表"}},[s._v("#")]),s._v(" 3.1.2 生产者重要参数列表")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("参数名称")]),s._v(" "),a("th",[s._v("描述")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("bootstrap.servers")]),s._v(" "),a("td",[s._v("生产者连接集群所需的 broker 地 址清单 。 例 如 hadoop102:9092,hadoop103:9092,hadoop104:9092，可以设置 1 个或者多个，中间用逗号隔开。注意这里并"),a("strong",[s._v("非需要所有的 broker 地址")]),s._v("，因为生产者从给定的 broker 里查找到其他 broker 信息。")])]),s._v(" "),a("tr",[a("td",[s._v("key.serializer 和 value.serializer")]),s._v(" "),a("td",[s._v("指定发送消息的 key 和 value 的序列化类型。一定要写 全类名。")])]),s._v(" "),a("tr",[a("td",[s._v("buffer.memory")]),s._v(" "),a("td",[s._v("RecordAccumulator 缓冲区总大小，"),a("strong",[s._v("默认 32m。")])])]),s._v(" "),a("tr",[a("td",[s._v("batch.size")]),s._v(" "),a("td",[s._v("缓冲区一批数据最大值，默认 16k。适当增加该值，可 以提高吞吐量，但是如果该值设置太大，会导致数据 传输延迟增加。")])]),s._v(" "),a("tr",[a("td",[s._v("linger.ms")]),s._v(" "),a("td",[s._v("如果数据迟迟未达到 batch.size，sender 等待 linger.time 之后就会发送数据。单位 ms，"),a("strong",[s._v("默认值是 0ms")]),s._v("，表示没有延迟。生产环境建议该值大小为 5-100ms 之间。")])]),s._v(" "),a("tr",[a("td",[s._v("acks")]),s._v(" "),a("td",[s._v("0：生产者发送过来的数据，不需要等数据落盘应答。 1：生产者发送过来的数据，Leader 收到数据后应答。 -1（all）：生产者发送过来的数据，Leader+和 isr 队列里面的所有节点收齐数据后应答。"),a("strong",[s._v("默认值是-1，-1 和 all 是等价的。")])])]),s._v(" "),a("tr",[a("td",[s._v("max.in.flight.requests.per.connection")]),s._v(" "),a("td",[s._v("允许最多没有返回 ack 的次数，"),a("strong",[s._v("默认为 5")]),s._v("，开启幂等性要保证该值是 1-5 的数字。")])]),s._v(" "),a("tr",[a("td",[s._v("retries")]),s._v(" "),a("td",[s._v("当消息发送出现错误的时候，系统会重发消息。retries 表示重试次数。"),a("strong",[s._v("默认是 int 最大值，2147483647")]),s._v("。 如果设置了重试，还想保证消息的有序性，需要设置 MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION=1 否则在重试此失败消息的时候，其他的消息可能发送成功了。")])]),s._v(" "),a("tr",[a("td",[s._v("retry.backoff.ms")]),s._v(" "),a("td",[s._v("两次重试之间的时间间隔，默认是 100ms。")])]),s._v(" "),a("tr",[a("td",[s._v("enable.idempotence")]),s._v(" "),a("td",[s._v("是否开启幂等性，"),a("strong",[s._v("默认 true")]),s._v("，开启幂等性。")])]),s._v(" "),a("tr",[a("td",[s._v("compression.type")]),s._v(" "),a("td",[s._v("生产者发送的所有数据的压缩方式。"),a("strong",[s._v("默认是 none")]),s._v("，也就是不压缩。 支持压缩类型："),a("strong",[s._v("none、gzip、snappy、lz4 和 zstd。")])])])])]),s._v(" "),a("h3",{attrs:{id:"_3-2-异步发送-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-异步发送-api"}},[s._v("#")]),s._v(" 3.2 异步发送 API")]),s._v(" "),a("h3",{attrs:{id:"_3-2-1-普通异步发送"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-普通异步发送"}},[s._v("#")]),s._v(" 3.2.1 普通异步发送")]),s._v(" "),a("h4",{attrs:{id:"_1-需求-创建-kafka-生产者-采用异步的方式发送到-kafka-broker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-需求-创建-kafka-生产者-采用异步的方式发送到-kafka-broker"}},[s._v("#")]),s._v(" 1）需求：创建 Kafka 生产者，采用异步的方式发送到 Kafka Broker")]),s._v(" "),a("p",[a("img",{attrs:{src:n(977),alt:"异步发送流程"}})]),s._v(" "),a("h4",{attrs:{id:"_2-代码编写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-代码编写"}},[s._v("#")]),s._v(" 2）代码编写")]),s._v(" "),a("p",[s._v("（1）创建工程 kafka")]),s._v(" "),a("p",[s._v("（2）导入依赖")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\t\t<dependency>\n            <groupId>org.apache.kafka</groupId>\n            <artifactId>kafka-clients</artifactId>\n            <version>3.0.0</version>\n        </dependency>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("（3）创建包名：com.andanyoung.kafka.producer")]),s._v(" "),a("p",[s._v("（4）编写不带回调函数的 API 代码")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('import org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.apache.kafka.common.serialization.StringSerializer;\n\nimport java.util.Properties;\n\npublic class CustomProducer {\n\n    public static void main(String[] args) {\n\n        // 0 配置\n        Properties properties = new Properties();\n\n        // 连接集群 bootstrap.servers\n        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,"hadoop102:9092,hadoop103:9092");\n\n        // 指定对应的key和value的序列化类型 key.serializer\n        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,StringSerializer.class.getName());\n\n        // 1 创建kafka生产者对象\n        // "" hello\n        KafkaProducer<String, String> kafkaProducer = new KafkaProducer<>(properties);\n\n        // 2 发送数据\n        for (int i = 0; i < 5; i++) {\n            kafkaProducer.send(new ProducerRecord<>("first","andanyoung"+i));\n        }\n\n        // 3 关闭资源\n        kafkaProducer.close();\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br")])]),a("h3",{attrs:{id:"_3-2-2-带回调函数的异步发送"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-带回调函数的异步发送"}},[s._v("#")]),s._v(" 3.2.2 带回调函数的异步发送")]),s._v(" "),a("p",[s._v("回调函数会在 producer 收到 ack 时调用，为异步调用，该方法有两个参数，分别是元数据信息（RecordMetadata）和异常信息（Exception），如果 Exception 为 null，说明消息发送成功，如果 Exception 不为 null，说明消息发送失败。")]),s._v(" "),a("blockquote",[a("p",[s._v("注意：消息发送失败会自动重试，不需要我们在回调函数中手动重试")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class CustomProducerCallback {\n\n    public static void main(String[] args) throws InterruptedException {\n\n        // 0 配置\n        Properties properties = new Properties();\n\n        // 连接集群 bootstrap.servers\n        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,"hadoop102:9092,hadoop103:9092");\n\n        // 指定对应的key和value的序列化类型 key.serializer\n//        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,"org.apache.kafka.common.serialization.StringSerializer");\n        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,StringSerializer.class.getName());\n\n        // 1 创建kafka生产者对象\n        // "" hello\n        KafkaProducer<String, String> kafkaProducer = new KafkaProducer<>(properties);\n\n        // 2 发送数据\n        for (int i = 0; i < 500; i++) {\n            kafkaProducer.send(new ProducerRecord<>("first", "andanyoung" + i), new Callback() {\n                @Override\n                public void onCompletion(RecordMetadata metadata, Exception exception) {\n\n                    if (exception == null){\n                        System.out.println("主题： "+metadata.topic() + " 分区： "+ metadata.partition());\n                    }\n                }\n            });\n\n            Thread.sleep(2);\n        }\n\n        // 3 关闭资源\n        kafkaProducer.close();\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br")])]),a("h3",{attrs:{id:"_3-3-同步发送-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-同步发送-api"}},[s._v("#")]),s._v(" 3.3 同步发送 API")]),s._v(" "),a("p",[s._v("只需在异步发送的基础上，再调用一下 get()方法即可。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class CustomProducerSync {\n\n    public static void main(String[] args) throws ExecutionException, InterruptedException {\n\n        // 0 配置\n        Properties properties = new Properties();\n\n        // 连接集群 bootstrap.servers\n        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,"hadoop102:9092,hadoop103:9092");\n\n        // 指定对应的key和value的序列化类型 key.serializer\n//        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,"org.apache.kafka.common.serialization.StringSerializer");\n        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,StringSerializer.class.getName());\n\n        // 1 创建kafka生产者对象\n        // "" hello\n        KafkaProducer<String, String> kafkaProducer = new KafkaProducer<>(properties);\n\n        // 2 发送数据\n        for (int i = 0; i < 5; i++) {\n            kafkaProducer.send(new ProducerRecord<>("first","andanyoung"+i)).get();\n        }\n\n        // 3 关闭资源\n        kafkaProducer.close();\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])]),a("h2",{attrs:{id:"_3-4-生产者分区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-生产者分区"}},[s._v("#")]),s._v(" 3.4 生产者分区")]),s._v(" "),a("h3",{attrs:{id:"_3-4-1-分区好处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-1-分区好处"}},[s._v("#")]),s._v(" 3.4.1 分区好处")]),s._v(" "),a("p",[s._v("（1）"),a("strong",[s._v("便于合理使用存储资源")]),s._v("，每个 Partition 在一个 Broker 上存储，可以把海量的数据按照分区切割成一块一块数据存储在多台 Broker 上。合理控制分区的任务，可以实现负载均衡的效果。")]),s._v(" "),a("p",[s._v("（2）"),a("strong",[s._v("提高并行度")]),s._v("，生产者可以以分区为单位发送数据；消费者可以以分区为单位进行"),a("strong",[s._v("消费数据")]),s._v("。")]),s._v(" "),a("p",[a("img",{attrs:{src:n(978),alt:"Kafka 分区好处"}})]),s._v(" "),a("h3",{attrs:{id:"_3-4-2-生产者发送消息的分区策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-2-生产者发送消息的分区策略"}},[s._v("#")]),s._v(" 3.4.2 生产者发送消息的分区策略")]),s._v(" "),a("h4",{attrs:{id:"_1-默认的分区器-defaultpartitioner"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-默认的分区器-defaultpartitioner"}},[s._v("#")]),s._v(" 1）默认的分区器 DefaultPartitioner")]),s._v(" "),a("p",[s._v("在 IDEA 中 ctrl +n，全局查找 DefaultPartitioner。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/**\n* The default partitioning strategy:\n* <ul>\n* \t<li>If a partition is specified in the record, use it\n* \t<li>If no partition is specified but a key is present choose a partition based on a hash of the key\n* \t<li>If no partition or key is present choose the sticky partition that changes when the batch is full.\n*\n* See KIP-480 for details about sticky partitioning.\n*/\npublic class DefaultPartitioner implements Partitioner {\n\t … …\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[a("img",{attrs:{src:n(979),alt:"Kafka 原则"}})]),s._v(" "),a("h4",{attrs:{id:"_2-案例一"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-案例一"}},[s._v("#")]),s._v(" 2）案例一")]),s._v(" "),a("p",[s._v("将数据发往指定 partition 的情况下，例如，将所有数据发往分区 1 中。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class CustomProducerCallbackPartitions {\n\n    public static void main(String[] args) throws InterruptedException {\n\n        // 0 配置\n        Properties properties = new Properties();\n\n        // 连接集群 bootstrap.servers\n        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,"hadoop102:9092,hadoop103:9092");\n\n        // 指定对应的key和value的序列化类型 key.serializer\n//        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,"org.apache.kafka.common.serialization.StringSerializer");\n        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,StringSerializer.class.getName());\n\n        // 1 创建kafka生产者对象\n        // "" hello\n        KafkaProducer<String, String> kafkaProducer = new KafkaProducer<>(properties);\n\n        // 2 发送数据\n        for (int i = 0; i < 5; i++) {\n            kafkaProducer.send(new ProducerRecord<>("first", 1,"","hello" + i), new Callback() {\n                @Override\n                public void onCompletion(RecordMetadata metadata, Exception exception) {\n\n                    if (exception == null){\n                        System.out.println("主题： "+metadata.topic() + " 分区： "+ metadata.partition());\n                    }\n                }\n            });\n\n            Thread.sleep(2);\n        }\n\n        // 3 关闭资源\n        kafkaProducer.close();\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br")])]),a("h4",{attrs:{id:"_3-案例二"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-案例二"}},[s._v("#")]),s._v(" 3）案例二")]),s._v(" "),a("p",[s._v("没有指明 partition 值但有 key 的情况下，将 key 的 hash 值与 topic 的 partition 数进行取余得到 partition 值。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class CustomProducerCallback {\n\n    public static void main(String[] args) throws InterruptedException {\n\n        // 0 配置\n        Properties properties = new Properties();\n\n        // 连接集群 bootstrap.servers\n        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,"hadoop102:9092,hadoop103:9092");\n\n        // 指定对应的key和value的序列化类型 key.serializer\n//        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,"org.apache.kafka.common.serialization.StringSerializer");\n        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,StringSerializer.class.getName());\n\n        // 1 创建kafka生产者对象\n        // "" hello\n        KafkaProducer<String, String> kafkaProducer = new KafkaProducer<>(properties);\n\n        // 2 发送数据\n        for (int i = 0; i < 500; i++) {\n            kafkaProducer.send(new ProducerRecord<>("first", "andanyoung" + i), new Callback() {\n                @Override\n                public void onCompletion(RecordMetadata metadata, Exception exception) {\n\n                    if (exception == null){\n                        System.out.println("主题： "+metadata.topic() + " 分区： "+ metadata.partition());\n                    }\n                }\n            });\n\n            Thread.sleep(2);\n        }\n\n        // 3 关闭资源\n        kafkaProducer.close();\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br")])]),a("h3",{attrs:{id:"_3-4-3-自定义分区器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-3-自定义分区器"}},[s._v("#")]),s._v(" 3.4.3 自定义分区器")]),s._v(" "),a("p",[s._v("如果研发人员可以根据企业需求，自己重新实现分区器。")]),s._v(" "),a("h4",{attrs:{id:"_1-需求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-需求"}},[s._v("#")]),s._v(" 1）需求")]),s._v(" "),a("p",[s._v("例如我们实现一个分区器实现，发送过来的数据中如果包含 andanyoung，就发往 0 号分区， 不包含 andanyoung，就发往 1 号分区。")]),s._v(" "),a("h4",{attrs:{id:"_2-实现步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现步骤"}},[s._v("#")]),s._v(" 2）实现步骤")]),s._v(" "),a("p",[s._v("（1）定义类实现 Partitioner 接口。")]),s._v(" "),a("p",[s._v("（2）重写 partition()方法。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class MyPartitioner implements Partitioner {\n    @Override\n    public int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster) {\n\n        // 获取数据 andanyoung  hello\n        String msgValues = value.toString();\n\n        int partition;\n\n        if (msgValues.contains("andanyoung")){\n            partition = 0;\n        }else {\n            partition = 1;\n        }\n\n        return partition;\n    }\n\n    @Override\n    public void close() {\n\n    }\n\n    @Override\n    public void configure(Map<String, ?> configs) {\n\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])]),a("p",[s._v("（3）使用分区器的方法，在生产者的配置中添加分区器参数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('\npublic class CustomProducerCallbackPartitions {\n\n    public static void main(String[] args) throws InterruptedException {\n\n        // 0 配置\n        Properties properties = new Properties();\n\n        // 连接集群 bootstrap.servers\n        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,"hadoop102:9092,hadoop103:9092");\n\n        // 指定对应的key和value的序列化类型 key.serializer\n//        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,"org.apache.kafka.common.serialization.StringSerializer");\n        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,StringSerializer.class.getName());\n\n        // 关联自定义分区器\n        properties.put(ProducerConfig.PARTITIONER_CLASS_CONFIG,"com.andanyoung.kafka.producer.MyPartitioner");\n\n        // 1 创建kafka生产者对象\n        // "" hello\n        KafkaProducer<String, String> kafkaProducer = new KafkaProducer<>(properties);\n\n        // 2 发送数据\n        for (int i = 0; i < 5; i++) {\n            kafkaProducer.send(new ProducerRecord<>("first", 1,"","hello" + i), new Callback() {\n                @Override\n                public void onCompletion(RecordMetadata metadata, Exception exception) {\n\n                    if (exception == null){\n                        System.out.println("主题： "+metadata.topic() + " 分区： "+ metadata.partition());\n                    }\n                }\n            });\n\n            Thread.sleep(2);\n        }\n\n        // 3 关闭资源\n        kafkaProducer.close();\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br")])]),a("h2",{attrs:{id:"_3-5-生产经验-生产者如何提高吞吐量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-生产经验-生产者如何提高吞吐量"}},[s._v("#")]),s._v(" 3.5 生产经验——生产者如何提高吞吐量")]),s._v(" "),a("ul",[a("li",[s._v("batch.size：批次大小，默认 16k")]),s._v(" "),a("li",[s._v("linger.ms：等待时间，修改为 5-100ms")]),s._v(" "),a("li",[s._v("compression.type：压缩 snappy")]),s._v(" "),a("li",[s._v("RecordAccumulator：缓冲区大小，修改为 64m")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class CustomProducerParameters {\n\n    public static void main(String[] args) {\n\n        // 0 配置\n        Properties properties = new Properties();\n\n        // 连接kafka集群\n        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,"hadoop102:9092,hadoop103:9092");\n\n        // 序列化\n        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,StringSerializer.class.getName());\n\n        // 缓冲区大小\n        properties.put(ProducerConfig.BUFFER_MEMORY_CONFIG,33554432);\n\n        // 批次大小\n        properties.put(ProducerConfig.BATCH_SIZE_CONFIG,16384);\n\n        // linger.ms\n        properties.put(ProducerConfig.LINGER_MS_CONFIG, 1);\n\n        // 压缩\n        properties.put(ProducerConfig.COMPRESSION_TYPE_CONFIG,"snappy");\n\n\n        // 1 创建生产者\n        KafkaProducer<String, String> kafkaProducer = new KafkaProducer<>(properties);\n\n        // 2 发送数据\n        for (int i = 0; i < 5; i++) {\n            kafkaProducer.send(new ProducerRecord<>("first","andanyoung"+i));\n        }\n\n        // 3 关闭资源\n        kafkaProducer.close();\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br")])]),a("h2",{attrs:{id:"_3-6-生产经验-数据可靠性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-生产经验-数据可靠性"}},[s._v("#")]),s._v(" 3.6 生产经验——数据可靠性")]),s._v(" "),a("h4",{attrs:{id:"_1-ack-应答原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-ack-应答原理"}},[s._v("#")]),s._v(" 1）ack 应答原理")]),s._v(" "),a("p",[a("img",{attrs:{src:n(980),alt:"ACK应答级别"}})]),s._v(" "),a("p",[a("img",{attrs:{src:n(981),alt:"ACK应答级别"}})]),s._v(" "),a("p",[a("strong",[s._v("可靠性总结：")])]),s._v(" "),a("ul",[a("li",[s._v("acks=0，生产者发送过来数据就不管了，可靠性差，效率高；")]),s._v(" "),a("li",[s._v("acks=1，生产者发送过来数据 Leader 应答，可靠性中等，效率中等；")]),s._v(" "),a("li",[s._v("acks=-1，生产者发送过来数据 Leader 和 ISR 队列里面所有 Follwer 应答，可靠性高，效率低；")])]),s._v(" "),a("p",[s._v("在生产环境中，acks=0 很少使用；acks=1，一般用于传输普通日志，允许丢个别数据；acks=-1，一般用于传输和钱相关的数据， 对可靠性要求比较高的场景。")]),s._v(" "),a("p",[s._v("数据重复分析：")]),s._v(" "),a("p",[s._v("acks： -1（all）：生产者发送过来的数据，Leader 和 ISR 队列里面的所有节点收齐数据后应答。")]),s._v(" "),a("p",[a("img",{attrs:{src:n(982),alt:"数据重复分析"}})]),s._v(" "),a("p",[s._v("2）代码配置")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class CustomProducerAcks {\n\n    public static void main(String[] args) {\n\n        // 0 配置\n        Properties properties = new Properties();\n\n        // 连接集群 bootstrap.servers\n        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,"hadoop102:9092,hadoop103:9092");\n\n        // 指定对应的key和value的序列化类型 key.serializer\n//        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,"org.apache.kafka.common.serialization.StringSerializer");\n        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,StringSerializer.class.getName());\n\n        // acks\n        properties.put(ProducerConfig.ACKS_CONFIG,"1");\n\n        // 重试次数\n        properties.put(ProducerConfig.RETRIES_CONFIG,3);\n\n        // 1 创建kafka生产者对象\n        // "" hello\n        KafkaProducer<String, String> kafkaProducer = new KafkaProducer<>(properties);\n\n        // 2 发送数据\n        for (int i = 0; i < 5; i++) {\n            kafkaProducer.send(new ProducerRecord<>("first","andanyoung"+i));\n        }\n\n        // 3 关闭资源\n        kafkaProducer.close();\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br")])]),a("h3",{attrs:{id:"_3-7-生产经验-数据去重"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-生产经验-数据去重"}},[s._v("#")]),s._v(" 3.7 生产经验——数据去重")]),s._v(" "),a("h3",{attrs:{id:"_3-7-1-数据传递语义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-1-数据传递语义"}},[s._v("#")]),s._v(" 3.7.1 数据传递语义")]),s._v(" "),a("ul",[a("li",[s._v("至少一次（At Least Once）= ACK 级别设置为-1 + 分区副本大于等于 2 + ISR 里应答的最小副本数量大于等于 2")]),s._v(" "),a("li",[s._v("最多一次（At Most Once）= ACK 级别设置为 0")]),s._v(" "),a("li",[s._v("精确一次（Exactly Once）：对于一些非常重要的信息，比如和钱相关的数据，要求数据既不能重复也不丢失。")])]),s._v(" "),a("p",[s._v("总结：")]),s._v(" "),a("p",[s._v("At Least Once 可以保证数据不丢失，但是不能保证数据不重复；")]),s._v(" "),a("p",[s._v("At Most Once 可以保证数据不重复，但是不能保证数据不丢失。")]),s._v(" "),a("p",[s._v("Kafka 0.11 版本以后，引入了一项重大特性：幂等性和事务。")]),s._v(" "),a("h3",{attrs:{id:"_3-7-2-幂等性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-2-幂等性"}},[s._v("#")]),s._v(" 3.7.2 幂等性")]),s._v(" "),a("h4",{attrs:{id:"_1-幂等性原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-幂等性原理"}},[s._v("#")]),s._v(" 1）幂等性原理")]),s._v(" "),a("p",[a("strong",[s._v("幂等性")]),s._v("就是指 Producer 不论向 Broker 发送多少次重复数据，Broker 端都只会持久化一条，保证了不重复。")]),s._v(" "),a("p",[s._v("精确一次（Exactly Once） = 幂等性 + 至少一次（ ack=-1 + 分区副本数>=2 + ISR 最小副本数量>=2） 。")]),s._v(" "),a("p",[a("strong",[s._v("重复数据的判断标准")]),s._v("：具有相同主键"),a("code",[s._v("<PID, Partition, SeqNumber>")]),s._v("的消息提交时，Broker 只会持久化一条。其中 PID 是 Kafka 每次重启都会分配一个新的；Partition 表示分区号；发往同一 Partition 的消息会附带 Sequence Number 是单调自增的。 "),a("strong",[s._v("所以幂等性只能保证的是在单分区单会话内不重复")]),s._v("。")]),s._v(" "),a("p",[a("img",{attrs:{src:n(983),alt:"幂等性原理"}})]),s._v(" "),a("h4",{attrs:{id:"_2-如何使用幂等性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-如何使用幂等性"}},[s._v("#")]),s._v(" 2）如何使用幂等性")]),s._v(" "),a("p",[s._v("开启参数 "),a("strong",[s._v("enable.idempotence")]),s._v(" 默认为 true，false 关闭。")]),s._v(" "),a("h2",{attrs:{id:"_3-7-3-生产者事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-3-生产者事务"}},[s._v("#")]),s._v(" 3.7.3 生产者事务")]),s._v(" "),a("h4",{attrs:{id:"_1-kafka-事务原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-kafka-事务原理"}},[s._v("#")]),s._v(" 1）Kafka 事务原理")]),s._v(" "),a("blockquote",[a("p",[s._v("说明：开启事务，必须开启幂等性。")])]),s._v(" "),a("p",[a("img",{attrs:{src:n(984),alt:"Kafka 事务原理"}})]),s._v(" "),a("p",[s._v("2）Kafka 的事务一共有如下 5 个 API")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 1 初始化事务\nvoid initTransactions();\n\n// 2 开启事务\nvoid beginTransaction() throws ProducerFencedException;\n\n// 3 在事务内提交已经消费的偏移量（主要用于消费者）\nvoid sendOffsetsToTransaction(Map<TopicPartition, OffsetAndMetadata> offsets,String consumerGroupId) throws ProducerFencedException;\n\n// 4 提交事务\nvoid commitTransaction() throws ProducerFencedException;\n\n// 5 放弃事务（类似于回滚事务的操作）\nvoid abortTransaction() throws ProducerFencedException;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("3）单个 Producer，使用事务保证消息的仅一次发送")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class CustomProducerTranactions {\n\n    public static void main(String[] args) {\n\n        // 0 配置\n        Properties properties = new Properties();\n\n        // 连接集群 bootstrap.servers\n        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "hadoop102:9092,hadoop103:9092");\n\n        // 指定对应的key和value的序列化类型 key.serializer\n//        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,"org.apache.kafka.common.serialization.StringSerializer");\n        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n\n        // 指定事务id\n        properties.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, "tranactional_id_01");\n\n        // 1 创建kafka生产者对象 事务 id 任意起名\n        // "" hello\n        KafkaProducer<String, String> kafkaProducer = new KafkaProducer<>(properties);\n\n        kafkaProducer.initTransactions();\n\n        kafkaProducer.beginTransaction();\n\n        try {\n            // 2 发送数据\n            for (int i = 0; i < 5; i++) {\n                kafkaProducer.send(new ProducerRecord<>("first", "andanyoung" + i));\n            }\n\n            int i = 1 / 0;\n\n            kafkaProducer.commitTransaction();\n        } catch (Exception e) {\n            kafkaProducer.abortTransaction();\n        } finally {\n            // 3 关闭资源\n            kafkaProducer.close();\n        }\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br")])]),a("h2",{attrs:{id:"_3-8-生产经验-数据有序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-生产经验-数据有序"}},[s._v("#")]),s._v(" 3.8 生产经验——数据有序")]),s._v(" "),a("p",[a("img",{attrs:{src:n(985),alt:"生产经验——数据有序"}})]),s._v(" "),a("h2",{attrs:{id:"_3-9-生产经验-数据乱序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-9-生产经验-数据乱序"}},[s._v("#")]),s._v(" 3.9 生产经验——数据乱序")]),s._v(" "),a("p",[s._v("1）kafka 在 1.x 版本之前保证数据单分区有序，条件如下：")]),s._v(" "),a("p",[s._v("max.in.flight.requests.per.connection=1（不需要考虑是否开启幂等性）。")]),s._v(" "),a("p",[s._v("2）kafka 在 1.x 及以后版本保证数据单分区有序，条件如下：")]),s._v(" "),a("p",[s._v("（1）未开启幂等性")]),s._v(" "),a("p",[s._v("max.in.flight.requests.per.connection 需要设置为 1。")]),s._v(" "),a("p",[s._v("（2）开启幂等性")]),s._v(" "),a("p",[s._v("max.in.flight.requests.per.connection 需要设置小于等于 5。")]),s._v(" "),a("p",[s._v("原因说明：因为在 kafka1.x 以后，启用幂等后，kafka 服务端会缓存 producer 发来的最近 5 个 request 的元数据， 故无论如何，都可以保证最近 5 个 request 的数据都是有序的。")]),s._v(" "),a("p",[a("img",{attrs:{src:n(986),alt:"生产经验——数据乱序"}})]),s._v(" "),a("blockquote",[a("p",[s._v("max.in.flight.requests.per.connection: 该参数指定了生产者在收到服务器响应之前可以发送多少个消息。它的值越高，就会占用越多的内存，不过也会提升吞吐量。把它设为 1 可以保证消息是按照发送的顺序写入服务器的，即使发生了重试。")])])])}),[],!1,null,null,null);a.default=e.exports},257:function(s,a,n){s.exports=n.p+"assets/img/image-20230920224352147.6f8542b5.png"},977:function(s,a,n){s.exports=n.p+"assets/img/image-20230920225146396.6fd5e0c0.png"},978:function(s,a,n){s.exports=n.p+"assets/img/image-20230920225912050.745e50c6.png"},979:function(s,a,n){s.exports=n.p+"assets/img/image-20230920230043076.ff041761.png"},980:function(s,a,n){s.exports=n.p+"assets/img/image-20230920230802562.f40cdf13.png"},981:function(s,a,n){s.exports=n.p+"assets/img/image-20230920230915086.30055681.png"},982:function(s,a,n){s.exports=n.p+"assets/img/image-20230920231231304.ddde5c49.png"},983:function(s,a,n){s.exports=n.p+"assets/img/image-20230920231643580.bdea7caf.png"},984:function(s,a,n){s.exports=n.p+"assets/img/image-20230920231846864.3261b7c4.png"},985:function(s,a,n){s.exports=n.p+"assets/img/image-20230920232140130.7fe3ee78.png"},986:function(s,a,n){s.exports=n.p+"assets/img/image-20230920232401469.8afe6223.png"}}]);