(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{934:function(e,t,n){"use strict";n.r(t);var a=n(4),v=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"传输-transport"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#传输-transport"}},[e._v("#")]),e._v(" 传输(Transport)")]),e._v(" "),t("p",[e._v("在网络中传递的数据总是具有相同的类型：字节。 这些字节流动的细节取决于网络传输，它是一个帮我们抽象 底层数据传输机制的概念，我们不需要关心字节流动的细节，只需要确保字节被可靠的接收和发送。")]),e._v(" "),t("p",[e._v("当我们使用 Java 网络编程时，可能会接触到多种不同的网络 IO 模型，如 NIO，BIO(OIO: Old IO)，AIO 等，我们可能因为 使用这些不同的 API 而遇到问题。 Netty 则为这些不同的 IO 模型实现了一个通用的 API，我们使用这个通用的 API 比直接使用 JDK 提供的 API 要 简单的多，且避免了由于使用不同 API 而带来的问题，大大提高了代码的可读性。 在传输这一部分，我们将主要学习这个通用的 API，以及它与 JDK 之间的对比。")]),e._v(" "),t("h3",{attrs:{id:"传输-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#传输-api"}},[e._v("#")]),e._v(" 传输 API")]),e._v(" "),t("p",[e._v("传输 API 的核心是 Channel(io.netty.Channel，而非 java nio 的 Channel)接口，它被用于所有的 IO 操作。")]),e._v(" "),t("p",[e._v("Channel 结构层次：")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://md7.admin4j.com/blog/20210203192141473.png",alt:"Channel接口层次"}})]),e._v(" "),t("p",[e._v("每个 Channel 都会被分配一个 ChannelPipeline 和 ChannelConfig， ChannelConfig 包含了该 Channel 的所有配置，并允许在运行期间更新它们。")]),e._v(" "),t("p",[e._v("ChannelPipeline 在上面已经介绍过了，它存储了所有用于处理出站和入站数据的 ChannelHandler， 我们可以在运行时根据自己的需求添加或删除 ChannelPipeline 中的 ChannelHandler。")]),e._v(" "),t("p",[e._v("此外，Channel 还有以下方法值得留意：")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("方法名")]),e._v(" "),t("th",[e._v("描述")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("eventLoop")]),e._v(" "),t("td",[e._v("返回当前 Channel 注册到的 EventLoop")])]),e._v(" "),t("tr",[t("td",[e._v("pipeline")]),e._v(" "),t("td",[e._v("返回分配给 Channel 的 ChannelPipeline")])]),e._v(" "),t("tr",[t("td",[e._v("isActive")]),e._v(" "),t("td",[e._v("判断当前 Channel 是活动的，如果是则返回 true。 此处活动的意义依赖于底层的传输，如果底层传输是 TCP Socket，那么客户端与服务端保持连接便是活动的；如果底层传输是 UDP Datagram，那么 Datagram 传输被打开就是活动的。")])]),e._v(" "),t("tr",[t("td",[e._v("localAddress")]),e._v(" "),t("td",[e._v("返回本地 SocketAddress")])]),e._v(" "),t("tr",[t("td",[e._v("remoteAddress")]),e._v(" "),t("td",[e._v("返回远程的 SocketAddress")])]),e._v(" "),t("tr",[t("td",[e._v("write")]),e._v(" "),t("td",[e._v("将数据写入远程主机，数据将会通过 ChannelPipeline 传输")])]),e._v(" "),t("tr",[t("td",[e._v("flush")]),e._v(" "),t("td",[e._v("将之前写入的数据刷新到底层传输")])]),e._v(" "),t("tr",[t("td",[e._v("writeFlush")]),e._v(" "),t("td",[e._v("等同于调用 write 写入数据后再调用 flush 刷新数据")])])])]),e._v(" "),t("h3",{attrs:{id:"netty-内置的传输"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#netty-内置的传输"}},[e._v("#")]),e._v(" Netty 内置的传输")]),e._v(" "),t("p",[e._v("Netty 内置了一些开箱即用的传输，我们上面介绍了传输的核心 API 是 Channel，那么这些已经封装好的 传输也是基于 Channel 的。")]),e._v(" "),t("p",[e._v("Netty 内置 Channel 接口层次：")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://md7.admin4j.com/blog/20210203192214211.png",alt:"Netty内置Channel接口层次"}})]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("名称")]),e._v(" "),t("th",[e._v("包")]),e._v(" "),t("th",[e._v("描述")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("NIO")]),e._v(" "),t("td",[e._v("io.netty.channel.socket.nio")]),e._v(" "),t("td",[e._v("NIO Channel 基于 java.nio.channels，其 io 模型为 IO 多路复用")])]),e._v(" "),t("tr",[t("td",[e._v("Epoll")]),e._v(" "),t("td",[e._v("io.netty.channel.epoll")]),e._v(" "),t("td",[e._v("Epoll Channel 基于操作系统的 epoll 函数，其 io 模型为 IO 多路复用，不过 Epoll 模型只支持在 Linux 上的多种特性，比 NIO 性能更好")])]),e._v(" "),t("tr",[t("td",[e._v("KQueue")]),e._v(" "),t("td",[e._v("io.netty.channel.kqueue")]),e._v(" "),t("td",[e._v("KQueue 与 Epoll 相似，它主要被用于 FreeBSD 系统上，如 Mac 等")])]),e._v(" "),t("tr",[t("td",[e._v("OIO(Old Io)")]),e._v(" "),t("td",[e._v("io.netty.channel.socket.oio")]),e._v(" "),t("td",[e._v("OIO Channel 基于 java.net 包，其 io 模型是阻塞的，且此传输被 Netty 标记为 deprecated，故不推荐使用，最好使用 NIO / EPOLL / KQUEUE 等传输")])]),e._v(" "),t("tr",[t("td",[e._v("Local")]),e._v(" "),t("td",[e._v("io.netty.channel.local")]),e._v(" "),t("td",[e._v("Local Channel 可以在 VM 虚拟机内部进行本地通信")])]),e._v(" "),t("tr",[t("td",[e._v("Embedded")]),e._v(" "),t("td",[e._v("io.netty.channel.embedded")]),e._v(" "),t("td",[e._v("Embedded Channel 允许在没有真正的网络传输中使用 ChannelHandler，可以非常有用的测试 ChannelHandler")])])])]),e._v(" "),t("h3",{attrs:{id:"零拷贝"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#零拷贝"}},[e._v("#")]),e._v(" 零拷贝")]),e._v(" "),t("p",[e._v("理解零拷贝 零拷贝是 Netty 的重要特性之一，而究竟什么是零拷贝呢？ WIKI 中对其有如下定义：")]),e._v(" "),t("blockquote",[t("p",[e._v('"Zero-copy" describes computer operations in which the CPU does not perform the task of copying data from one memory area to another.')])]),e._v(" "),t("p",[e._v("从 WIKI 的定义中，我们看到“零拷贝”是指计算机操作的过程中，CPU 不需要为数据在内存之间的拷贝消耗资源。而它通常是指计算机在网络上发送文件时，不需要将文件内容拷贝到用户空间（User Space）而直接在内核空间（Kernel Space）中传输到网络的方式。")]),e._v(" "),t("p",[e._v("Non-Zero Copy 方式： "),t("img",{attrs:{src:"http://md7.admin4j.com/blog/315c32fd846c5a57f89c27c9829a870a.png",alt:"Non-Zero Copy"}})]),e._v(" "),t("p",[t("strong",[e._v("应用程序启动后，向内核发出 read 调用（用户态切换到内核态），操作系统收到调用请求后， 会检查文件是否已经缓存过了，如果缓存过了，就将数据从缓冲区（直接内存）拷贝到用户应用进程（内核态切换到用户态）， 如果是第一次访问这个文件，则系统先将数据先拷贝到缓冲区（直接内存），然后 CPU 将数据从缓冲区拷贝到应用进程内（内核态切换到用户态）， 应用进程收到内核的数据后发起 write 调用，将数据拷贝到目标文件相关的堆栈内存（用户态切换到内核态）， 最后再从缓存拷贝到目标文件。")])]),e._v(" "),t("p",[t("img",{attrs:{src:"http://md7.admin4j.com/blog/20210203192230339.png",alt:"普通IO拷贝"}})]),e._v(" "),t("p",[e._v("根据上面普通拷贝的过程我们知道了其缺点主要有：")]),e._v(" "),t("ol",[t("li",[e._v("用户态与内核态之间的上下文切换次数较多（用户态发送系统调用与内核态将数据拷贝到用户空间）。")]),e._v(" "),t("li",[e._v("拷贝次数较多，每次 IO 都需要 DMA 和 CPU 拷贝。")])]),e._v(" "),t("p",[t("strong",[e._v("而零拷贝正是针对普通拷贝的缺点做了很大改进，使得其拷贝速度在处理大数据的时候很是出色。")])]),e._v(" "),t("p",[e._v("Zero Copy 方式： "),t("img",{attrs:{src:"http://md7.admin4j.com/blog/88ad9bfb9c539033ba490667d57d5e36.png",alt:"在此输入图片描述"}})]),e._v(" "),t("p",[e._v("从上图中可以清楚的看到，Zero Copy 的模式中，避免了数据在用户空间和内存空间之间的拷贝，从而提高了系统的整体性能。Linux 中的"),t("code",[e._v("sendfile()")]),e._v("以及 Java NIO 中的"),t("code",[e._v("FileChannel.transferTo()")]),e._v("方法都实现了零拷贝的功能，而在 Netty 中也通过在"),t("code",[e._v("FileRegion")]),e._v("中包装了 NIO 的"),t("code",[e._v("FileChannel.transferTo()")]),e._v("方法实现了零拷贝。")]),e._v(" "),t("p",[e._v("零拷贝主要有两种实现技术：")]),e._v(" "),t("ol",[t("li",[e._v("内存映射（mmp）")]),e._v(" "),t("li",[e._v("文件传输（sendfile）")])]),e._v(" "),t("p",[e._v("可以参照我编写的 demo 进行接下来的学习：")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/andanyoung/netty-tutorial/blob/master/src/main/java/cn/andanyoung/netty/ZeroCopyTest.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("zerocopy"),t("OutboundLink")],1)]),e._v(" "),t("h4",{attrs:{id:"内存映射-memory-mapped"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存映射-memory-mapped"}},[e._v("#")]),e._v(" 内存映射（Memory Mapped）")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("内存映射对应JAVA NIO的API为\nFileChannel.map。\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("当用户程序发起 mmp 系统调用后，操作系统会将文件的数据直接映射到内核缓冲区中， 且缓冲区会与用户空间共享这一块内存，这样就无需将数据从内核拷贝到用户空间了，用户程序接着发起 write 调用，操作系统直接将内核缓冲区的数据拷贝到目标文件的缓冲区，最后再将数据从缓冲区拷贝到目标文件。")]),e._v(" "),t("p",[e._v("其过程如下：\n"),t("img",{attrs:{src:"http://md7.admin4j.com/blog/20210203192257521.png",alt:"mmp零拷贝"}})]),e._v(" "),t("p",[e._v("内存映射由原来的四次拷贝减少到了三次，且拷贝过程都在内核空间，这在很大程度上提高了 IO 效率。")]),e._v(" "),t("p",[e._v("但是 mmp 也有缺点： 当我们使用 mmp 映射一个文件到内存并将数据 write 到指定的目标文件时， 如果另一个进程同时对这个映射的文件做出写的操作，用户程序可能会因为访问非法地址而产生一个错误的信号从而终止。")]),e._v(" "),t("p",[e._v("试想一种情况：我们的服务器接收一个客户端的下载请求，客户端请求的是一个超大的文件，服务端开启一个线程 使用 mmp 和 write 将文件拷贝到 Socket 进行响应，如果此时又有一个客户端请求对这个文件做出修改， 由于这个文件先前已经被第一个线程 mmp 了，可能第一个线程会因此出现异常，客户端也会请求失败。")]),e._v(" "),t("p",[e._v("解决这个问题的最简单的一种方法就对这个文件加读写锁，当一个线程对这个文件进行读或写时，其他线程不能操作此文件， 不过这样处理并发的能力可能就大打折扣了。")]),e._v(" "),t("h4",{attrs:{id:"文件传输-sendfile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文件传输-sendfile"}},[e._v("#")]),e._v(" 文件传输(SendFile)")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("文件传输对应JAVA NIO的API为\nFileChannel.transferFrom/transferTo\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("在了解 sendfile 之前，先来看一下它的函数原型（linux 系统的同学可以使用 man sendfile 查看）：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("#include<sys/sendfile.h>\n\nssize_t\n\nsendfile(int out_fd,\n        int in_fd,\n        off_t *offset,\n        size_t count);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])]),t("p",[e._v("sendfile 在代表输入文件的文件描述符 in_fd 和 输入文件的文件描述符 out_fd 之间传输文件内容， 这个传输过程完全是在内核之中进行的，程序只需要把输入文件的描述符和输出文件的描述符传递给 sendfile 调用，系统自然会完成拷贝。 当然，sendfile 和 mmp 一样都有相同的缺点，在传输过程中， 如果有其他进程截断了这个文件的话，用户程序仍然会被终止。")]),e._v(" "),t("p",[e._v("sendfile 传输过程如下：")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://md7.admin4j.com/blog/20210203192322816.png",alt:"sendfile零拷贝"}})]),e._v(" "),t("p",[e._v("它的拷贝次数与 mmp 一样，但是无需像 mmp 一样与用户进程共享内存了。")])])}),[],!1,null,null,null);t.default=v.exports}}]);