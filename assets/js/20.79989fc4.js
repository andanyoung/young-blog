(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{1214:function(a,s,e){a.exports=e.p+"assets/img/image-20231206235236271.7e82695a.png"},1215:function(a,s,e){a.exports=e.p+"assets/img/image-20231206235550289.7fde6742.png"},1216:function(a,s,e){a.exports=e.p+"assets/img/image-20231206235718519.937fd19f.png"},1217:function(a,s,e){a.exports=e.p+"assets/img/image-20231207000005781.55ac8fd6.png"},1218:function(a,s,e){a.exports=e.p+"assets/img/image-20231207000206610.628063a1.png"},1219:function(a,s,e){a.exports=e.p+"assets/img/image-20231207000235561.d1249c7c.png"},1220:function(a,s,e){a.exports=e.p+"assets/img/image-20231207000306793.8f1992d8.png"},1221:function(a,s,e){a.exports=e.p+"assets/img/image-20231207000327838.fdce0e64.png"},1222:function(a,s,e){a.exports=e.p+"assets/img/spark-dataFrame+RDDs.b6919896.png"},1223:function(a,s,e){a.exports=e.p+"assets/img/image-20231207000847362.b25e0f9e.png"},1224:function(a,s,e){a.exports=e.p+"assets/img/image-20231207001100417.22e769b3.png"},1225:function(a,s,e){a.exports=e.p+"assets/img/image-20231211220434814.ec85f73a.png"},1226:function(a,s,e){a.exports=e.p+"assets/img/image-20231211222718262.984a48cd.png"},1227:function(a,s,e){a.exports=e.p+"assets/img/image-20231211230001672.ca4e7cb0.png"},1228:function(a,s,e){a.exports=e.p+"assets/img/image-20231211231338332.097ef225.png"},1229:function(a,s,e){a.exports=e.p+"assets/img/image-20231211231458428.5b788913.png"},1539:function(a,s,e){"use strict";e.r(s);var n=e(4),t=Object(n.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"第1章-sparksql-概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第1章-sparksql-概述"}},[a._v("#")]),a._v(" 第1章 SparkSQL 概述")]),a._v(" "),s("h2",{attrs:{id:"_1-1-sparksql-是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-sparksql-是什么"}},[a._v("#")]),a._v(" 1.1 SparkSQL 是什么")]),a._v(" "),s("p",[s("img",{attrs:{src:e(1214),alt:"image-20231206235236271"}})]),a._v(" "),s("p",[a._v("Spark SQL 是 Spark 用于结构化数据(structured data)处理的 Spark 模块。")]),a._v(" "),s("h2",{attrs:{id:"_1-2-hive-and-sparksql"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-hive-and-sparksql"}},[a._v("#")]),a._v(" 1.2 Hive and SparkSQL")]),a._v(" "),s("p",[a._v("SparkSQL 的前身是 Shark，给熟悉 RDBMS 但又不理解 MapReduce 的技术人员提供快速上手的工具。")]),a._v(" "),s("p",[a._v("Hive 是早期唯一运行在 Hadoop 上的 SQL-on-Hadoop 工具。但是 MapReduce 计算过程 中大量的中间磁盘落地过程消耗了大量的 I/O，降低的运行效率，为了提高 SQL-on-Hadoop 的效率，大量的 SQL-on-Hadoop 工具开始产生，其中表现较为突出的是：")]),a._v(" "),s("ul",[s("li",[a._v("Drill")]),a._v(" "),s("li",[a._v("Impala")]),a._v(" "),s("li",[a._v("Shark")])]),a._v(" "),s("p",[a._v("其中 Shark 是伯克利实验室 Spark 生态环境的组件之一，是基于 Hive 所开发的工具，它修改了下图所示的右下角的内存管理、物理计划、执行三个模块，并使之能运行在 Spark 引擎 上。")]),a._v(" "),s("p",[s("img",{attrs:{src:e(1215),alt:"image-20231206235550289"}})]),a._v(" "),s("p",[a._v("Shark 的出现，使得 SQL-on-Hadoop 的性能比 Hive 有了 10-100 倍的提高。")]),a._v(" "),s("p",[s("img",{attrs:{src:e(1216),alt:"image-20231206235718519"}})]),a._v(" "),s("p",[a._v("但是，随着 Spark 的发展，对于野心勃勃的 Spark 团队来说，Shark 对于 Hive 的太多依赖（如采用 Hive 的语法解析器、查询优化器等等），制约了 Spark 的 One Stack Rule Them All 的既定方针，制约了 Spark 各个组件的相互集成，所以提出了 SparkSQL 项目。SparkSQL 抛弃原有 Shark 的代码，汲取了 Shark 的一些优点，如内存列存储（In-Memory Columnar  Storage）、Hive兼容性等，重新开发了SparkSQL代码；由于摆脱了对Hive的依赖性，SparkSQL 无论在数据兼容、性能优化、组件扩展方面都得到了极大的方便，真可谓“退一步，海阔天空”。")]),a._v(" "),s("p",[a._v("➢ 数据兼容方面 SparkSQL 不但兼容 Hive，还可以从 RDD、parquet 文件、JSON 文件中获取数据，未来版本甚至支持获取 RDBMS 数据以及 cassandra 等 NOSQL 数据；")]),a._v(" "),s("p",[a._v("➢ 性能优化方面 除了采取 In-Memory Columnar Storage、byte-code generation 等优化技术外、将会引进 Cost Model 对查询进行动态评估、获取最佳物理计划等等；")]),a._v(" "),s("p",[a._v("➢ 组件扩展方面 无论是 SQL 的语法解析器、分析器还是优化器都可以重新定义，进行扩展。")]),a._v(" "),s("p",[a._v("2014 年 6 月 1 日 Shark 项目和 SparkSQL 项目的主持人 Reynold Xin 宣布：停止对 Shark 的 开发，团队将所有资源放 SparkSQL 项目上，至此，Shark 的发展画上了句话，但也因此发 展出两个支线：SparkSQL 和 Hive on Spark。")]),a._v(" "),s("p",[s("img",{attrs:{src:e(1217),alt:"image-20231207000005781"}})]),a._v(" "),s("p",[a._v("其中 SparkSQL 作为 Spark 生态的一员继续发展，而不再受限于 Hive，只是兼容 Hive；而 Hive on Spark 是一个 Hive 的发展计划，该计划将 Spark 作为 Hive 的底层引擎之一，也就是 说，Hive 将不再受限于一个引擎，可以采用 Map-Reduce、Tez、Spark 等引擎。")]),a._v(" "),s("p",[a._v("对于开发人员来讲，SparkSQL 可以简化 RDD 的开发，提高开发效率，且执行效率非 常快，所以实际工作中，基本上采用的就是 SparkSQL。Spark SQL 为了简化 RDD 的开发， 提高开发效率，提供了 2 个编程抽象，类似 Spark Core 中的 RDD")]),a._v(" "),s("ul",[s("li",[a._v("DataFrame")]),a._v(" "),s("li",[a._v("DataSet")])]),a._v(" "),s("h2",{attrs:{id:"_1-3-sparksql-特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-sparksql-特点"}},[a._v("#")]),a._v(" 1.3 SparkSQL 特点")]),a._v(" "),s("h3",{attrs:{id:"_1-3-1-易整合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-易整合"}},[a._v("#")]),a._v(" 1.3.1 易整合")]),a._v(" "),s("p",[a._v("无缝的整合了 SQL 查询和 Spark 编程")]),a._v(" "),s("p",[s("img",{attrs:{src:e(1218),alt:"image-20231207000206610"}})]),a._v(" "),s("h2",{attrs:{id:"_1-3-2-统一的数据访问"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-统一的数据访问"}},[a._v("#")]),a._v(" 1.3.2 统一的数据访问")]),a._v(" "),s("p",[a._v("使用相同的方式连接不同的数据源")]),a._v(" "),s("p",[s("img",{attrs:{src:e(1219),alt:"image-20231207000235561"}})]),a._v(" "),s("h3",{attrs:{id:"_1-3-3-兼容-hive"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-3-兼容-hive"}},[a._v("#")]),a._v(" 1.3.3 兼容 Hive")]),a._v(" "),s("p",[a._v("在已有的仓库上直接运行 SQL 或者 HiveQL")]),a._v(" "),s("p",[s("img",{attrs:{src:e(1220),alt:"image-20231207000306793"}})]),a._v(" "),s("h3",{attrs:{id:"_1-3-4-标准数据连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-4-标准数据连接"}},[a._v("#")]),a._v(" 1.3.4 标准数据连接")]),a._v(" "),s("p",[s("img",{attrs:{src:e(1221),alt:"image-20231207000327838"}})]),a._v(" "),s("h2",{attrs:{id:"_1-4-dataframe-是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-dataframe-是什么"}},[a._v("#")]),a._v(" 1.4 DataFrame 是什么")]),a._v(" "),s("p",[a._v("在 Spark 中，DataFrame 是一种以 RDD 为基础的分布式数据集，"),s("strong",[a._v("类似于传统数据库中的二维表格")]),a._v("。DataFrame 与 RDD 的主要区别在于，前者带有 schema 元信息，即 DataFrame 所表示的二维表数据集的"),s("strong",[a._v("每一列都带有名称和类型")]),a._v("。这使得 Spark SQL 得以洞察更多的结构信息，从而对藏于 DataFrame 背后的数据源以及作用于 DataFrame 之上的变换进行了针对性的优化，最终达到大幅提升运行时效率的目标。反观 RDD，由于无从得知所存数据元素的具体内部结构，Spark Core 只能在 stage 层面进行简单、通用的流水线优化。")]),a._v(" "),s("p",[a._v("同时，与 Hive 类似，DataFrame 也支持嵌套数据类型（struct、array 和 map）。从 API  易用性的角度上看，DataFrame API 提供的是一套高层的关系操作，比函数式的 RDD API 要 更加友好，门槛更低。")]),a._v(" "),s("p",[s("img",{attrs:{src:e(1222),alt:"img"}})]),a._v(" "),s("p",[a._v("上图直观地体现了 DataFrame 和 RDD 的区别。")]),a._v(" "),s("p",[a._v("左侧的 RDD[Person]虽然以 Person 为类型参数，但 Spark 框架本身不了解 Person 类的内部结构。而右侧的 DataFrame 却提供了详细的结构信息，使得 Spark SQL 可以清楚地知道该数据集中包含哪些列，每列的名称和类型各是什么。")]),a._v(" "),s("p",[a._v("DataFrame 是为数据提供了 Schema 的视图。可以把它当做数据库中的一张表来对待 DataFrame 也是懒执行的，但性能上比 RDD 要高，主要原因："),s("strong",[a._v("优化的执行计划")]),a._v("，即查询计划通过 Spark catalyst optimiser 进行优化。比如下面一个例子:")]),a._v(" "),s("p",[s("img",{attrs:{src:e(1223),alt:"image-20231207000847362"}})]),a._v(" "),s("p",[a._v("为了说明查询优化，我们来看上图展示的人口数据分析的示例。图中构造了两个 DataFrame，将它们 join 之后又做了一次 filter 操作。如果原封不动地执行这个执行计划，最终的执行效率是不高的。因为 join 是一个代价较大的操作，也可能会产生一个较大的数据集。如果我们能将 filter 下推到 join 下方，先对 DataFrame 进行过滤，再 join 过滤后的较小的结果集，便可以有效缩短执行时间。而 Spark SQL 的查询优化器正是这样做的。简而言之， 逻辑查询计划优化就是一个利用基于关系代数的等价变换，将高成本的操作替换为低成本操 作的过程。")]),a._v(" "),s("p",[s("img",{attrs:{src:e(1224),alt:"image-20231207001100417"}})]),a._v(" "),s("h2",{attrs:{id:"_1-5-dataset-是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-dataset-是什么"}},[a._v("#")]),a._v(" 1.5 DataSet 是什么")]),a._v(" "),s("p",[a._v("DataSet 是分布式数据集合。DataSet 是 Spark 1.6 中添加的一个新抽象，是 DataFrame 的一个扩展。它提供了 RDD 的优势（强类型，使用强大的 lambda 函数的能力）以及 Spark  SQL 优化执行引擎的优点。DataSet 也可以使用功能性的转换（操作 map，flatMap，filter 等等）。")]),a._v(" "),s("p",[a._v("➢ DataSet 是 DataFrame API 的一个扩展，是 SparkSQL 最新的数据抽象")]),a._v(" "),s("p",[a._v("➢ 用户友好的 API 风格，既具有类型安全检查也具有 DataFrame 的查询优化特性；")]),a._v(" "),s("p",[a._v("➢ 用样例类来对 DataSet 中定义数据的结构信息，样例类中每个属性的名称直接映射到 DataSet 中的字段名称；")]),a._v(" "),s("p",[a._v("➢ DataSet 是强类型的。比如可以有 "),s("code",[a._v("DataSet[Car]")]),a._v("，"),s("code",[a._v("DataSet[Person]")]),a._v("。")]),a._v(" "),s("p",[a._v("➢ DataFrame 是 DataSet 的特列，"),s("code",[a._v("DataFrame=DataSet[Row]")]),a._v(" ，所以可以通过 as 方法将 DataFrame 转换为 DataSet。Row 是一个类型，跟 Car、Person 这些的类型一样，所有的表结构信息都用 Row 来表示。获取数据时需要指定顺序")]),a._v(" "),s("h1",{attrs:{id:"第2章-sparksql-核心编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第2章-sparksql-核心编程"}},[a._v("#")]),a._v(" 第2章 SparkSQL 核心编程")]),a._v(" "),s("p",[a._v("本课件重点学习如何使用 Spark SQL 所提供的 DataFrame 和 DataSet 模型进行编程.， 以及了解它们之间的关系和转换，"),s("strong",[a._v("关于具体的 SQL 书写不是我们的重点。")])]),a._v(" "),s("h2",{attrs:{id:"_2-1-新的起点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-新的起点"}},[a._v("#")]),a._v(" 2.1 新的起点")]),a._v(" "),s("p",[a._v("Spark Core 中，如果想要执行应用程序，需要首先构建上下文环境对象 "),s("strong",[a._v("SparkContext")]),a._v("， Spark SQL 其实可以理解为对 Spark Core 的一种封装，不仅仅在模型上进行了封装，上下文环境对象也进行了封装。")]),a._v(" "),s("p",[a._v("在老的版本中，SparkSQL 提供两种 SQL 查询起始点：一个叫 SQLContext，用于 Spark 自己提供的 SQL 查询；一个叫 HiveContext，用于连接 Hive 的查询。")]),a._v(" "),s("p",[s("strong",[a._v("SparkSession")]),a._v(" 是 Spark 最新的 SQL 查询起始点，实质上是 SQLContext 和 HiveContext 的组合，所以在 SQLContex 和 HiveContext 上可用的 API 在 SparkSession 上同样是可以使用 的。SparkSession 内部封装了 SparkContext，所以计算实际上是由 sparkContext 完成的。当我们使用 spark-shell 的时候, spark 框架会自动的创建一个名称叫做 spark 的 SparkSession 对象, 就像我们以前可以自动获取到一个 sc 来表示 SparkContext 对象一样")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("./spark-shell\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:e(295),alt:"image-20231211220300472"}})]),a._v(" "),s("h2",{attrs:{id:"_2-2-dataframe"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-dataframe"}},[a._v("#")]),a._v(" 2.2 DataFrame")]),a._v(" "),s("p",[a._v("Spark SQL 的 DataFrame API 允许我们使用 DataFrame 而不用必须去注册临时表或者生成 SQL 表达式。DataFrame API 既有 transformation 操作也有 action 操作。")]),a._v(" "),s("h3",{attrs:{id:"_2-2-1-创建-dataframe"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-创建-dataframe"}},[a._v("#")]),a._v(" 2.2.1 创建 DataFrame")]),a._v(" "),s("p",[a._v("在 Spark SQL 中 SparkSession 是创建 DataFrame 和执行 SQL 的入口，创建 DataFrame 有三种方式：通过 Spark 的数据源进行创建；从一个存在的 RDD 进行转换；还可以从 Hive  Table 进行查询返回。")]),a._v(" "),s("h4",{attrs:{id:"_1-从-spark-数据源进行创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-从-spark-数据源进行创建"}},[a._v("#")]),a._v(" 1) 从 Spark 数据源进行创建")]),a._v(" "),s("p",[a._v("➢ 查看 Spark 支持创建文件的数据源格式")]),a._v(" "),s("p",[s("img",{attrs:{src:e(1225),alt:"image-20231211220434814"}})]),a._v(" "),s("p",[a._v("➢ 在 spark 的 bin/data 目录中创建 user.json 文件")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('{"username":"zhangsan","age":20}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("➢ 读取 json 文件创建 DataFrame")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('scala> val df = spark.read.json("data/user.json")\ndf: org.apache.spark.sql.DataFrame = [age: bigint， username: string]\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("blockquote",[s("p",[a._v("注意：如果从内存中获取数据，spark 可以知道数据类型具体是什么。如果是数字，默认作 为 Int 处理；但是从文件中读取的数字，不能确定是什么类型，所以用 bigint 接收，可以和 Long 类型转换，但是和 Int 不能进行转换")])]),a._v(" "),s("p",[a._v("➢ 展示结果")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("+---+--------+\n|age|username|\n+---+--------+\n| 20|zhangsan|\n+---+--------+\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("h4",{attrs:{id:"_2-从-rdd-进行转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-从-rdd-进行转换"}},[a._v("#")]),a._v(" 2) 从 RDD 进行转换")]),a._v(" "),s("p",[a._v("在后续章节中讨论")]),a._v(" "),s("h4",{attrs:{id:"_3-从-hive-table-进行查询返回"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-从-hive-table-进行查询返回"}},[a._v("#")]),a._v(" 3) 从 Hive Table 进行查询返回")]),a._v(" "),s("p",[a._v("在后续章节中讨论")]),a._v(" "),s("h3",{attrs:{id:"_2-2-2-sql-语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-sql-语法"}},[a._v("#")]),a._v(" 2.2.2 SQL 语法")]),a._v(" "),s("p",[a._v("SQL 语法风格是指我们查询数据的时候使用 SQL 语句来查询，这种风格的查询必须要有临时视图或者全局视图来辅助")]),a._v(" "),s("h4",{attrs:{id:"_1-读取-json-文件创建-dataframe"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-读取-json-文件创建-dataframe"}},[a._v("#")]),a._v(" 1) 读取 JSON 文件创建 DataFrame")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('scala> val df = spark.read.json("data/user.json")\ndf: org.apache.spark.sql.DataFrame = [age: bigint， username: string]\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("h4",{attrs:{id:"_2-对-dataframe-创建一个临时表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-对-dataframe-创建一个临时表"}},[a._v("#")]),a._v(" 2) 对 DataFrame 创建一个临时表")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('scala> df.createOrReplaceTempView("people")\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h4",{attrs:{id:"_3-通过-sql-语句实现查询全表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-通过-sql-语句实现查询全表"}},[a._v("#")]),a._v(" 3) 通过 SQL 语句实现查询全表")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('scala> val sqlDF = spark.sql("SELECT * FROM people")\nsqlDF: org.apache.spark.sql.DataFrame = [age: bigint， name: string]\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("h4",{attrs:{id:"_4-结果展示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-结果展示"}},[a._v("#")]),a._v(" 4) 结果展示")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("scala> sqlDF.show\n+---+--------+\n|age|username|\n+---+--------+\n| 20|zhangsan|\n| 30| lisi|\n| 40| wangwu|\n+---+--------+\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br")])]),s("blockquote",[s("p",[a._v("注意：普通临时表是 Session 范围内的，如果想应用范围内有效，可以使用全局临时表。使用全局临时表时需要全路径访问，如：global_temp.people")])]),a._v(" "),s("h4",{attrs:{id:"_5-对于-dataframe-创建一个全局表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-对于-dataframe-创建一个全局表"}},[a._v("#")]),a._v(" 5) 对于 DataFrame 创建一个全局表")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('scala> df.createGlobalTempView("people")\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h4",{attrs:{id:"_6-通过-sql-语句实现查询全表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-通过-sql-语句实现查询全表"}},[a._v("#")]),a._v(" 6) 通过 SQL 语句实现查询全表")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('scala> spark.sql("SELECT * FROM global_temp.people").show()\n+---+--------+\n|age|username|\n+---+--------+\n| 20|zhangsan|\n| 30| lisi   |\n| 40| wangwu |\n+---+--------+\n\nscala> spark.newSession().sql("SELECT * FROM global_temp.people").show()\n+---+--------+\n|age|username|\n+---+--------+\n| 20|zhangsan|\n| 30| lisi   |\n| 40| wangwu |\n+---+--------+\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br")])]),s("h3",{attrs:{id:"_2-2-3-dsl-语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-dsl-语法"}},[a._v("#")]),a._v(" 2.2.3 DSL 语法")]),a._v(" "),s("p",[a._v("DataFrame 提供一个特定领域语言(domain-specific language, DSL)去管理结构化的数据。 可以在 Scala, Java, Python 和 R 中使用 DSL，使用 DSL 语法风格不必去创建临时视图了")]),a._v(" "),s("h4",{attrs:{id:"_1-创建一个-dataframe"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建一个-dataframe"}},[a._v("#")]),a._v(" 1) 创建一个 DataFrame")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('scala> val df = spark.read.json("data/user.json")\ndf: org.apache.spark.sql.DataFrame = [age: bigint， name: string]\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("h4",{attrs:{id:"_2-查看-dataframe-的-schema-信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-查看-dataframe-的-schema-信息"}},[a._v("#")]),a._v(" 2) 查看 DataFrame 的 Schema 信息")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("scala> df.printSchema\nroot\n|-- age: Long (nullable = true)\n|-- username: string (nullable = true)\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("h4",{attrs:{id:"_3-只查看-username-列数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-只查看-username-列数据"}},[a._v("#")]),a._v(' 3) 只查看"username"列数据，')]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('scala> df.select("username").show()\n+--------+\n|username|\n+--------+\n|zhangsan|\n| lisi|\n| wangwu|\n+--------+\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br")])]),s("h4",{attrs:{id:"_4-查看-username-列数据以及-age-1-数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-查看-username-列数据以及-age-1-数据"}},[a._v("#")]),a._v(' 4) 查看"username"列数据以及"age+1"数据')]),a._v(" "),s("blockquote",[s("p",[a._v("注意:涉及到运算的时候, 每列都必须使用$, 或者采用引号表达式：单引号+字段名")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('scala> df.select($"username",$"age" + 1).show\nscala> df.select(\'username, \'age + 1).show()\nscala> df.select(\'username, \'age + 1 as "newage").show()\n+--------+---------+\n|username|(age + 1)|\n+--------+---------+\n|zhangsan| 21|\n| lisi| 31|\n| wangwu| 41|\n+--------+---------+\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br")])]),s("h4",{attrs:{id:"_5-查看-age-大于-30-的数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-查看-age-大于-30-的数据"}},[a._v("#")]),a._v(' 5) 查看"age"大于"30"的数据')]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('scala> df.filter($"age">30).show\n+---+---------+\n|age| username|\n+---+---------+\n| 40| wangwu|\n+---+---------+\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("h4",{attrs:{id:"_6-按照-age-分组-查看数据条数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-按照-age-分组-查看数据条数"}},[a._v("#")]),a._v(' 6) 按照"age"分组，查看数据条数')]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('scala> df.groupBy("age").count.show\n+---+-----+\n|age|count|\n+---+-----+\n| 20| 1|\n| 30| 1|\n| 40| 1|\n+---+-----+\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br")])]),s("h3",{attrs:{id:"_2-2-4-rdd-转换为-dataframe"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-4-rdd-转换为-dataframe"}},[a._v("#")]),a._v(" 2.2.4 RDD 转换为 DataFrame")]),a._v(" "),s("p",[a._v("在 IDEA 中开发程序时，如果需要 RDD 与 DF 或者 DS 之间互相操作，那么需要引入 "),s("mark",[a._v("import spark.implicits._")])]),a._v(" "),s("p",[a._v("这里的 spark 不是 Scala 中的包名，而是创建的 sparkSession 对象的变量名称，所以必 须先创建 SparkSession 对象再导入。这里的 spark 对象不能使用 var 声明，因为 Scala 只支持 val 修饰的对象的引入。")]),a._v(" "),s("p",[a._v("spark-shell 中无需导入，自动完成此操作。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('scala> val idRDD = sc.textFile("data/id.txt")\nscala> idRDD.toDF("id").show\n+---+\n| id|\n+---+\n| 1|\n| 2|\n| 3|\n| 4|\n+---+\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br")])]),s("p",[s("strong",[a._v("实际开发中，一般通过样例类将 RDD 转换为 DataFrame")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('scala> case class User(name:String, age:Int)\ndefined class User\nscala> sc.makeRDD(List(("zhangsan",30), ("lisi",40))).map(t=>User(t._1, \nt._2)).toDF.show\n+--------+---+\n| name|age   |\n+--------+---+\n|zhangsan| 30|\n| lisi   | 40|\n+--------+---+\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br")])]),s("h3",{attrs:{id:"_2-2-5-dataframe-转换为-rdd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-5-dataframe-转换为-rdd"}},[a._v("#")]),a._v(" 2.2.5 DataFrame 转换为 RDD")]),a._v(" "),s("p",[a._v("DataFrame 其实就是对 RDD 的封装，所以可以直接获取内部的 RDD")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('scala> val df = sc.makeRDD(List(("zhangsan",30), ("lisi",40))).map(t=>User(t._1, t._2)).toDF\ndf: org.apache.spark.sql.DataFrame = [name: string, age: int]\nscala> val rdd = df.rdd\nrdd: org.apache.spark.rdd.RDD[org.apache.spark.sql.Row] = MapPartitionsRDD[46] \nat rdd at <console>:25\nscala> val array = rdd.collect\narray: Array[org.apache.spark.sql.Row] = Array([zhangsan,30], [lisi,40])\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br")])]),s("blockquote",[s("p",[a._v("注意：此时得到的 RDD 存储类型为 Row")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('cala> array(0)\nres28: org.apache.spark.sql.Row = [zhangsan,30]\nscala> array(0)(0)\nres29: Any = zhangsan\nscala> array(0).getAs[String]("name")\nres30: String = zhangsan\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("h2",{attrs:{id:"_2-3-dataset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-dataset"}},[a._v("#")]),a._v(" 2.3 DataSet")]),a._v(" "),s("p",[a._v("DataSet 是具有"),s("mark",[s("strong",[a._v("强类型")])]),a._v("的数据集合，需要提供对应的类型信息。")]),a._v(" "),s("h3",{attrs:{id:"_2-3-1-创建-dataset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-创建-dataset"}},[a._v("#")]),a._v(" 2.3.1 创建 DataSet")]),a._v(" "),s("h4",{attrs:{id:"_1-使用样例类序列创建-dataset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-使用样例类序列创建-dataset"}},[a._v("#")]),a._v(" 1） 使用样例类序列创建 DataSet")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('scala> case class Person(name: String, age: Long)\ndefined class Person\nscala> val caseClassDS = Seq(Person("zhangsan",2)).toDS()\ncaseClassDS: org.apache.spark.sql.Dataset[Person] = [name: string, age: Long]\nscala> caseClassDS.show\n+---------+---+\n| name   |age |\n+---------+---+\n| zhangsan| 2 |\n+---------+---+\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br")])]),s("h4",{attrs:{id:"_2-使用基本类型的序列创建-dataset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用基本类型的序列创建-dataset"}},[a._v("#")]),a._v(" 2） 使用基本类型的序列创建 DataSet")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("scala> val ds = Seq(1,2,3,4,5).toDS\nds: org.apache.spark.sql.Dataset[Int] = [value: int]\nscala> ds.show\n+-----+\n|value|\n+-----+\n| 1|\n| 2|\n| 3|\n| 4|\n| 5|\n+-----+\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br")])]),s("blockquote",[s("p",[a._v("注意：在实际使用的时候，很少用到把序列转换成DataSet，更多的是通过RDD来得到DataSet")])]),a._v(" "),s("h3",{attrs:{id:"_2-3-2-rdd-转换为-dataset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-rdd-转换为-dataset"}},[a._v("#")]),a._v(" 2.3.2 RDD 转换为 DataSet")]),a._v(" "),s("p",[a._v("SparkSQL 能够自动将包含有 case 类的 RDD 转换成 DataSet，case 类定义了 table 的结构，Case 类属性通过反射变成了表的列名。Case 类可以包含诸如 Seq 或者 Array 等复杂的结构。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('scala> case class User(name:String, age:Int)\ndefined class User\nscala> sc.makeRDD(List(("zhangsan",30), ("lisi",49))).map(t=>User(t._1, t._2)).toDS\nres11: org.apache.spark.sql.Dataset[User] = [name: string, age: int]\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("h3",{attrs:{id:"_2-3-3-dataset-转换为-rdd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-3-dataset-转换为-rdd"}},[a._v("#")]),a._v(" 2.3.3 DataSet 转换为 RDD")]),a._v(" "),s("p",[a._v("DataSet 其实也是对 RDD 的封装，所以可以直接获取内部的 RDD")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('scala> case class User(name:String, age:Int)\ndefined class User\n\nscala> sc.makeRDD(List(("zhangsan",30), ("lisi",49))).map(t=>User(t._1, \nt._2)).toDS\nres11: org.apache.spark.sql.Dataset[User] = [name: string, age: int]\n\nscala> val rdd = res11.rdd\nrdd: org.apache.spark.rdd.RDD[User] = MapPartitionsRDD[51] at rdd at \n<console>:25\n\nscala> rdd.collect\nres12: Array[User] = Array(User(zhangsan,30), User(lisi,49))\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br")])]),s("h2",{attrs:{id:"_2-4-dataframe-和-dataset-转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-dataframe-和-dataset-转换"}},[a._v("#")]),a._v(" 2.4 DataFrame 和 DataSet 转换")]),a._v(" "),s("p",[a._v("DataFrame 其实是 DataSet 的特例，所以它们之间是可以互相转换的。")]),a._v(" "),s("p",[a._v("➢ DataFrame 转换为 DataSet")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('scala> case class User(name:String, age:Int)\ndefined class User\n\nscala> val df = sc.makeRDD(List(("zhangsan",30), \n("lisi",49))).toDF("name","age")\ndf: org.apache.spark.sql.DataFrame = [name: string, age: int]\n\nscala> val ds = df.as[User]\nds: org.apache.spark.sql.Dataset[User] = [name: string, age: int]\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br")])]),s("p",[a._v("➢ DataSet 转换为 DataFrame")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("scala> val ds = df.as[User]\nds: org.apache.spark.sql.Dataset[User] = [name: string, age: int]\n\nscala> val df = ds.toDF\ndf: org.apache.spark.sql.DataFrame = [name: string, age: int]\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("h2",{attrs:{id:"_2-5-rdd、dataframe、dataset-三者的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-rdd、dataframe、dataset-三者的关系"}},[a._v("#")]),a._v(" 2.5 RDD、DataFrame、DataSet 三者的关系")]),a._v(" "),s("p",[a._v("在 SparkSQL 中 Spark 为我们提供了两个新的抽象，分别是 DataFrame 和 DataSet。他们和 RDD 有什么区别呢？首先从版本的产生上来看：")]),a._v(" "),s("p",[a._v("➢ Spark1.0 => RDD")]),a._v(" "),s("p",[a._v("➢ Spark1.3 => DataFrame")]),a._v(" "),s("p",[a._v("➢ Spark1.6 => Dataset")]),a._v(" "),s("p",[a._v("如果同样的数据都给到这三个数据结构，他们分别计算之后，都会给出相同的结果。不同是的他们的执行效率和执行方式。在后期的 Spark 版本中，DataSet 有可能会逐步取代 RDD 和 DataFrame 成为唯一的 API 接口。")]),a._v(" "),s("h3",{attrs:{id:"_2-5-1-三者的共性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-1-三者的共性"}},[a._v("#")]),a._v(" 2.5.1 三者的共性")]),a._v(" "),s("p",[a._v("➢ RDD、DataFrame、DataSet 全都是 spark 平台下的分布式弹性数据集，为处理超大型数据提供便利;")]),a._v(" "),s("p",[a._v("➢ 三者都有惰性机制，在进行创建、转换，如 map 方法时，不会立即执行，只有在遇到 Action 如 foreach 时，三者才会开始遍历运算;")]),a._v(" "),s("p",[a._v("➢ 三者有许多共同的函数，如 filter，排序等;")]),a._v(" "),s("p",[a._v("➢ 在对 DataFrame 和 Dataset 进行操作许多操作都需要这个包:import spark.implicits._（在 创建好 SparkSession 对象后尽量直接导入）")]),a._v(" "),s("p",[a._v("➢ 三者都会根据 Spark 的内存情况自动缓存运算，这样即使数据量很大，也不用担心会内存溢出")]),a._v(" "),s("p",[a._v("➢ 三者都有 partition 的概念")]),a._v(" "),s("p",[a._v("➢ DataFrame 和 DataSet 均可使用模式匹配获取各个字段的值和类型")]),a._v(" "),s("h3",{attrs:{id:"_2-5-2-三者的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-2-三者的区别"}},[a._v("#")]),a._v(" 2.5.2 三者的区别")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("RDD")]),a._v(" "),s("p",[a._v("➢ RDD 一般和 spark mllib 同时使用")]),a._v(" "),s("p",[a._v("➢ RDD 不支持 sparksql 操作")])])]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[s("p",[a._v("DataFrame")]),a._v(" "),s("p",[a._v("➢ 与 RDD 和 Dataset 不同，DataFrame 每一行的类型固定为 Row，每一列的值没法直接访问，只有通过解析才能获取各个字段的值")]),a._v(" "),s("p",[a._v("➢ DataFrame 与 DataSet 一般不与 spark mllib 同时使用")]),a._v(" "),s("p",[a._v("➢ DataFrame 与 DataSet 均支持 SparkSQL 的操作，比如 select，groupby 之类，还能注册临时表/视窗，进行 sql 语句操作")]),a._v(" "),s("p",[a._v("➢ DataFrame 与 DataSet 支持一些特别方便的保存方式，比如保存成 csv，可以带上表头，这样每一列的字段名一目了然(后面专门讲解)")])]),a._v(" "),s("li",[s("p",[a._v("DataSet")]),a._v(" "),s("p",[a._v("➢ Dataset 和 DataFrame 拥有完全相同的成员函数，区别只是每一行的数据类型不同。 DataFrame 其实就是 DataSet 的一个特例 type DataFrame = Dataset[Row]")]),a._v(" "),s("p",[a._v("➢ DataFrame 也可以叫 Dataset[Row],每一行的类型是 Row，不解析，每一行究竟有哪些字段，各个字段又是什么类型都无从得知，只能用上面提到的 getAS 方法或者共性中的第七条提到的模式匹配拿出特定字段。而 Dataset 中，每一行是什么类型是不一定的，在自定义了 case class 之后可以很自由的获得每一行的信息")])])]),a._v(" "),s("h3",{attrs:{id:"_2-5-3-三者的互相转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-3-三者的互相转换"}},[a._v("#")]),a._v(" 2.5.3 三者的互相转换")]),a._v(" "),s("p",[s("img",{attrs:{src:e(1226),alt:"image-20231211222718262"}})]),a._v(" "),s("h2",{attrs:{id:"_2-6-idea-开发-sparksql"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-idea-开发-sparksql"}},[a._v("#")]),a._v(" 2.6 IDEA 开发 SparkSQL")]),a._v(" "),s("p",[a._v("实际开发中，都是使用 IDEA 进行开发的。")]),a._v(" "),s("h3",{attrs:{id:"_2-6-1-添加依赖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-1-添加依赖"}},[a._v("#")]),a._v(" 2.6.1 添加依赖")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("\t\t<dependency>\n            <groupId>org.apache.spark</groupId>\n            <artifactId>spark-core_2.13</artifactId>\n            <version>3.5.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-simple</artifactId>\n            <version>1.7.32</version>\n            <scope>compile</scope>\n        </dependency>\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br")])]),s("h3",{attrs:{id:"_2-6-2-代码实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-2-代码实现"}},[a._v("#")]),a._v(" 2.6.2 代码实现")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('object Spark01_SparkSQL_Basic {\n\n    def main(args: Array[String]): Unit = {\n\n        //创建上下文环境配置对象\n        val sparkConf = new SparkConf().setMaster("local[*]").setAppName("sparkSQL")\n        //创建 SparkSession 对象\n        val spark = SparkSession.builder().config(sparkConf).getOrCreate()\n        //RDD=>DataFrame=>DataSet 转换需要引入隐式转换规则，否则无法转换\n\t\t//spark 不是包名，是上下文环境对象名\n        import spark.implicits._\n\n\n        // TODO 执行逻辑操作\n\n        // TODO DataFrame\n        //val df: DataFrame = spark.read.json("datas/user.json")\n        //df.show()\n\n        // DataFrame => SQL\n//        df.createOrReplaceTempView("user")\n//\n//        spark.sql("select * from user").show\n//        spark.sql("select age, username from user").show\n//        spark.sql("select avg(age) from user").show\n\n        // DataFrame => DSL\n        // 在使用DataFrame时，如果涉及到转换操作，需要引入转换规则\n\n        //df.select("age", "username").show\n        //df.select($"age" + 1).show\n        //df.select(\'age + 1).show\n\n        // TODO DataSet\n        // DataFrame其实是特定泛型的DataSet\n        //val seq = Seq(1,2,3,4)\n        //val ds: Dataset[Int] = seq.toDS()\n        //ds.show()\n\n        // RDD <=> DataFrame\n        val rdd = spark.sparkContext.makeRDD(List((1, "zhangsan", 30), (2, "lisi", 40)))\n        val df: DataFrame = rdd.toDF("id", "name", "age")\n        val rowRDD: RDD[Row] = df.rdd\n\n        // DataFrame <=> DataSet\n        val ds: Dataset[User] = df.as[User]\n        val df1: DataFrame = ds.toDF()\n\n        // RDD <=> DataSet\n        val ds1: Dataset[User] = rdd.map {\n            case (id, name, age) => {\n                User(id, name, age)\n            }\n        }.toDS()\n        val userRDD: RDD[User] = ds1.rdd\n\n\n        // TODO 关闭环境\n        spark.close()\n    }\n    case class User( id:Int, name:String, age:Int )\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br"),s("span",{staticClass:"line-number"},[a._v("35")]),s("br"),s("span",{staticClass:"line-number"},[a._v("36")]),s("br"),s("span",{staticClass:"line-number"},[a._v("37")]),s("br"),s("span",{staticClass:"line-number"},[a._v("38")]),s("br"),s("span",{staticClass:"line-number"},[a._v("39")]),s("br"),s("span",{staticClass:"line-number"},[a._v("40")]),s("br"),s("span",{staticClass:"line-number"},[a._v("41")]),s("br"),s("span",{staticClass:"line-number"},[a._v("42")]),s("br"),s("span",{staticClass:"line-number"},[a._v("43")]),s("br"),s("span",{staticClass:"line-number"},[a._v("44")]),s("br"),s("span",{staticClass:"line-number"},[a._v("45")]),s("br"),s("span",{staticClass:"line-number"},[a._v("46")]),s("br"),s("span",{staticClass:"line-number"},[a._v("47")]),s("br"),s("span",{staticClass:"line-number"},[a._v("48")]),s("br"),s("span",{staticClass:"line-number"},[a._v("49")]),s("br"),s("span",{staticClass:"line-number"},[a._v("50")]),s("br"),s("span",{staticClass:"line-number"},[a._v("51")]),s("br"),s("span",{staticClass:"line-number"},[a._v("52")]),s("br"),s("span",{staticClass:"line-number"},[a._v("53")]),s("br"),s("span",{staticClass:"line-number"},[a._v("54")]),s("br"),s("span",{staticClass:"line-number"},[a._v("55")]),s("br"),s("span",{staticClass:"line-number"},[a._v("56")]),s("br"),s("span",{staticClass:"line-number"},[a._v("57")]),s("br"),s("span",{staticClass:"line-number"},[a._v("58")]),s("br"),s("span",{staticClass:"line-number"},[a._v("59")]),s("br"),s("span",{staticClass:"line-number"},[a._v("60")]),s("br"),s("span",{staticClass:"line-number"},[a._v("61")]),s("br"),s("span",{staticClass:"line-number"},[a._v("62")]),s("br")])]),s("h2",{attrs:{id:"_2-7-用户自定义函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-用户自定义函数"}},[a._v("#")]),a._v(" 2.7 用户自定义函数")]),a._v(" "),s("p",[a._v("用户可以通过 "),s("strong",[a._v("spark.udf")]),a._v(" 功能添加自定义函数，实现自定义功能。")]),a._v(" "),s("h3",{attrs:{id:"_2-7-1-udf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-1-udf"}},[a._v("#")]),a._v(" 2.7.1 UDF")]),a._v(" "),s("h4",{attrs:{id:"_1-创建-dataframe"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建-dataframe"}},[a._v("#")]),a._v(" 1) 创建 DataFrame")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('scala> val df = spark.read.json("data/user.json")\ndf: org.apache.spark.sql.DataFrame = [age: bigint， username: string]\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("h4",{attrs:{id:"_2-注册-udf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-注册-udf"}},[a._v("#")]),a._v(" 2) 注册 UDF")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('scala> spark.udf.register("addName",(x:String)=> "Name:"+x)\nres9: org.apache.spark.sql.expressions.UserDefinedFunction = \nUserDefinedFunction(<function1>,StringType,Some(List(StringType)))\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("h3",{attrs:{id:"_3-创建临时表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-创建临时表"}},[a._v("#")]),a._v(" 3) 创建临时表")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('scala> df.createOrReplaceTempView("people")\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h4",{attrs:{id:"_4-应用-udf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-应用-udf"}},[a._v("#")]),a._v(" 4) 应用 UDF")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('scala> spark.sql("Select addName(name),age from people").show()\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h3",{attrs:{id:"_2-7-2-udaf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-2-udaf"}},[a._v("#")]),a._v(" 2.7.2 UDAF")]),a._v(" "),s("p",[a._v("强类型的 Dataset 和弱类型的 DataFrame 都提供了相关的聚合函数， 如 count()，countDistinct()，avg()，max()，min()。除此之外，用户可以设定自己的自定义聚合函数。通过继承 UserDefinedAggregateFunction 来实现用户自定义弱类型聚合函数。从 Spark3.0 版本后，UserDefinedAggregateFunction 已经不推荐使用了。可以统一采用强类型聚合函数 "),s("strong",[a._v("Aggregator")])]),a._v(" "),s("p",[s("strong",[a._v("需求：计算平均工资")])]),a._v(" "),s("p",[a._v("一个需求可以采用很多种不同的方法实现需求")]),a._v(" "),s("h4",{attrs:{id:"_1-实现方式-rdd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-实现方式-rdd"}},[a._v("#")]),a._v(" 1) 实现方式 - RDD")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('val conf: SparkConf = new SparkConf().setAppName("app").setMaster("local[*]")\nval sc: SparkContext = new SparkContext(conf)\nval res: (Int, Int) = sc.makeRDD(List(("zhangsan", 20), ("lisi", 30), ("wangw", \n40))).map {\n case (name, age) => {\n (age, 1)\n }\n}.reduce {\n (t1, t2) => {\n \t(t1._1 + t2._1, t1._2 + t2._2)\n }\n}\nprintln(res._1/res._2)\n// 关闭连接\nsc.stop()\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br")])]),s("h4",{attrs:{id:"_2-实现方式-累加器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现方式-累加器"}},[a._v("#")]),a._v(" 2) 实现方式 - 累加器")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("  class MyAC extends AccumulatorV2[Int, Int] {\n    var sum: Int = 0\n    var count: Int = 0\n\n    override def isZero: Boolean = {\n      return sum == 0 && count == 0\n    }\n\n    override def copy(): AccumulatorV2[Int, Int] = {\n      val newMyAc = new MyAC\n      newMyAc.sum = this.sum\n      newMyAc.count = this.count\n      newMyAc\n    }\n\n    override def reset(): Unit = {\n      sum = 0\n      count = 0\n    }\n\n    override def add(v: Int): Unit = {\n      sum += v\n      count += 1\n    }\n\n    override def merge(other: AccumulatorV2[Int, Int]): Unit = {\n      other match {\n        case o: MyAC => {\n          sum += o.sum\n          count += o.count\n        }\n        case _ =>\n      }\n    }\n\n    override def value: Int = sum / count\n  }\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br"),s("span",{staticClass:"line-number"},[a._v("35")]),s("br"),s("span",{staticClass:"line-number"},[a._v("36")]),s("br"),s("span",{staticClass:"line-number"},[a._v("37")]),s("br")])]),s("h4",{attrs:{id:"_3-实现方式-udaf-弱类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-实现方式-udaf-弱类型"}},[a._v("#")]),a._v(" 3) 实现方式 - UDAF - 弱类型")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('object Spark_SparkSQL_UDAF {\n\n    def main(args: Array[String]): Unit = {\n\n        // TODO 创建SparkSQL的运行环境\n        val sparkConf = new SparkConf().setMaster("local[*]").setAppName("sparkSQL")\n        val spark = SparkSession.builder().config(sparkConf).getOrCreate()\n\n        val df = spark.read.json("datas/user.json")\n        df.createOrReplaceTempView("user")\n\n        spark.udf.register("ageAvg", new MyAvgUDAF())\n\n        spark.sql("select ageAvg(age) from user").show\n\n\n        // TODO 关闭环境\n        spark.close()\n    }\n    /*\n     定义类继承 UserDefinedAggregateFunction，并重写其中方法\n     自定义聚合函数类：计算年龄的平均值\n     1. 继承UserDefinedAggregateFunction\n     2. 重写方法(8)\n     */\n    class MyAvgUDAF extends UserDefinedAggregateFunction{\n        // 输入数据的结构 : Int\n        override def inputSchema: StructType = {\n            StructType(\n                Array(\n                    StructField("age", LongType)\n                )\n            )\n        }\n        // 缓冲区数据的结构 : Buffer\n        override def bufferSchema: StructType = {\n            StructType(\n                Array(\n                    StructField("total", LongType),\n                    StructField("count", LongType)\n                )\n            )\n        }\n\n        // 函数计算结果的数据类型：Out\n        override def dataType: DataType = LongType\n\n        // 函数的稳定性\n        override def deterministic: Boolean = true\n\n        // 缓冲区初始化\n        override def initialize(buffer: MutableAggregationBuffer): Unit = {\n            //buffer(0) = 0L\n            //buffer(1) = 0L\n\n            buffer.update(0, 0L)\n            buffer.update(1, 0L)\n        }\n\n        // 根据输入的值更新缓冲区数据\n        override def update(buffer: MutableAggregationBuffer, input: Row): Unit = {\n            buffer.update(0, buffer.getLong(0)+input.getLong(0))\n            buffer.update(1, buffer.getLong(1)+1)\n        }\n\n        // 缓冲区数据合并\n        override def merge(buffer1: MutableAggregationBuffer, buffer2: Row): Unit = {\n            buffer1.update(0, buffer1.getLong(0) + buffer2.getLong(0))\n            buffer1.update(1, buffer1.getLong(1) + buffer2.getLong(1))\n        }\n\n        // 计算平均值\n        override def evaluate(buffer: Row): Any = {\n            buffer.getLong(0)/buffer.getLong(1)\n        }\n    }\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br"),s("span",{staticClass:"line-number"},[a._v("35")]),s("br"),s("span",{staticClass:"line-number"},[a._v("36")]),s("br"),s("span",{staticClass:"line-number"},[a._v("37")]),s("br"),s("span",{staticClass:"line-number"},[a._v("38")]),s("br"),s("span",{staticClass:"line-number"},[a._v("39")]),s("br"),s("span",{staticClass:"line-number"},[a._v("40")]),s("br"),s("span",{staticClass:"line-number"},[a._v("41")]),s("br"),s("span",{staticClass:"line-number"},[a._v("42")]),s("br"),s("span",{staticClass:"line-number"},[a._v("43")]),s("br"),s("span",{staticClass:"line-number"},[a._v("44")]),s("br"),s("span",{staticClass:"line-number"},[a._v("45")]),s("br"),s("span",{staticClass:"line-number"},[a._v("46")]),s("br"),s("span",{staticClass:"line-number"},[a._v("47")]),s("br"),s("span",{staticClass:"line-number"},[a._v("48")]),s("br"),s("span",{staticClass:"line-number"},[a._v("49")]),s("br"),s("span",{staticClass:"line-number"},[a._v("50")]),s("br"),s("span",{staticClass:"line-number"},[a._v("51")]),s("br"),s("span",{staticClass:"line-number"},[a._v("52")]),s("br"),s("span",{staticClass:"line-number"},[a._v("53")]),s("br"),s("span",{staticClass:"line-number"},[a._v("54")]),s("br"),s("span",{staticClass:"line-number"},[a._v("55")]),s("br"),s("span",{staticClass:"line-number"},[a._v("56")]),s("br"),s("span",{staticClass:"line-number"},[a._v("57")]),s("br"),s("span",{staticClass:"line-number"},[a._v("58")]),s("br"),s("span",{staticClass:"line-number"},[a._v("59")]),s("br"),s("span",{staticClass:"line-number"},[a._v("60")]),s("br"),s("span",{staticClass:"line-number"},[a._v("61")]),s("br"),s("span",{staticClass:"line-number"},[a._v("62")]),s("br"),s("span",{staticClass:"line-number"},[a._v("63")]),s("br"),s("span",{staticClass:"line-number"},[a._v("64")]),s("br"),s("span",{staticClass:"line-number"},[a._v("65")]),s("br"),s("span",{staticClass:"line-number"},[a._v("66")]),s("br"),s("span",{staticClass:"line-number"},[a._v("67")]),s("br"),s("span",{staticClass:"line-number"},[a._v("68")]),s("br"),s("span",{staticClass:"line-number"},[a._v("69")]),s("br"),s("span",{staticClass:"line-number"},[a._v("70")]),s("br"),s("span",{staticClass:"line-number"},[a._v("71")]),s("br"),s("span",{staticClass:"line-number"},[a._v("72")]),s("br"),s("span",{staticClass:"line-number"},[a._v("73")]),s("br"),s("span",{staticClass:"line-number"},[a._v("74")]),s("br"),s("span",{staticClass:"line-number"},[a._v("75")]),s("br"),s("span",{staticClass:"line-number"},[a._v("76")]),s("br"),s("span",{staticClass:"line-number"},[a._v("77")]),s("br")])]),s("h4",{attrs:{id:"_4-实现方式-udaf-强类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-实现方式-udaf-强类型"}},[a._v("#")]),a._v(" 4) 实现方式 - UDAF - 强类型")]),a._v(" "),s("blockquote",[s("p",[a._v("Spark3.0 版本可以采用强类型的 Aggregator 方式代替 UserDefinedAggregateFunction")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('object Spark03_SparkSQL_UDAF1 {\n\n    def main(args: Array[String]): Unit = {\n\n        // TODO 创建SparkSQL的运行环境\n        val sparkConf = new SparkConf().setMaster("local[*]").setAppName("sparkSQL")\n        val spark = SparkSession.builder().config(sparkConf).getOrCreate()\n\n        val df = spark.read.json("datas/user.json")\n        df.createOrReplaceTempView("user")\n\n        spark.udf.register("ageAvg", functions.udaf(new MyAvgUDAF()))\n\n        spark.sql("select ageAvg(age) from user").show\n\n\n        // TODO 关闭环境\n        spark.close()\n    }\n    /*\n     自定义聚合函数类：计算年龄的平均值\n     1. 继承org.apache.spark.sql.expressions.Aggregator, 定义泛型\n         IN : 输入的数据类型 Long\n         BUF : 缓冲区的数据类型 Buff\n         OUT : 输出的数据类型 Long\n     2. 重写方法(6)\n     */\n    case class Buff( var total:Long, var count:Long )\n    class MyAvgUDAF extends Aggregator[Long, Buff, Long]{\n        // z & zero : 初始值或零值\n        // 缓冲区的初始化\n        override def zero: Buff = {\n            Buff(0L,0L)\n        }\n\n        // 根据输入的数据更新缓冲区的数据\n        override def reduce(buff: Buff, in: Long): Buff = {\n            buff.total = buff.total + in\n            buff.count = buff.count + 1\n            buff\n        }\n\n        // 合并缓冲区\n        override def merge(buff1: Buff, buff2: Buff): Buff = {\n            buff1.total = buff1.total + buff2.total\n            buff1.count = buff1.count + buff2.count\n            buff1\n        }\n\n        //计算结果\n        override def finish(buff: Buff): Long = {\n            buff.total / buff.count\n        }\n\n        // 缓冲区的编码操作\n        override def bufferEncoder: Encoder[Buff] = Encoders.product\n\n        // 输出的编码操作\n        override def outputEncoder: Encoder[Long] = Encoders.scalaLong\n    }\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br"),s("span",{staticClass:"line-number"},[a._v("35")]),s("br"),s("span",{staticClass:"line-number"},[a._v("36")]),s("br"),s("span",{staticClass:"line-number"},[a._v("37")]),s("br"),s("span",{staticClass:"line-number"},[a._v("38")]),s("br"),s("span",{staticClass:"line-number"},[a._v("39")]),s("br"),s("span",{staticClass:"line-number"},[a._v("40")]),s("br"),s("span",{staticClass:"line-number"},[a._v("41")]),s("br"),s("span",{staticClass:"line-number"},[a._v("42")]),s("br"),s("span",{staticClass:"line-number"},[a._v("43")]),s("br"),s("span",{staticClass:"line-number"},[a._v("44")]),s("br"),s("span",{staticClass:"line-number"},[a._v("45")]),s("br"),s("span",{staticClass:"line-number"},[a._v("46")]),s("br"),s("span",{staticClass:"line-number"},[a._v("47")]),s("br"),s("span",{staticClass:"line-number"},[a._v("48")]),s("br"),s("span",{staticClass:"line-number"},[a._v("49")]),s("br"),s("span",{staticClass:"line-number"},[a._v("50")]),s("br"),s("span",{staticClass:"line-number"},[a._v("51")]),s("br"),s("span",{staticClass:"line-number"},[a._v("52")]),s("br"),s("span",{staticClass:"line-number"},[a._v("53")]),s("br"),s("span",{staticClass:"line-number"},[a._v("54")]),s("br"),s("span",{staticClass:"line-number"},[a._v("55")]),s("br"),s("span",{staticClass:"line-number"},[a._v("56")]),s("br"),s("span",{staticClass:"line-number"},[a._v("57")]),s("br"),s("span",{staticClass:"line-number"},[a._v("58")]),s("br"),s("span",{staticClass:"line-number"},[a._v("59")]),s("br"),s("span",{staticClass:"line-number"},[a._v("60")]),s("br"),s("span",{staticClass:"line-number"},[a._v("61")]),s("br")])]),s("h2",{attrs:{id:"_2-8-数据的加载和保存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-数据的加载和保存"}},[a._v("#")]),a._v(" 2.8 数据的加载和保存")]),a._v(" "),s("h3",{attrs:{id:"_2-8-1-通用的加载和保存方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-1-通用的加载和保存方式"}},[a._v("#")]),a._v(" 2.8.1 通用的加载和保存方式")]),a._v(" "),s("p",[a._v("SparkSQL 提供了通用的保存数据和数据加载的方式。这里的通用指的是使用相同的 API，根据不同的参数读取和保存不同格式的数据，SparkSQL 默认读取和保存的文件格式 为 parquet")]),a._v(" "),s("h4",{attrs:{id:"_1-加载数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-加载数据"}},[a._v("#")]),a._v(" 1.加载数据")]),a._v(" "),s("p",[s("strong",[a._v("spark.read.load")]),a._v(" 是加载数据的通用方法")]),a._v(" "),s("p",[s("img",{attrs:{src:e(295),alt:"image-20231211220300472"}})]),a._v(" "),s("p",[a._v("如果读取不同格式的数据，可以对不同的数据格式进行设定")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('scala> spark.read.format("…")[.option("…")].load("…")\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v('➢ format("…")：指定加载的数据类型，包括"csv"、"jdbc"、"json"、"orc"、"parquet"和 "textFile"。')]),a._v(" "),s("p",[a._v('➢ load("…")：在"csv"、"jdbc"、"json"、"orc"、"parquet"和"textFile"格式下需要传入加载 数据的路径。')]),a._v(" "),s("p",[a._v('➢ option("…")：在"jdbc"格式下需要传入 JDBC 相应参数，url、user、password 和 dbtable')]),a._v(" "),s("p",[a._v("我们前面都是使用 read API 先把文件加载到 DataFrame 然后再查询，其实，我们也可以直 接在文件上进行查询: "),s("strong",[a._v("文件格式."),s("code",[a._v("文件路径")])])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('scala>spark.sql("select * from json.`/opt/module/data/user.json`").show\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h4",{attrs:{id:"_2-保存数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-保存数据"}},[a._v("#")]),a._v(" 2) 保存数据")]),a._v(" "),s("p",[s("strong",[a._v("df.write.save")]),a._v(" 是保存数据的通用方法")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("scala>df.write.\ncsv jdbc json orc parquet textFile… …\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[a._v("如果保存不同格式的数据，可以对不同的数据格式进行设定")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('scala>df.write.format("…")[.option("…")].save("…")\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v('➢ format("…")：指定保存的数据类型，包括"csv"、"jdbc"、"json"、"orc"、"parquet"和 "textFile"。')]),a._v(" "),s("p",[a._v('➢ save ("…")：在"csv"、"orc"、"parquet"和"textFile"格式下需要传入保存数据的路径。')]),a._v(" "),s("p",[a._v('➢ option("…")：在"jdbc"格式下需要传入 JDBC 相应参数，url、user、password 和 dbtable')]),a._v(" "),s("p",[a._v("保存操作可以使用 SaveMode, 用来指明如何处理数据，使用 mode()方法来设置。 有一点很重要: 这些 SaveMode 都是没有加锁的, 也不是原子操作。")]),a._v(" "),s("p",[a._v("SaveMode 是一个枚举类，其中的常量包括：")]),a._v(" "),s("p",[s("img",{attrs:{src:e(1227),alt:"image-20231211230001672"}})]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('df.write.mode("append").json("/opt/module/data/output")\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h3",{attrs:{id:"_2-8-2-parquet"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-2-parquet"}},[a._v("#")]),a._v(" 2.8.2 Parquet")]),a._v(" "),s("p",[a._v("Spark SQL 的默认数据源为 "),s("strong",[a._v("Parquet")]),a._v(" 格式。Parquet 是一种能够有效存储嵌套数据的列式存储格式。 数据源为 Parquet 文件时，Spark SQL 可以方便的执行所有的操作，不需要使用 format。 修改配置项 "),s("strong",[a._v("spark.sql.sources.default")]),a._v("，可修改默认数据源格式。")]),a._v(" "),s("h4",{attrs:{id:"_1-加载数据-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-加载数据-2"}},[a._v("#")]),a._v(" 1) 加载数据")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('scala> val df = spark.read.load("examples/src/main/resources/users.parquet")\nscala> df.show\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("h3",{attrs:{id:"_2-保存数据-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-保存数据-2"}},[a._v("#")]),a._v(" 2) 保存数据")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('cala> var df = spark.read.json("/opt/module/data/input/people.json")\n//保存为 parquet 格式\nscala> df.write.mode("append").save("/opt/module/data/output")\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("h3",{attrs:{id:"_2-8-3-json"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-3-json"}},[a._v("#")]),a._v(" 2.8.3 JSON")]),a._v(" "),s("p",[a._v("Spark SQL 能够自动推测 JSON 数据集的结构，并将它加载为一个 Dataset[Row]. 可以通过 SparkSession.read.json()去加载 JSON 文件。")]),a._v(" "),s("blockquote",[s("p",[a._v("注意：Spark 读取的 JSON 文件不是传统的 JSON 文件，每一行都应该是一个 JSON 串")])]),a._v(" "),s("p",[a._v("格式如下：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('{"name":"Michael"}\n{"name":"Andy"， "age":30}\n[{"name":"Justin"， "age":19},{"name":"Justin"， "age":19}]\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("h4",{attrs:{id:"_1-导入隐式转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-导入隐式转换"}},[a._v("#")]),a._v(" 1）导入隐式转换")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("import spark.implicits._\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h4",{attrs:{id:"_2-加载-json-文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-加载-json-文件"}},[a._v("#")]),a._v(" 2）加载 JSON 文件")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('val path = "/opt/module/spark-local/people.json"\nval peopleDF = spark.read.json(path)\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("h3",{attrs:{id:"_3-创建临时表-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-创建临时表-2"}},[a._v("#")]),a._v(" 3）创建临时表")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('peopleDF.createOrReplaceTempView("people")\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h4",{attrs:{id:"_4-数据查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-数据查询"}},[a._v("#")]),a._v(" 4）数据查询")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('val teenagerNamesDF = spark.sql("SELECT name FROM people WHERE age BETWEEN 13 AND 19")\nteenagerNamesDF.show()\n+------+\n| name |\n+------+\n|Justin|\n+------+\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br")])]),s("h3",{attrs:{id:"_2-8-4-csv"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-4-csv"}},[a._v("#")]),a._v(" 2.8.4 CSV")]),a._v(" "),s("p",[a._v("Spark SQL 可以配置 CSV 文件的列表信息，读取 CSV 文件,CSV 文件的第一行设置为数据列")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('spark.read.format("csv").option("sep", ";").option("inferSchema", "true").option("header", "true").load("data/user.csv")\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h3",{attrs:{id:"_2-8-5-mysql"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-5-mysql"}},[a._v("#")]),a._v(" 2.8.5 MySQL")]),a._v(" "),s("p",[a._v("Spark SQL 可以通过 JDBC 从关系型数据库中读取数据的方式创建 DataFrame，通过对 DataFrame 一系列的计算后，还可以将数据再写回关系型数据库中。如果使用 spark-shell 操作，可在启动 shell 时指定相关的数据库驱动路径或者将相关的数据库驱动放到 spark 的类路径下。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("bin/spark-shell --jars mysql-connector-java-5.1.27-bin.jar\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("我们这里只演示在 Idea 中通过 JDBC 对 Mysql 进行操作")]),a._v(" "),s("h4",{attrs:{id:"_1-导入依赖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-导入依赖"}},[a._v("#")]),a._v(" 1）导入依赖")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("<dependency>\n <groupId>mysql</groupId>\n <artifactId>mysql-connector-java</artifactId>\n <version>5.1.27</version>\n</dependency>\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("h4",{attrs:{id:"_2-读取数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-读取数据"}},[a._v("#")]),a._v(" 2）读取数据")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('val conf: SparkConf = new SparkConf().setMaster("local[*]").setAppName("SparkSQL")\n\n//创建 SparkSession 对象\nval spark: SparkSession = SparkSession.builder().config(conf).getOrCreate()\nimport spark.implicits._\n\n//方式 1：通用的 load 方法读取\nspark.read.format("jdbc")\n .option("url", "jdbc:mysql://linux1:3306/spark-sql")\n .option("driver", "com.mysql.jdbc.Driver")\n  .option("user", "root")\n .option("password", "123123")\n .option("dbtable", "user")\n .load().show\n \n//方式 2:通用的 load 方法读取 参数另一种形式\nspark.read.format("jdbc")\n .options(Map("url"->"jdbc:mysql://linux1:3306/spark-sql?user=root&password=\n123123",\n "dbtable"->"user","driver"->"com.mysql.jdbc.Driver")).load().show\n \n//方式 3:使用 jdbc 方法读取\nval props: Properties = new Properties()\nprops.setProperty("user", "root")\nprops.setProperty("password", "123123")\nval df: DataFrame = spark.read.jdbc("jdbc:mysql://linux1:3306/spark-sql", "user", props)\ndf.show\n\n//释放资源\nspark.stop()\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br")])]),s("h4",{attrs:{id:"_3-写入数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-写入数据"}},[a._v("#")]),a._v(" 3）写入数据")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('case class User2(name: String, age: Long)\n。。。\nval conf: SparkConf = new \nSparkConf().setMaster("local[*]").setAppName("SparkSQL")\n\n//创建 SparkSession 对象\nval spark: SparkSession = SparkSession.builder().config(conf).getOrCreate()\nimport spark.implicits._\nval rdd: RDD[User2] = spark.sparkContext.makeRDD(List(User2("lisi", 20), \nUser2("zs", 30)))\nval ds: Dataset[User2] = rdd.toDS\n\n//方式 1：通用的方式 format 指定写出类型\nds.write\n .format("jdbc")\n .option("url", "jdbc:mysql://linux1:3306/spark-sql")\n .option("user", "root")\n .option("password", "123123")\n .option("dbtable", "user")\n .mode(SaveMode.Append)\n .save()\n \n//方式 2：通过 jdbc 方法\nval props: Properties = new Properties()\nprops.setProperty("user", "root")\nprops.setProperty("password", "123123")\nds.write.mode(SaveMode.Append).jdbc("jdbc:mysql://linux1:3306/spark-sql", \n"user", props)\n//释放资源\nspark.stop()\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br")])]),s("h3",{attrs:{id:"_2-8-6-hive"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-6-hive"}},[a._v("#")]),a._v(" 2.8.6 Hive")]),a._v(" "),s("p",[a._v("Apache Hive 是 Hadoop 上的 SQL 引擎，Spark SQL 编译时可以包含 Hive 支持，也可以不包含。包含 Hive 支持的 Spark SQL 可以支持 Hive 表访问、UDF (用户自定义函数)以及 Hive 查询语言(HiveQL/HQL)等。需要强调的一点是，如果要在 Spark SQL 中包含 Hive 的库，并不需要事先安装 Hive。一般来说，最好还是在编译 Spark SQL 时引入 Hive 支持，这样就可以使用这些特性了。如果你下载的是二进制版本的 Spark，它应该已经在编 译时添加了 Hive 支持。")]),a._v(" "),s("p",[a._v("若要把 Spark SQL 连接到一个部署好的 Hive 上，你必须把 hive-site.xml 复制到 Spark 的配置文件目录中($SPARK_HOME/conf)。即使没有部署好 Hive，Spark SQL 也可以 运行。 需要注意的是，如果你没有部署好 Hive，Spark SQL 会在当前的工作目录中创建出 自己的 Hive 元数据仓库，叫作 metastore_db。此外，如果你尝试使用 HiveQL 中的 CREATE TABLE (并非 CREATE EXTERNAL TABLE)语句来创建表，这些表会被放在你默 认的文件系统中的 /user/hive/warehouse 目录中(如果你的 classpath 中有配好的 hdfs-site.xml，默认的文件系统就是 HDFS，否则就是本地文件系统)。 spark-shell 默认是 Hive 支持的；代码中是默认不支持的，需要手动指定（加一个参数即可）。")]),a._v(" "),s("h4",{attrs:{id:"_1-内嵌的-hive"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-内嵌的-hive"}},[a._v("#")]),a._v(" 1）内嵌的 HIVE")]),a._v(" "),s("p",[a._v("如果使用 Spark 内嵌的 Hive, 则什么都不用做, 直接使用即可.\nHive 的元数据存储在 derby 中, 默认仓库地址:$SPARK_HOME/spark-warehouse")]),a._v(" "),s("blockquote",[s("p",[a._v("spark-shell")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('scala> spark.sql("show tables").show\n。。。\n+--------+---------+-----------+\n|database|tableName|isTemporary|\n+--------+---------+-----------+\n+--------+---------+-----------+\nscala> spark.sql("create table aa(id int)")\n。。。\nscala> spark.sql("show tables").show\n+--------+---------+-----------+\n|database|tableName|isTemporary|\n+--------+---------+-----------+\n| default| aa| false|\n+--------+---------+-----------+\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br")])]),s("p",[a._v("向表加载本地数据")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('scala> spark.sql("load data local inpath \'input/ids.txt\' into table aa")\n。。。\nscala> spark.sql("select * from aa").show\n+---+\n| id|\n+---+\n| 1|\n| 2|\n| 3|\n| 4|\n+---+\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br")])]),s("blockquote",[s("p",[a._v("在实际使用中, 几乎没有任何人会使用内置的 Hive")])]),a._v(" "),s("p",[a._v("2）外部的 HIVE")]),a._v(" "),s("p",[a._v("如果想连接外部已经部署好的 Hive，需要通过以下几个步骤：")]),a._v(" "),s("p",[a._v("➢ Spark 要接管 Hive 需要把 hive-site.xml 拷贝到 conf/目录下")]),a._v(" "),s("p",[a._v("➢ 把 Mysql 的驱动 copy 到 jars/目录下")]),a._v(" "),s("p",[a._v("➢ 如果访问不到 hdfs，则需要把 core-site.xml 和 hdfs-site.xml 拷贝到 conf/目录下")]),a._v(" "),s("p",[a._v("➢ 重启 spark-shell")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('scala> spark.sql("show tables").show\n23/04/25 22:05:14 WARN ObjectStore: Failed to get database global_temp, returning \nNoSuchObjectException\n+--------+--------------------+-----------+\n|database| tableName|isTemporary|\n+--------+--------------------+-----------+\n| default| emp| false|\n| default|hive_hbase_emp_table| false|\n| default| relevance_hbase_emp| false|\n| default| staff_hive| false|\n| default| ttt| false|\n| default| user_visit_action| false|\n+--------+--------------------+-----------+\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br")])]),s("h4",{attrs:{id:"_3-运行-spark-sql-cli"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-运行-spark-sql-cli"}},[a._v("#")]),a._v(" 3）运行 Spark SQL CLI")]),a._v(" "),s("p",[a._v("Spark SQL CLI 可以很方便的在本地运行 Hive 元数据服务以及从命令行执行查询任务。在 Spark 目录下执行如下命令启动 Spark SQL CLI，直接执行 SQL 语句，类似一 Hive 窗口")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("bin/spark-sql\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h4",{attrs:{id:"_4-运行-spark-beeline"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-运行-spark-beeline"}},[a._v("#")]),a._v(" 4）运行 Spark beeline")]),a._v(" "),s("p",[a._v("Spark Thrift Server 是 Spark 社区基于 HiveServer2 实现的一个 Thrift 服务。旨在无缝兼容\nHiveServer2。因为 Spark Thrift Server 的接口和协议都和 HiveServer2 完全一致，因此我们部\n署好 Spark Thrift Server 后，可以直接使用 hive 的 beeline 访问 Spark Thrift Server 执行相关\n语句。Spark Thrift Server 的目的也只是取代 HiveServer2，因此它依旧可以和 Hive Metastore\n进行交互，获取到 hive 的元数据。\n如果想连接 Thrift Server，需要通过以下几个步骤：")]),a._v(" "),s("p",[a._v("➢ Spark 要接管 Hive 需要把 hive-site.xml 拷贝到 conf/目录下")]),a._v(" "),s("p",[a._v("➢ 把 Mysql 的驱动 copy 到 jars/目录下")]),a._v(" "),s("p",[a._v("➢ 如果访问不到 hdfs，则需要把 core-site.xml 和 hdfs-site.xml 拷贝到 conf/目录下")]),a._v(" "),s("p",[a._v("➢ 启动 Thrift Server")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("sbin/start-thriftserver.sh\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("➢ 使用 beeline 连接 Thrift Server")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("bin/beeline -u jdbc:hive2://linux1:10000 -n root\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:e(1228),alt:"image-20231211231338332"}})]),a._v(" "),s("h4",{attrs:{id:"_5-代码操作-hive"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-代码操作-hive"}},[a._v("#")]),a._v(" 5）代码操作 Hive")]),a._v(" "),s("p",[a._v("1）导入依赖")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("<dependency>\n <groupId>org.apache.spark</groupId>\n <artifactId>spark-hive_2.12</artifactId>\n <version>3.0.0</version>\n</dependency>\n<dependency>\n <groupId>org.apache.hive</groupId>\n <artifactId>hive-exec</artifactId>\n <version>1.2.1</version>\n</dependency>\n<dependency>\n <groupId>mysql</groupId>\n <artifactId>mysql-connector-java</artifactId>\n <version>5.1.27</version>\n</dependency>\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br")])]),s("p",[a._v("2）将 hive-site.xml 文件拷贝到项目的 resources 目录中，代码实现")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('//创建 SparkSession\nval spark: SparkSession = SparkSession\n .builder()\n .enableHiveSupport()\n .master("local[*]")\n .appName("sql")\n .getOrCreate()\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br")])]),s("blockquote",[s("p",[a._v("注意：在开发工具中创建数据库默认是在本地仓库，通过参数修改数据库仓库的地址:")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('config("spark.sql.warehouse.dir", "hdfs://linux1:8020/user/hive/warehouse")\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("如果在执行操作时，出现如下错误：")]),a._v(" "),s("p",[s("img",{attrs:{src:e(1229),alt:"image-20231211231458428"}})]),a._v(" "),s("p",[a._v("可以代码最前面增加如下代码解决：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('System.setProperty("HADOOP_USER_NAME", "root")\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("此处的 root 改为你们自己的 hadoop 用户名")])])}),[],!1,null,null,null);s.default=t.exports},295:function(a,s,e){a.exports=e.p+"assets/img/image-20231211220300472.42b4c6dc.png"}}]);