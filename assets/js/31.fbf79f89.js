(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{518:function(s,a,e){"use strict";e.r(a);var n=e(4),t=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("LinkedHashMap 可以通过重写 removeEldestEntry 方法实现 LRU（Least Recently Used）算法。具体实现步骤如下：")]),s._v(" "),a("ol",[a("li",[s._v("创建一个 LinkedHashMap 对象，并设置 accessOrder 为 true，表示按照访问顺序排序。")]),s._v(" "),a("li",[s._v("重写 removeEldestEntry 方法，当 map 中的元素个数超过指定的阈值时，删除最近最少使用的元素。")]),s._v(" "),a("li",[s._v("在使用 map 时，每次访问一个元素时，都会将该元素移到链表的末尾，表示最近使用过。")])]),s._v(" "),a("p",[s._v("示例代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public class LRUCache<K, V> extends LinkedHashMap<K, V> {\n    private int capacity;\n\n    public LRUCache(int capacity) {\n        super(capacity, .75f, true);\n        this.capacity = capacity;\n    }\n\n    @Override\n    protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {\n        return size() > capacity;\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("在使用 LRUCache 时，只需要像使用普通的 Map 一样即可，例如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('LRUCache<Integer, String> cache = new LRUCache<>(2);\ncache.put(1, "a");\ncache.put(2, "b");\ncache.get(1);\ncache.put(3, "c");\nSystem.out.println(cache); // 输出：{1=a, 3=c}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("在上述代码中，容量为 2，先放入 1 和 2 两个元素，然后访问 1，再放入 3，此时 2 就会被删除，输出结果为{1=a, 3=c}。")])])}),[],!1,null,null,null);a.default=t.exports}}]);