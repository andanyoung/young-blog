(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{494:function(a,s,e){a.exports=e.p+"assets/img/640-1689747409061-60.6fad854e.png"},495:function(a,s,e){a.exports=e.p+"assets/img/640-1689747406347-57.d2cf21e7.png"},496:function(a,s,e){a.exports=e.p+"assets/img/640-1689747404043-54.6f71b6a4.png"},497:function(a,s,e){a.exports=e.p+"assets/img/640-1689747402163-51.0c63aa76.png"},498:function(a,s,e){a.exports=e.p+"assets/img/640-1689747399597-48.287c96f0.png"},499:function(a,s,e){a.exports=e.p+"assets/img/640-1689747397352-45.eb3b6030.png"},500:function(a,s,e){a.exports=e.p+"assets/img/640-1689747394707-42.33ad7778.png"},501:function(a,s,e){a.exports=e.p+"assets/img/640-1689747392667-39.5c0116a6.png"},502:function(a,s,e){a.exports=e.p+"assets/img/640-1689747390847-36.04c852ae.png"},503:function(a,s,e){a.exports=e.p+"assets/img/640-1689747388633-33.57240da4.png"},504:function(a,s,e){a.exports=e.p+"assets/img/640-1689747386605-30.f35c0365.png"},505:function(a,s,e){a.exports=e.p+"assets/img/640-1689747384651-27.0c46572f.png"},506:function(a,s,e){a.exports=e.p+"assets/img/640-1689747381868-24.c72fbeb0.png"},507:function(a,s,e){a.exports=e.p+"assets/img/640-1689747379804-21.4d75f6e1.png"},508:function(a,s,e){a.exports=e.p+"assets/img/640-1689747377061-18.9b724adf.png"},509:function(a,s,e){a.exports=e.p+"assets/img/640-1689747375342-15.912948f7.png"},510:function(a,s,e){a.exports=e.p+"assets/img/640-1689747373073-12.7013a7bd.png"},511:function(a,s,e){a.exports=e.p+"assets/img/640-1689747370955-9.488757cd.png"},512:function(a,s,e){a.exports=e.p+"assets/img/640-16855955-qwqeq.e977369b.png"},513:function(a,s,e){a.exports=e.p+"assets/img/640-1689747353077-3.61f44c6f.png"},514:function(a,s,e){a.exports=e.p+"assets/img/640-1689747355351-6.d3c0dcbb.png"},867:function(a,s,e){"use strict";e.r(s);var t=e(4),n=Object(t.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p",[a._v("我们在日常工作中广泛使用 mybatis 作为数据持久层框架，但是 mybatis 的执行流程是怎么样的，你了解过吗。本文将从源码角度，带你分析 mybatis 的工作原理。")]),a._v(" "),s("p",[a._v("先看一个简单的例子，以 Service 调用 Mapper 接口为例：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('public interface StudentMapper {\n    @Select("select * from student")\n    public List<Map<String,Object>> query();\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('@Service("studentService")\npublic class StudentServiceImpl implements StudentService {\n    @Autowired\n    StudentMapper studentMapper;\n\n    @Override\n    public List<Map<String, Object>> query() {\n        return studentMapper.select();\n    }\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br")])]),s("p",[a._v("向 Service 中注入这个 Mapper 并调用时，你知道这时注入的是什么吗？")]),a._v(" "),s("p",[s("img",{attrs:{src:e(494),alt:""}})]),a._v(" "),s("p",[a._v("通过调试，可以知道这时实际的 studentMapper 是一个类型为 MapperProxy 的代理对象，下面将从 myabtis 环境初始化开始，具体分析代理对象的产生过程。（不熟悉代理对象的同学，可以查看之前专门讲 "),s("a",{attrs:{href:"https://blog.csdn.net/agonie201218/article/details/123722767t",target:"_blank",rel:"noopener noreferrer"}},[a._v("java 代理"),s("OutboundLink")],1),a._v("的文章）")]),a._v(" "),s("h1",{attrs:{id:"一、配置-sqlsessionfactorybean-时都做了什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、配置-sqlsessionfactorybean-时都做了什么"}},[a._v("#")]),a._v(" "),s("strong",[a._v("一、配置 SqlSessionFactoryBean 时都做了什么？")])]),a._v(" "),s("p",[a._v("在进行 spring 和 mybatis 整合时，会用 xml 或者注解的方式去配置一个 SqlSessionFactoryBean，本文中以注解方式为例：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("@Bean\npublic SqlSessionFactoryBean sqlSessionFactoryBean(DataSource dataSource){\n   SqlSessionFactoryBean sqlSessionFactoryBean=new SqlSessionFactoryBean();\n   sqlSessionFactoryBean.setDataSource(dataSource);\n   return  sqlSessionFactoryBean;\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("p",[a._v("看一下 SqlSessionFactoryBean 的继承实现关系：")]),a._v(" "),s("p",[s("img",{attrs:{src:e(495),alt:""}})]),a._v(" "),s("p",[a._v("先看 spring 中两个非常重要的接口，FactoryBean 和 InitializingBean。")]),a._v(" "),s("h3",{attrs:{id:"factorybean"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#factorybean"}},[a._v("#")]),a._v(" "),s("strong",[a._v("FactoryBean：")])]),a._v(" "),s("p",[a._v("FactoryBean 是一个 spring 中比较特殊的 Bean，通过它的 getObject() 方法可以返回一个对象实例。SqlSessionFactoryBean 中 getObject() 方法的实现：")]),a._v(" "),s("p",[s("img",{attrs:{src:e(496),alt:""}})]),a._v(" "),s("p",[a._v("在这里用于创建并返回一个 SqlSessionFactory，在 spring +mybatis 的环境下，我们使用 SqlSessionFactoryBean 来充当 SqlSessionFactory。")]),a._v(" "),s("h3",{attrs:{id:"initializingbean"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#initializingbean"}},[a._v("#")]),a._v(" "),s("strong",[a._v("InitializingBean：")])]),a._v(" "),s("p",[a._v("InitializingBean 接口中只有一个方法，afterPropertiesSet()，所有实现了该接口的类，在 bean 的初始化之前都要调用这个方法。可以看出在上面的 getObject 方法中，如果 SqlSessionFactory 为空，会调用这个方法创建 SqlSessionFactory。")]),a._v(" "),s("p",[s("img",{attrs:{src:e(497),alt:""}})]),a._v(" "),s("p",[a._v("通过调用 SqlSessionFactoryBuilder 的 build 方法，最终返回了一个 DefaultSqlSessionFactory 实例，这个 DefaultSqlSessionFactory 中保存了一个非常重要的 Configuration 对象。")]),a._v(" "),s("h1",{attrs:{id:"二、-mapperscan-都做了什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、-mapperscan-都做了什么"}},[a._v("#")]),a._v(" "),s("strong",[a._v("二、@MapperScan 都做了什么？")])]),a._v(" "),s("p",[a._v("在注解配置 mybatis 时，通过 @MapperScan 指定 Mapper 存放的包，就能自动为我们把接口实现成类。那么这是怎么实现的呢？")]),a._v(" "),s("p",[a._v("点开 @MapperScan 的源码，发现上面还有一行非常重要的注解：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("@Import(MapperScannerRegistrar.class)\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:e(498),alt:""}})]),a._v(" "),s("p",[a._v("ImportBeanDefinitionRegistrar 接口提供 registerBeanDefinitions 方法向用户暴露了 BeanDefinitionRegistry，也就是说可以让用户手动创建 BeanDefinition 并使用该注册器注册到 spring 容器中。")]),a._v(" "),s("p",[a._v("查看 MapperScannerRegistrar 的方法 registerBeanDefinitions 中的核心代码：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("ClassPathMapperScanner scanner = new ClassPathMapperScanner(registry);\n……\nscanner.doScan(StringUtils.toStringArray(basePackages));\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("p",[a._v("主要是创建了一个 Mapper 扫描器，开启扫描。")]),a._v(" "),s("p",[a._v("ClassPathMapperScanner 中 doScan 方法：")]),a._v(" "),s("p",[s("img",{attrs:{src:e(499),alt:""}})]),a._v(" "),s("p",[a._v("这里对生成的 mapper 的 bean 定义做了进一步处理")]),a._v(" "),s("p",[a._v("进入 processBeanDefinitions() 方法：")]),a._v(" "),s("p",[s("img",{attrs:{src:e(500),alt:""}})]),a._v(" "),s("p",[a._v("注意画框代码及上方的注释，先看一下从 BeanDefinitionHolder 获得 BeanDefinition 时 beanClass 初始的值：")]),a._v(" "),s("p",[s("img",{attrs:{src:e(501),alt:""}})]),a._v(" "),s("p",[a._v("等待 setBeanClass 执行完毕：")]),a._v(" "),s("p",[s("img",{attrs:{src:e(502),alt:""}})]),a._v(" "),s("p",[a._v("通过 definition.setBeanClass() 把原来的 BeanClass 的类型替换成了 MapperFactoryBean 类型。到这，完成了 Mapper 接口加载定义阶段中非常重要的一步，而这也是生成代理对象 MapperProxy 的关键。")]),a._v(" "),s("h1",{attrs:{id:"三、mybatis-如何生成代理对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、mybatis-如何生成代理对象"}},[a._v("#")]),a._v(" "),s("strong",[a._v("三、mybatis 如何生成代理对象？")])]),a._v(" "),s("p",[a._v("看一下 MapperFactoryBean 的继承关系：")]),a._v(" "),s("p",[s("img",{attrs:{src:e(503),alt:""}})]),a._v(" "),s("p",[a._v("MapperFactoryBean 继承的 SqlSessionDaoSupport 类实现了 InitializingBean 接口，那么我们还是首先找 afterPropertiesSet() 方法：")]),a._v(" "),s("p",[s("img",{attrs:{src:e(504),alt:""}})]),a._v(" "),s("p",[a._v("DaoSupport 中，最终调用 MapperFactoryBean 中的方法：")]),a._v(" "),s("p",[s("img",{attrs:{src:e(505),alt:""}})]),a._v(" "),s("p",[a._v("首先通过获取 sqlSession 获得了非常重要的配置类 Configuration，然后查看一下 addMapper 方法，最终调用的是 MapperRegistry 的 addMapper 方法：")]),a._v(" "),s("p",[s("img",{attrs:{src:e(506),alt:""}})]),a._v(" "),s("p",[a._v("红框中的代码为我们创建了 Mapper 的代理工厂对象（还不是 Mapper 的代理对象），并把它放入了 knownMappers 这个 Map 中。")]),a._v(" "),s("p",[s("img",{attrs:{src:e(507),alt:""}})]),a._v(" "),s("p",[a._v("在这一步，只是简单初始化了 MapperProxyFactory，把我们自己的 mapper 的类型传给了它，还并没有真正产生代理对象。")]),a._v(" "),s("p",[a._v("MapperRegistry 并在之后的 parse() 方法中完成了 xml 文件的解析，每一个 sql 方法都被解析成了一个 MappedStatement 对象，并添加到了配置类 Configuration 对象中。")]),a._v(" "),s("h3",{attrs:{id:"mapperfactorybean-最终返回了什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mapperfactorybean-最终返回了什么"}},[a._v("#")]),a._v(" "),s("strong",[a._v("MapperFactoryBean 最终返回了什么？")])]),a._v(" "),s("p",[a._v("因为 MapperFactoryBean 实现了 FactoryBean 接口，所以我们看看 getObject 方法究竟返回了什么：")]),a._v(" "),s("p",[s("img",{attrs:{src:e(508),alt:""}})]),a._v(" "),s("p",[s("img",{attrs:{src:e(509),alt:""}})]),a._v(" "),s("p",[a._v("最终调用 MapperRegistry 的 getMapper 方法：")]),a._v(" "),s("p",[s("img",{attrs:{src:e(510),alt:""}})]),a._v(" "),s("p",[a._v("这里调用的了 mybatis 刚才生成的 MapperProxyFactory，帮助我们实例化并返回了一个代理对象。")]),a._v(" "),s("p",[a._v("MapperProxyFactory 中使用 newInstance 方法，实例化 MapperProxy，用于生成代理：")]),a._v(" "),s("p",[s("img",{attrs:{src:e(511),alt:""}})]),a._v(" "),s("p",[a._v("至此，我们已经弄明白了文章开头的 MapperProxy 是如何生成的。")]),a._v(" "),s("h1",{attrs:{id:"四、mapperproxy-代理对象如何执行-sql-语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、mapperproxy-代理对象如何执行-sql-语句"}},[a._v("#")]),a._v(" "),s("strong",[a._v("四、MapperProxy 代理对象如何执行 sql 语句？")])]),a._v(" "),s("p",[a._v("在 StudentServiceImpl 中的 query 方法中打一个断点跟踪语句，你会发现实际执行的就是代理类 MapperProxy 中的 invoke() 方法。")]),a._v(" "),s("p",[s("img",{attrs:{src:e(512),alt:""}})]),a._v(" "),s("p",[a._v("MapperProxy 在作为代理类的同时，自身实现了 InvocationHandler 接口，所以 invoke 方法就是真正执行的代理逻辑。")]),a._v(" "),s("p",[s("img",{attrs:{src:e(513),alt:""}})]),a._v(" "),s("p",[a._v("在这里最终调用了 MapperMethod 的 execute 方法实际去执行了 sql 语句。")]),a._v(" "),s("p",[s("img",{attrs:{src:e(514),alt:""}})]),a._v(" "),s("p",[a._v("在该方法中，根据 sql 语句执行类型，调用 sqlSession 对应的方法执行并将结果返回给用户。至此，mybatis 在 spring 环境下一次调用全部完成。")])])}),[],!1,null,null,null);s.default=n.exports}}]);