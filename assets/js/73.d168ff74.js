(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{587:function(r,e,o){"use strict";o.r(e);var v=o(4),_=Object(v.a)({},(function(){var r=this,e=r._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("p",[r._v("Nginx 启动后，以 daemon 多进程⽅式在后台运⾏，包括⼀个 Master 进程和多个 Worker 进程，Master 进程是领导，是⽼⼤，Worker 进程是⼲活的⼩弟。")]),r._v(" "),e("p",[e("img",{attrs:{src:"http://md7.admin4j.com/blog/202303281534069.png",alt:"image-20230328153434015"}})]),r._v(" "),e("ul",[e("li",[e("p",[r._v("master 进程")]),r._v(" "),e("p",[r._v("主要是管理 worker 进程，⽐如：")]),r._v(" "),e("ul",[e("li",[r._v("接收外界信号，向各 worker 进程发送信号(./nginx -s reload)")]),r._v(" "),e("li",[r._v("监控 worker 进程的运⾏状态，当 worker 进程异常退出后 Master 进程会⾃动重新启动新的 worker 进程等")])])]),r._v(" "),e("li",[e("p",[r._v("worker 进程")]),r._v(" "),e("p",[r._v("worker 进程具体处理⽹络请求。多个 worker 进程之间是对等的，他们同等竞争来⾃客户端的请求，"),e("strong",[r._v("各进程互相之间是独⽴的")]),r._v("。⼀个请求，只可能在⼀个 worker 进程中处理，⼀个 worker 进程， 不可能处理其它进程的请求。worker 进程的个数是可以设置的，⼀般设置与机器 cpu 核数⼀致。")]),r._v(" "),e("p",[r._v("Nginx 进程模型示意图如下")]),r._v(" "),e("p",[e("img",{attrs:{src:"http://md7.admin4j.com/blog/202303281536822.png",alt:"image-20230328153647752"}})])]),r._v(" "),e("li",[e("p",[r._v("以 ./nginx -s reload 来说明 nginx 信号处理这部分")]),r._v(" "),e("ol",[e("li",[r._v("master 进程对配置⽂件进⾏语法检查")]),r._v(" "),e("li",[r._v("尝试配置（⽐如修改了监听端⼝，那就尝试分配新的监听端⼝）")]),r._v(" "),e("li",[r._v("尝试成功则使⽤新的配置，新建 worker 进程")]),r._v(" "),e("li",[r._v("新建成功，给旧的 worker 进程发送关闭消息")]),r._v(" "),e("li",[r._v("旧的 worker 进程收到信号会继续服务，直到把当前进程接收到的请求处理完毕后关闭 所以 reload 之后 worker 进程 pid 是发⽣了变化的")])]),r._v(" "),e("p",[e("img",{attrs:{src:"http://md7.admin4j.com/blog/202303281538631.png",alt:"image-20230328153857580"}})])]),r._v(" "),e("li",[e("p",[r._v("worker 进程处理请求部分的说明")]),r._v(" "),e("p",[r._v("例如，我们监听 9003 端⼝，⼀个请求到来时，如果有多个 worker 进程，那么每个 worker 进程都有 可能处理这个链接。")]),r._v(" "),e("ul",[e("li",[r._v("master 进程创建之后，会建⽴好需要监听的的 socket，然后从 master 进程再 fork 出多个 worker 进程。所以，所有 worker 进程的监听描述符 listenfd 在新连接到来时都变得可读。")]),r._v(" "),e("li",[r._v("nginx 使⽤互斥锁来保证只有⼀个 worker 进程能够处理请求，拿到互斥锁的那个进程注册 listenfd 读事件，在读事件⾥调⽤ accept 接受该连接，然后解析、处理、返回客户端")])])]),r._v(" "),e("li",[e("p",[r._v("nginx 多进程模型好处")]),r._v(" "),e("ul",[e("li",[r._v("每个 worker 进程都是独⽴的，不需要加锁，节省开销")]),r._v(" "),e("li",[r._v("每个 worker 进程都是独⽴的，互不影响，⼀个异常结束，其他的照样能提供服务")]),r._v(" "),e("li",[r._v("多进程模型为 reload 热部署机制提供了⽀撑")])])])])])}),[],!1,null,null,null);e.default=_.exports}}]);