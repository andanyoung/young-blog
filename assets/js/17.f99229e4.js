(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{1136:function(e,t,v){"use strict";v.r(t);var n=v(4),_=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("我们去面试的时候，经常被问到"),t("code",[e._v("netty")]),e._v("的题目。我整理了"),t("code",[e._v("netty")]),e._v("的"),t("code",[e._v("32")]),e._v("连问。小伙伴们，收藏起来慢慢看吧。")]),e._v(" "),t("h2",{attrs:{id:"_1-netty-是什么-它的主要特点是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-netty-是什么-它的主要特点是什么"}},[e._v("#")]),e._v(" 1. Netty 是什么，它的主要特点是什么？")]),e._v(" "),t("p",[t("code",[e._v("Netty")]),e._v("是一个高性能、异步事件驱动的网络编程框架，它基于"),t("code",[e._v("NIO")]),e._v("技术实现，提供了简单易用的 "),t("code",[e._v("API")]),e._v("，用于构建各种类型的网络应用程序。其主要特点包括：")]),e._v(" "),t("p",[t("img",{attrs:{src:v(833),alt:"图片"}})]),e._v(" "),t("ul",[t("li",[e._v("高性能："),t("code",[e._v("Netty")]),e._v("使用异步"),t("code",[e._v("I/O")]),e._v("，非阻塞式处理方式，可处理大量并发连接，提高系统性能。")]),e._v(" "),t("li",[e._v("易于使用："),t("code",[e._v("Netty")]),e._v("提供了高度抽象的"),t("code",[e._v("API")]),e._v("，可以快速构建各种类型的网络应用程序，如"),t("code",[e._v("Web")]),e._v("服务、消息推送、实时游戏等。")]),e._v(" "),t("li",[e._v("灵活可扩展："),t("code",[e._v("Netty")]),e._v("提供了许多可插拔的组件，可以根据需要自由组合，以满足各种业务场景。")])]),e._v(" "),t("h2",{attrs:{id:"_2-netty-应用场景了解么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-netty-应用场景了解么"}},[e._v("#")]),e._v(" 2. Netty 应用场景了解么？")]),e._v(" "),t("p",[t("code",[e._v("Netty")]),e._v(" 在网络编程中应用非常广泛，常用于开发高性能、高吞吐量、低延迟的网络应用程序，应用场景如下：")]),e._v(" "),t("p",[t("img",{attrs:{src:v(834),alt:"图片"}})]),e._v(" "),t("ul",[t("li",[e._v("服务器间高性能通信，比如"),t("code",[e._v("RPC、HTTP、WebSocket")]),e._v("等协议的实现")]),e._v(" "),t("li",[e._v("分布式系统的消息传输，比如"),t("code",[e._v("Kafka、ActiveMQ")]),e._v("等消息队列")]),e._v(" "),t("li",[e._v("游戏服务器，支持高并发的游戏服务端开发")]),e._v(" "),t("li",[e._v("实时流数据的处理，比如音视频流处理、实时数据传输等")]),e._v(" "),t("li",[e._v("其他高性能的网络应用程序开发")])]),e._v(" "),t("p",[t("strong",[e._v("阿里分布式服务框架 Dubbo， 消息中间件 RocketMQ 都是使用 Netty 作为通讯的基础。")])]),e._v(" "),t("h2",{attrs:{id:"_3-netty-核心组件有哪些-分别有什么作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-netty-核心组件有哪些-分别有什么作用"}},[e._v("#")]),e._v(" 3. Netty 核心组件有哪些？分别有什么作用？")]),e._v(" "),t("p",[e._v("Netty 的核心组件包括以下几个部分：")]),e._v(" "),t("p",[t("img",{attrs:{src:v(835),alt:"图片"}})]),e._v(" "),t("ul",[t("li",[e._v("Channel：用于网络通信的通道，可以理解为"),t("code",[e._v("Java NIO")]),e._v("中的"),t("code",[e._v("SocketChannel")]),e._v("。")]),e._v(" "),t("li",[e._v("ChannelFuture：异步操作的结果，可以添加监听器以便在操作完成时得到通知。")]),e._v(" "),t("li",[e._v("EventLoop：事件循环器，用于处理所有"),t("code",[e._v("I/O")]),e._v("事件和请求。"),t("code",[e._v("Netty")]),e._v("的"),t("code",[e._v("I/O")]),e._v("操作都是异步非阻塞的，它们由"),t("code",[e._v("EventLoop")]),e._v("处理并以事件的方式触发回调函数。")]),e._v(" "),t("li",[e._v("EventLoopGroup：由一个或多个"),t("code",[e._v("EventLoop")]),e._v("组成的组，用于处理所有的"),t("code",[e._v("Channel")]),e._v("的"),t("code",[e._v("I/O")]),e._v("操作，可以将其看作是一个线程池。")]),e._v(" "),t("li",[e._v("ChannelHandler：用于处理"),t("code",[e._v("Channel")]),e._v("上的"),t("code",[e._v("I/O")]),e._v("事件和请求，包括编码、解码、业务逻辑等，可以理解为"),t("code",[e._v("NIO")]),e._v("中的"),t("code",[e._v("ChannelHandler")]),e._v("。")]),e._v(" "),t("li",[e._v("ChannelPipeline：由一组"),t("code",[e._v("ChannelHandler")]),e._v("组成的管道，用于处理"),t("code",[e._v("Channel")]),e._v("上的所有"),t("code",[e._v("I/O")]),e._v("事件和请求，"),t("code",[e._v("Netty")]),e._v("中的数据处理通常是通过将一个数据包装成一个"),t("code",[e._v("ByteBuf")]),e._v("对象，并且通过一个 "),t("code",[e._v("ChannelPipeline")]),e._v("来传递处理，以达到业务逻辑与网络通信的解耦。")]),e._v(" "),t("li",[e._v("ByteBuf："),t("code",[e._v("Netty")]),e._v("提供的字节容器，可以对字节进行高效操作，包括读写、查找等。")]),e._v(" "),t("li",[e._v("Codec：用于在"),t("code",[e._v("ChannelPipeline")]),e._v("中进行数据编码和解码的组件，如字符串编解码器、对象序列化编解码器等。")])]),e._v(" "),t("p",[e._v("这些核心组件共同构成了 Netty 的核心架构，可以帮助开发人员快速地实现高性能、高并发的网络应用程序。")]),e._v(" "),t("h2",{attrs:{id:"_4-netty-的线程模型是怎样的-如何优化性能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-netty-的线程模型是怎样的-如何优化性能"}},[e._v("#")]),e._v(" 4. Netty 的线程模型是怎样的？如何优化性能？")]),e._v(" "),t("p",[t("code",[e._v("Netty")]),e._v("的线程模型是基于事件驱动的"),t("code",[e._v("Reactor")]),e._v("模型，它使用少量的线程来处理大量的连接和数据传输，以提高性能和吞吐量。在"),t("code",[e._v("Netty")]),e._v("中，每个连接都分配了一个单独的"),t("code",[e._v("EventLoop")]),e._v("线程，该线程负责处理所有与该连接相关的事件，包括数据传输、握手和关闭等。多个连接可以共享同一个"),t("code",[e._v("EventLoop")]),e._v("线程，从而减少线程的创建和销毁开销，提高资源利用率。")]),e._v(" "),t("p",[e._v("为了进一步优化性能，"),t("code",[e._v("Netty")]),e._v("提供了一些线程模型和线程池配置选项，以适应不同的应用场景和性能要求。例如，可以使用不同的"),t("code",[e._v("EventLoopGroup")]),e._v("实现不同的线程模型，如"),t("strong",[e._v("单线程模型、多线程模型和主从线程模型")]),e._v("等。同时，"),t("strong",[e._v("还可以设置不同的线程池参数，如线程数、任务队列大小、线程优先级")]),e._v("等，以调整线程池的工作负载和性能表现。")]),e._v(" "),t("p",[e._v("在实际使用中，"),t("strong",[e._v("还可以通过优化网络协议、数据结构、业务逻辑等方面来提高 Netty 的性能")]),e._v("。例如，可以使用零拷贝技术避免数据拷贝，使用内存池减少内存分配和回收的开销，避免使用阻塞 IO 和同步操作等，从而提高应用的吞吐量和性能表现。")]),e._v(" "),t("h2",{attrs:{id:"_5-eventloopgroup-了解么-和-eventloop-啥关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-eventloopgroup-了解么-和-eventloop-啥关系"}},[e._v("#")]),e._v(" 5. EventloopGroup 了解么?和 EventLoop 啥关系?")]),e._v(" "),t("p",[t("code",[e._v("EventLoopGroup")]),e._v("和"),t("code",[e._v("EventLoop")]),e._v("是 "),t("code",[e._v("Netty")]),e._v(" 中两个重要的组件。")]),e._v(" "),t("p",[t("code",[e._v("EventLoopGroup")]),e._v(" 表示一组"),t("code",[e._v("EventLoop")]),e._v("，它们共同负责处理客户端连接的"),t("code",[e._v("I/O")]),e._v("事件。在 "),t("code",[e._v("Netty")]),e._v("中，通常会为不同的 "),t("code",[e._v("I/O")]),e._v(" 操作创建不同的 "),t("code",[e._v("EventLoopGroup")]),e._v("。")]),e._v(" "),t("p",[t("code",[e._v("EventLoop")]),e._v(" 是"),t("code",[e._v("Netty")]),e._v(" 中的一个核心组件，它代表了一个不断循环的"),t("code",[e._v("I/O")]),e._v(" 线程。它负责处理一个或多个 "),t("code",[e._v("Channel")]),e._v(" 的 "),t("code",[e._v("I/O")]),e._v(" 操作，包括数据的读取、写入和状态的更改。一个"),t("code",[e._v("EventLoop")]),e._v("可以处理多个"),t("code",[e._v("Channel")]),e._v("，而一个"),t("code",[e._v("Channel")]),e._v(" 只会被一个 "),t("code",[e._v("EventLoop")]),e._v("所处理。")]),e._v(" "),t("p",[e._v("在 "),t("code",[e._v("Netty")]),e._v(" 中，一个应用程序通常会创建两个"),t("code",[e._v("EventLoopGroup")]),e._v("：一个用于处理客户端连接，一个用于处理服务器端连接。当客户端连接到服务器时，服务器端的"),t("code",[e._v("EventLoopGroup")]),e._v("会将连接分配给一个"),t("code",[e._v("EventLoop")]),e._v(" 进行处理，以便保证所有的"),t("code",[e._v("I/O")]),e._v(" 操作都能得到及时、高效地处理。")]),e._v(" "),t("h2",{attrs:{id:"_6-netty-的零拷贝了解么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-netty-的零拷贝了解么"}},[e._v("#")]),e._v(" 6. Netty 的零拷贝了解么？")]),e._v(" "),t("p",[e._v("零拷贝"),t("code",[e._v("（Zero Copy）")]),e._v("是一种技术，可以避免在数据传输过程中对数据的多次拷贝操作，从而提高数据传输的效率和性能。在网络编程中，零拷贝技术可以减少数据在内核空间和用户空间之间的拷贝次数，从而提高数据传输效率和降低 "),t("code",[e._v("CPU")]),e._v(" 的使用率。")]),e._v(" "),t("p",[t("code",[e._v("Netty")]),e._v("通过使用 "),t("code",[e._v("Direct Memory")]),e._v("和"),t("code",[e._v("FileChannel")]),e._v(" 的方式实现零拷贝。当应用程序将数据写入 "),t("code",[e._v("Channel")]),e._v(" 时，"),t("code",[e._v("Netty")]),e._v(" 会将数据直接写入到内存缓冲区中，然后通过操作系统提供的 "),t("code",[e._v("sendfile")]),e._v(" 或者"),t("code",[e._v("writev")]),e._v(" 等零拷贝技术，将数据从内存缓冲区中传输到网络中，从而避免了中间的多次拷贝操作。同样，当应用程序从 "),t("code",[e._v("Channel")]),e._v(" 中读取数据时，"),t("code",[e._v("Netty")]),e._v(" 也会将数据直接读取到内存缓冲区中，然后通过零拷贝技术将数据从内存缓冲区传输到用户空间。")]),e._v(" "),t("p",[e._v("通过使用零拷贝技术，"),t("code",[e._v("Netty")]),e._v(" 可以避免在数据传输过程中对数据进行多次的拷贝操作，从而提高数据传输的效率和性能。特别是在处理大量数据传输的场景中，零拷贝技术可以大幅度减少 "),t("code",[e._v("CPU")]),e._v("的使用率，降低系统的负载。")]),e._v(" "),t("h2",{attrs:{id:"_7-netty-长连接、心跳机制了解么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-netty-长连接、心跳机制了解么"}},[e._v("#")]),e._v(" 7. Netty 长连接、心跳机制了解么？")]),e._v(" "),t("p",[e._v("在网络编程中，长连接是指客户端与服务器之间建立的连接可以保持一段时间，以便在需要时可以快速地进行数据交换。与短连接相比，长连接可以避免频繁建立和关闭连接的开销，从而提高数据传输的效率和性能。")]),e._v(" "),t("p",[e._v("Netty 提供了一种长连接的实现方式，即通过 "),t("code",[e._v("Channel")]),e._v(" 的 "),t("code",[e._v("keepalive")]),e._v(" 选项来保持连接的状态。当启用了"),t("code",[e._v("keepalive")]),e._v(" 选项后，客户端和服务器之间的连接将会自动保持一段时间，如果在这段时间内没有数据交换，客户端和服务器之间的连接将会被关闭。通过这种方式，可以实现长连接，避免频繁建立和关闭连接的开销。")]),e._v(" "),t("p",[e._v("除了 "),t("code",[e._v("keepalive")]),e._v(" 选项之外，"),t("code",[e._v("Netty")]),e._v("还提供了一种"),t("strong",[e._v("心跳机制")]),e._v("来保持连接的状态。心跳机制可以"),t("strong",[e._v("通过定期向对方发送心跳消息，来检测连接是否正常")]),e._v("。如果在一段时间内没有收到心跳消息，就认为连接已经断开，并进行重新连接。"),t("code",[e._v("Netty")]),e._v(" 提供了一个"),t("code",[e._v("IdleStateHandler")]),e._v(" 类，可以用来实现心跳机制。"),t("code",[e._v("IdleStateHandler")]),e._v("可以设置多个超时时间，当连接空闲时间超过设定的时间时，会触发一个事件，可以在事件处理方法中进行相应的处理，比如发送心跳消息。")]),e._v(" "),t("p",[t("strong",[e._v("通过使用长连接和心跳机制，可以保证客户端与服务器之间的连接处于正常的状态，从而提高数据传输的效率和性")]),e._v("能。特别是在处理大量数据传输的场景中，长连接和心跳机制可以降低建立和关闭连接的开销，减少网络负载，提高系统的稳定性。")]),e._v(" "),t("h2",{attrs:{id:"_8-netty-服务端和客户端的启动过程了解么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-netty-服务端和客户端的启动过程了解么"}},[e._v("#")]),e._v(" 8. Netty 服务端和客户端的启动过程了解么？")]),e._v(" "),t("p",[t("code",[e._v("Netty")]),e._v(" 是一个基于"),t("code",[e._v("NIO")]),e._v(" 的异步事件驱动框架，它的服务端和客户端的启动过程大致相同，都需要完成以下几个步骤：")]),e._v(" "),t("p",[t("img",{attrs:{src:v(836),alt:"图片"}})]),e._v(" "),t("ol",[t("li",[e._v("创建 "),t("code",[e._v("EventLoopGroup")]),e._v(" 对象。"),t("code",[e._v("EventLoopGroup")]),e._v(" 是"),t("code",[e._v("Netty")]),e._v("的核心组件之一，它用于管理和调度事件的处理。"),t("code",[e._v("Netty")]),e._v("通过"),t("code",[e._v("EventLoopGroup")]),e._v("来创建多个"),t("code",[e._v("EventLoop")]),e._v("对象，并将每个 "),t("code",[e._v("EventLoop")]),e._v(" 与一个线程绑定。在服务端中，一般会创建两个 "),t("code",[e._v("EventLoopGroup")]),e._v("对象，分别用于接收客户端的连接请求和处理客户端的数据。")]),e._v(" "),t("li",[e._v("创建 "),t("code",[e._v("ServerBootstrap")]),e._v("或 "),t("code",[e._v("Bootstrap")]),e._v(" 对象。"),t("code",[e._v("ServerBootstrap 和 Bootstrap")]),e._v("是 "),t("code",[e._v("Netty")]),e._v(" 提供的服务端和客户端启动器，它们封装了启动过程中的各种参数和配置，方便使用者进行设置。在创建 "),t("code",[e._v("ServerBootstrap")]),e._v(" 或 "),t("code",[e._v("Bootstrap")]),e._v("对象时，需要指定相应的 "),t("code",[e._v("EventLoopGroup")]),e._v(" 对象，并进行一些基本的配置，比如传输协议、端口号、处理器等。")]),e._v(" "),t("li",[e._v("配置"),t("code",[e._v("Channel")]),e._v("的参数。"),t("code",[e._v("Channel")]),e._v(" 是"),t("code",[e._v("Netty")]),e._v("中的一个抽象概念，它代表了一个网络连接。在启动过程中，需要对 "),t("code",[e._v("Channel")]),e._v("的一些参数进行配置，比如传输协议、缓冲区大小、心跳检测等。")]),e._v(" "),t("li",[e._v("绑定 "),t("code",[e._v("ChannelHandler。ChannelHandler")]),e._v(" 是 "),t("code",[e._v("Netty")]),e._v(" 中用于处理事件的组件，它可以处理客户端的连接请求、接收客户端的数据、发送数据给客户端等。在启动过程中，需要将 "),t("code",[e._v("ChannelHandler")]),e._v("绑定到相应的 "),t("code",[e._v("Channel")]),e._v("上，以便处理相应的事件。")]),e._v(" "),t("li",[e._v("启动服务端或客户端。在完成以上配置后，就可以启动服务端或客户端了。在启动过程中，会创建相应的"),t("code",[e._v("Channel")]),e._v("，并对其进行一些基本的初始化，比如注册监听器、绑定端口等。启动完成后，就可以开始接收客户端的请求或向服务器发送数据了。")])]),e._v(" "),t("p",[e._v("总的来说，"),t("code",[e._v("Netty")]),e._v(" 的服务端和客户端启动过程比较简单，只需要进行一些基本的配置和设置，就可以完成相应的功能。通过使用 "),t("code",[e._v("Netty")]),e._v("，可以方便地开发高性能、高可靠性的网络应用程序。")]),e._v(" "),t("h2",{attrs:{id:"_9-netty-的-channel-和-eventloop-之间的关系是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-netty-的-channel-和-eventloop-之间的关系是什么"}},[e._v("#")]),e._v(" 9. Netty 的 Channel 和 EventLoop 之间的关系是什么？")]),e._v(" "),t("p",[e._v("在"),t("code",[e._v("Netty")]),e._v("中，"),t("code",[e._v("Channel")]),e._v("代表一个开放的网络连接，它可以用来读取和写入数据。而"),t("code",[e._v("EventLoop")]),e._v("则代表一个执行任务的线程，它负责处理"),t("code",[e._v("Channel")]),e._v("上的所有事件和操作。")]),e._v(" "),t("p",[e._v("每个"),t("code",[e._v("Channel")]),e._v("都与一个"),t("code",[e._v("EventLoop")]),e._v("关联，而一个"),t("code",[e._v("EventLoop")]),e._v("可以关联多个"),t("code",[e._v("Channel")]),e._v("。当一个"),t("code",[e._v("Channel")]),e._v("上有事件发生时，"),t("strong",[e._v("比如数据可读或者可写")]),e._v("，它会将该事件提交给关联的"),t("code",[e._v("EventLoop")]),e._v("来处理。"),t("code",[e._v("EventLoop")]),e._v("会将该事件加入到它自己的任务队列中，然后按照顺序处理队列中的任务。")]),e._v(" "),t("p",[e._v("值得注意的是，一个"),t("code",[e._v("EventLoop")]),e._v("实例可能会被多个"),t("code",[e._v("Channel")]),e._v("所共享，因此它需要能够处理多个"),t("code",[e._v("Channel")]),e._v("上的事件，并确保在处理每个"),t("code",[e._v("Channel")]),e._v("的事件时不会被阻塞。为此，Netty 采用了事件循环（"),t("code",[e._v("EventLoop")]),e._v("）模型，它通过异步 I/O 和事件驱动的方式，实现了高效、可扩展的网络编程。")]),e._v(" "),t("h2",{attrs:{id:"_10-什么是-netty-的-channelpipeline-它是如何工作的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-什么是-netty-的-channelpipeline-它是如何工作的"}},[e._v("#")]),e._v(" 10. 什么是 Netty 的 ChannelPipeline，它是如何工作的？")]),e._v(" "),t("p",[e._v("在"),t("code",[e._v("Netty")]),e._v("中，每个"),t("code",[e._v("Channel")]),e._v("都有一个与之关联的"),t("code",[e._v("ChannelPipeline")]),e._v("，用于处理该"),t("code",[e._v("Channel")]),e._v("上的事件和请求。"),t("code",[e._v("ChannelPipeline")]),e._v("是一种基于事件驱动的处理机制，它由多个处理器（"),t("code",[e._v("Handler")]),e._v("）组成，每个处理器负责处理一个或多个事件类型，将事件转换为下一个处理器所需的数据格式。")]),e._v(" "),t("p",[e._v("当一个事件被触发时，它将从"),t("code",[e._v("ChannelPipeline")]),e._v("的第一个处理器（称为第一个"),t("code",[e._v("InboundHandler")]),e._v("）开始流经所有的处理器，直到到达最后一个处理器或者被中途拦截（通过抛出异常或调用"),t("code",[e._v("ChannelHandlerContext.fireXXX()")]),e._v("方法实现）。在这个过程中，每个处理器都可以对事件进行处理，也可以修改事件的传递方式，比如在处理完事件后将其转发到下一个处理器，或者直接将事件发送回到该"),t("code",[e._v("Channel")]),e._v("的对端。")]),e._v(" "),t("p",[t("code",[e._v("ChannelPipeline")]),e._v("的工作方式可以用以下三个概念来描述：")]),e._v(" "),t("ul",[t("li",[e._v("入站（"),t("code",[e._v("Inbound")]),e._v("）事件：由"),t("code",[e._v("Channel")]),e._v("接收到的事件，例如读取到新的数据、连接建立完成等等。入站事件将从"),t("code",[e._v("ChannelPipeline")]),e._v("的第一个"),t("code",[e._v("InboundHandler")]),e._v("开始流动，直到最后一个"),t("code",[e._v("InboundHandler")]),e._v("。")]),e._v(" "),t("li",[e._v("出站（"),t("code",[e._v("Outbound")]),e._v("）事件：由"),t("code",[e._v("Channel")]),e._v("发送出去的事件，例如向对端发送数据、关闭连接等等。出站事件将从"),t("code",[e._v("ChannelPipeline")]),e._v("的最后一个"),t("code",[e._v("OutboundHandler")]),e._v("开始流动，直到第一个"),t("code",[e._v("OutboundHandler")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("ChannelHandlerContext")]),e._v("：表示处理器和"),t("code",[e._v("ChannelPipeline")]),e._v("之间的关联关系。每个"),t("code",[e._v("ChannelHandler")]),e._v("都有一个"),t("code",[e._v("ChannelHandlerContext")]),e._v("，通过该对象可以实现在"),t("code",[e._v("ChannelPipeline")]),e._v("中的事件流中向前或向后传递事件，也可以通过该对象访问"),t("code",[e._v("Channel、ChannelPipeline和其他ChannelHandler")]),e._v("等。")])]),e._v(" "),t("p",[e._v("通过使用 ChannelPipeline，Netty 实现了高度可配置和可扩展的网络通信模型，使得开发人员可以根据自己的需求选择和组合不同的处理器，以构建出高效、稳定、安全的网络通信系统。")]),e._v(" "),t("h2",{attrs:{id:"_11-netty-中的-bytebuf-是什么-它和-java-的-bytebuffer-有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-netty-中的-bytebuf-是什么-它和-java-的-bytebuffer-有什么区别"}},[e._v("#")]),e._v(" 11. Netty 中的 ByteBuf 是什么，它和 Java 的 ByteBuffer 有什么区别？")]),e._v(" "),t("p",[t("code",[e._v("Netty")]),e._v(" 的"),t("code",[e._v("ByteBuf")]),e._v(" 是一个可扩展的字节容器，它提供了许多高级的 "),t("code",[e._v("API")]),e._v("，用于方便地处理字节数据。"),t("code",[e._v("ByteBuf")]),e._v("与 "),t("code",[e._v("Java NIO")]),e._v(" 的 "),t("code",[e._v("ByteBuffer")]),e._v(" 相比，有以下区别：")]),e._v(" "),t("p",[t("img",{attrs:{src:v(837),alt:"图片"}})]),e._v(" "),t("ul",[t("li",[e._v("容量可扩展："),t("code",[e._v("ByteBuf")]),e._v("的容量可以动态扩展，而 "),t("code",[e._v("ByteBuffer")]),e._v(" 的容量是固定的。")]),e._v(" "),t("li",[e._v("内存分配："),t("code",[e._v("ByteBuf")]),e._v("内部采用了内存池的方式，可以有效地减少内存分配和释放的开销。")]),e._v(" "),t("li",[e._v("读写操作："),t("code",[e._v("ByteBuf")]),e._v("提供了多个读写指针，可以方便地读写字节数据。")]),e._v(" "),t("li",[e._v("零拷贝："),t("code",[e._v("ByteBuf")]),e._v(" 支持零拷贝技术，可以减少数据复制的次数。")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('ByteBuf buffer = Unpooled.buffer(10);\nbuffer.writeBytes("hello".getBytes());\n\nwhile (buffer.isReadable()) {\n  System.out.print((char) buffer.readByte());\n}\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("p",[e._v("在上面的示例代码中，我们使用 "),t("code",[e._v("Unpooled.buffer()")]),e._v(" 方法创建了一个"),t("code",[e._v("ByteBuf")]),e._v("对象 "),t("code",[e._v("buffer")]),e._v("，并使用 "),t("code",[e._v("writeBytes()")]),e._v(" 方法将字符串 "),t("code",[e._v('"hello"')]),e._v("写入该对象。然后，我们通过 "),t("code",[e._v("isReadable()")]),e._v("方法判断该对象是否可读，使用 "),t("code",[e._v("readByte()")]),e._v(" 方法读取其中的字节数据，并将其转换为字符输出。")]),e._v(" "),t("h2",{attrs:{id:"_12-netty-中的-channelhandlercontext-是什么-它的作用是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-netty-中的-channelhandlercontext-是什么-它的作用是什么"}},[e._v("#")]),e._v(" 12. Netty 中的 ChannelHandlerContext 是什么，它的作用是什么？")]),e._v(" "),t("p",[e._v("在"),t("code",[e._v("Netty")]),e._v("中，"),t("code",[e._v("ChannelHandlerContext")]),e._v("表示连接到"),t("code",[e._v("ChannelPipeline")]),e._v("中的一个"),t("code",[e._v("Handler")]),e._v("上下文。在"),t("code",[e._v("Netty的IO")]),e._v("事件模型中，"),t("code",[e._v("ChannelHandlerContext")]),e._v("充当了处理"),t("code",[e._v("I/O")]),e._v("事件的处理器和"),t("code",[e._v("ChannelPipeline")]),e._v("之间的桥梁，使处理器能够相互交互并访问"),t("code",[e._v("ChannelPipeline")]),e._v("中的其他处理器。")]),e._v(" "),t("p",[e._v("每当"),t("code",[e._v("ChannelPipeline")]),e._v("中添加一个"),t("code",[e._v("Handler")]),e._v("时，"),t("code",[e._v("Netty")]),e._v("会创建一个"),t("code",[e._v("ChannelHandlerContext")]),e._v("对象，并将其与该"),t("code",[e._v("Handler")]),e._v("关联。这个对象包含了该"),t("code",[e._v("Handler")]),e._v("的相关信息，如所在的"),t("code",[e._v("ChannelPipeline")]),e._v("、所属的"),t("code",[e._v("Channel")]),e._v("等。在处理"),t("code",[e._v("I/O")]),e._v("事件时，"),t("code",[e._v("Netty")]),e._v("会将"),t("code",[e._v("I/O")]),e._v("事件转发给与该事件相应的"),t("code",[e._v("ChannelHandlerContext")]),e._v("，该上下文对象可以使"),t("code",[e._v("Handler")]),e._v("访问与该事件相关的任何信息，也可以在管道中转发事件。")]),e._v(" "),t("p",[e._v("总之，"),t("code",[e._v("ChannelHandlerContext")]),e._v("是一个重要的"),t("code",[e._v("Netty")]),e._v("组件，它提供了一种简单的机制，让开发者在处理网络 I/O 事件时可以更加灵活和高效地操作管道中的"),t("code",[e._v("Handler")]),e._v("。")]),e._v(" "),t("h2",{attrs:{id:"_13-什么是-netty-的-channelfuture-它的作用是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-什么是-netty-的-channelfuture-它的作用是什么"}},[e._v("#")]),e._v(" 13. 什么是 Netty 的 ChannelFuture，它的作用是什么？")]),e._v(" "),t("p",[e._v("在"),t("code",[e._v("Netty")]),e._v("中，"),t("code",[e._v("ChannelFuture")]),e._v("表示异步的"),t("code",[e._v("I/O")]),e._v("操作的结果。当执行一个异步操作（如发送数据到一个远程服务器）时，"),t("code",[e._v("ChannelFuture")]),e._v("会立即返回，并在将来的某个时候通知操作的结果，而不是等待操作完成。这种异步操作的特点使得 Netty 可以在同时处理多个连接时实现高性能和低延迟的网络应用程序。")]),e._v(" "),t("p",[e._v("具体来说，"),t("code",[e._v("ChannelFuture")]),e._v("用于在异步操作完成后通知应用程序结果。在异步操作执行后，"),t("code",[e._v("Netty")]),e._v("将一个"),t("code",[e._v("ChannelFuture")]),e._v("对象返回给调用方。调用方可以通过添加一个回调（"),t("code",[e._v("ChannelFutureListener")]),e._v("）来处理结果。例如，当异步写操作完成时，可以添加一个"),t("code",[e._v("ChannelFutureListener")]),e._v("以检查操作的状态并采取相应的措施。")]),e._v(" "),t("p",[t("code",[e._v("ChannelFuture")]),e._v("还提供了许多有用的方法，"),t("strong",[e._v("如检查操作是否成功、等待操作完成、添加监听器等")]),e._v("。通过这些方法，应用程序可以更好地控制异步操作的状态和结果。")]),e._v(" "),t("p",[e._v("总之，"),t("code",[e._v("ChannelFuture")]),e._v("是"),t("code",[e._v("Netty")]),e._v("中异步"),t("code",[e._v("I/O")]),e._v("操作的基础，它提供了一种简单而有效的机制，使得开发者可以方便地处理"),t("code",[e._v("I/O")]),e._v("操作的结果。")]),e._v(" "),t("h2",{attrs:{id:"_14-netty-中的-channelhandler-是什么-它的作用是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-netty-中的-channelhandler-是什么-它的作用是什么"}},[e._v("#")]),e._v(" 14. Netty 中的 ChannelHandler 是什么，它的作用是什么？")]),e._v(" "),t("p",[e._v("在 "),t("code",[e._v("Netty")]),e._v(" 中，"),t("code",[e._v("ChannelHandler")]),e._v("是一个接口，用于处理入站和出站数据流。它可以通过实现以下方法来处理数据流：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("channelRead(ChannelHandlerContext ctx, Object msg)")]),e._v(": 处理接收到的数据，这个方法通常会被用于解码数据并将其转换为实际的业务对象。")]),e._v(" "),t("li",[t("code",[e._v("channelReadComplete(ChannelHandlerContext ctx)")]),e._v(": 读取数据完成时被调用，可以用于向远程节点发送数据。")]),e._v(" "),t("li",[t("code",[e._v("exceptionCaught(ChannelHandlerContext ctx, Throwable cause)")]),e._v(": 发生异常时被调用，可以在这个方法中处理异常或关闭连接。")]),e._v(" "),t("li",[t("code",[e._v("channelActive(ChannelHandlerContext ctx)")]),e._v(": 当连接建立时被调用。")]),e._v(" "),t("li",[t("code",[e._v("channelInactive(ChannelHandlerContext ctx)")]),e._v(": 当连接关闭时被调用。")])]),e._v(" "),t("p",[t("code",[e._v("ChannelHandler")]),e._v(" 可以添加到 "),t("code",[e._v("ChannelPipeline")]),e._v(" 中，"),t("code",[e._v("ChannelPipeline")]),e._v(" 是一个用于维护 "),t("code",[e._v("ChannelHandler")]),e._v(" 调用顺序的容器。在数据流进入或离开 "),t("code",[e._v("Channel")]),e._v(" 时，"),t("code",[e._v("ChannelPipeline")]),e._v(" 中的 "),t("code",[e._v("ChannelHandler")]),e._v(" 会按照添加的顺序依次调用它们的方法来处理数据流。")]),e._v(" "),t("p",[t("code",[e._v("ChannelHandler")]),e._v(" 的主要作用是将网络协议的细节与应用程序的逻辑分离开来，使得应用程序能够专注于处理业务逻辑，而不需要关注网络协议的实现细节。")]),e._v(" "),t("h2",{attrs:{id:"_15-netty-中的各种-codec-是什么-它们的作用是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-netty-中的各种-codec-是什么-它们的作用是什么"}},[e._v("#")]),e._v(" 15. Netty 中的各种 Codec 是什么，它们的作用是什么？")]),e._v(" "),t("p",[e._v("在 "),t("code",[e._v("Netty")]),e._v(" 中，"),t("code",[e._v("Codec")]),e._v("是一种将二进制数据与 "),t("code",[e._v("Java")]),e._v(" 对象之间进行编码和解码的组件。它们可以将数据从字节流解码为 "),t("code",[e._v("Java")]),e._v(" 对象，也可以将 "),t("code",[e._v("Java")]),e._v(" 对象编码为字节流进行传输。")]),e._v(" "),t("p",[e._v("以下是 Netty 中常用的 "),t("code",[e._v("Codec")]),e._v("：")]),e._v(" "),t("p",[t("img",{attrs:{src:v(838),alt:"图片"}})]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ByteToMessageCodec")]),e._v("：将字节流解码为 "),t("code",[e._v("Java")]),e._v("对象，同时也可以将"),t("code",[e._v("Java")]),e._v(" 对象编码为字节流。可以用于处理自定义协议的消息解析和封装。")]),e._v(" "),t("li",[t("code",[e._v("MessageToByteEncoder")]),e._v("：将 "),t("code",[e._v("Java")]),e._v(" 对象编码为字节流。通常用于发送消息时将消息转换为二进制数据。")]),e._v(" "),t("li",[t("code",[e._v("ByteToMessageDecoder")]),e._v("：将字节流解码为"),t("code",[e._v("Java")]),e._v(" 对象。通常用于接收到数据后进行解码。")]),e._v(" "),t("li",[t("code",[e._v("StringEncoder 和 StringDecoder")]),e._v("：分别将字符串编码为字节流和将字节流解码为字符串。")]),e._v(" "),t("li",[t("code",[e._v("LengthFieldPrepender 和 LengthFieldBasedFrameDecoder")]),e._v("：用于处理 "),t("code",[e._v("TCP")]),e._v(" 粘包和拆包问题。")]),e._v(" "),t("li",[t("code",[e._v("ObjectDecoder和ObjectEncoder")]),e._v("：将"),t("code",[e._v("Java")]),e._v("对象序列化为字节数据，并将字节数据反序列化为"),t("code",[e._v("Java")]),e._v("对象。")])]),e._v(" "),t("p",[e._v("这些 "),t("code",[e._v("Codec")]),e._v("组件可以通过组合使用来构建复杂的数据协议处理逻辑，以提高代码的可重用性和可维护性。")]),e._v(" "),t("h2",{attrs:{id:"_16-什么是-netty-的-bootstrap-它的作用是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-什么是-netty-的-bootstrap-它的作用是什么"}},[e._v("#")]),e._v(" 16. 什么是 Netty 的 BootStrap，它的作用是什么？")]),e._v(" "),t("p",[t("code",[e._v("Netty的Bootstrap")]),e._v("是一个用于启动和配置"),t("code",[e._v("Netty")]),e._v("客户端和服务器的工具类。它提供了一组简单易用的方法，使得创建和配置 Netty 应用程序变得更加容易。")]),e._v(" "),t("p",[t("code",[e._v("Bootstrap")]),e._v("类提供了一些方法，可以设置服务器或客户端的选项和属性，以及为"),t("code",[e._v("ChannelPipeline")]),e._v("配置"),t("code",[e._v("handler")]),e._v("，以处理传入或传出的数据。一旦完成配置，使用"),t("code",[e._v("Bootstrap")]),e._v("启动客户端或服务器。")]),e._v(" "),t("p",[e._v("在"),t("code",[e._v("Netty")]),e._v("应用程序中，"),t("code",[e._v("Bootstrap")]),e._v("有两个主要作用：")]),e._v(" "),t("p",[t("img",{attrs:{src:v(839),alt:"图片"}})]),e._v(" "),t("ul",[t("li",[e._v("作为"),t("code",[e._v("Netty")]),e._v("服务器启动的入口点：通过"),t("code",[e._v("Bootstrap")]),e._v("启动一个"),t("code",[e._v("Netty")]),e._v("服务器，可以在指定的端口上监听传入的连接，并且可以设置服务器的选项和属性。")]),e._v(" "),t("li",[e._v("作为"),t("code",[e._v("Netty")]),e._v("客户端启动的入口点：通过"),t("code",[e._v("Bootstrap")]),e._v("启动一个"),t("code",[e._v("Netty")]),e._v("客户端，可以连接到远程服务器，并且可以设置客户端的选项和属性。")])]),e._v(" "),t("h2",{attrs:{id:"_17-netty-的-io-模型是什么-与传统的-bio-和-nio-有什么不同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17-netty-的-io-模型是什么-与传统的-bio-和-nio-有什么不同"}},[e._v("#")]),e._v(" 17.Netty 的 IO 模型是什么？与传统的 BIO 和 NIO 有什么不同？")]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("Netty")]),e._v("的"),t("code",[e._v("IO")]),e._v("模型是基于事件驱动的"),t("code",[e._v("NIO（Non-blocking IO）")]),e._v("模型。在传统的"),t("code",[e._v("BIO（Blocking IO）")]),e._v("模型中，每个连接都需要一个独立的线程来处理读写事件，当连接数过多时，线程数量就会爆炸式增长，导致系统性能急剧下降。而在"),t("code",[e._v("NIO")]),e._v("模型中，一个线程可以同时处理多个连接的读写事件，大大降低了线程的数量和切换开销，提高了系统的并发性能和吞吐量。")])]),e._v(" "),t("p",[e._v("与传统的"),t("code",[e._v("NIO")]),e._v("模型相比，"),t("code",[e._v("Netty")]),e._v("的"),t("code",[e._v("NIO")]),e._v("模型有以下不同点：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Netty")]),e._v("使用了"),t("code",[e._v("Reactor")]),e._v("模式，将"),t("code",[e._v("IO")]),e._v("事件分发给对应的"),t("code",[e._v("Handler")]),e._v("处理，使得应用程序可以更方便地处理网络事件。")]),e._v(" "),t("li",[t("code",[e._v("Netty")]),e._v("使用了多线程模型，将"),t("code",[e._v("Handler")]),e._v("的处理逻辑和"),t("code",[e._v("IO")]),e._v("线程分离，避免了"),t("code",[e._v("IO")]),e._v("线程被阻塞的情况。")]),e._v(" "),t("li",[t("code",[e._v("Netty")]),e._v("支持多种"),t("code",[e._v("Channel")]),e._v("类型，可以根据应用场景选择不同的"),t("code",[e._v("Channel")]),e._v("类型，如"),t("code",[e._v("NIO、EPoll、OIO")]),e._v("等。")])]),e._v(" "),t("h2",{attrs:{id:"_18-如何在-netty-中实现-tcp-粘包-拆包的处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_18-如何在-netty-中实现-tcp-粘包-拆包的处理"}},[e._v("#")]),e._v(" 18. 如何在 Netty 中实现 TCP 粘包/拆包的处理？")]),e._v(" "),t("p",[e._v("在"),t("code",[e._v("TCP")]),e._v("传输过程中，由于"),t("code",[e._v("TCP")]),e._v("并不了解上层应用协议的消息边界，"),t("strong",[e._v("会将多个小消息组合成一个大消息，或者将一个大消息拆分成多个小消息发送。这种现象被称为 TCP 粘包/拆包问题")]),e._v("。在 Netty 中，可以通过以下几种方式来解决 TCP 粘包/拆包问题：")]),e._v(" "),t("p",[t("img",{attrs:{src:v(840),alt:"image-20230901104147392"}})]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("消息定长")]),e._v("：将消息固定长度发送，例如每个消息都是固定的"),t("code",[e._v("100")]),e._v("字节。在接收端，根据固定长度对消息进行拆分。")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 编码器，将消息的长度固定为100字节\npipeline.addLast("frameEncoder", new LengthFieldPrepender(2));\npipeline.addLast("messageEncoder", new StringEncoder(CharsetUtil.UTF_8));\n// 解码器，根据固定长度对消息进行拆分\npipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(100, 0, 2, 0, 2));\npipeline.addLast("messageDecoder", new StringDecoder(CharsetUtil.UTF_8));\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("ul",[t("li",[t("strong",[e._v("消息分隔符")]),e._v('：将消息以特定的分隔符分隔开，例如以"'),t("code",[e._v("\\r\\n")]),e._v('"作为分隔符。在接收端，根据分隔符对消息进行拆分。')])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 编码器，以"\\r\\n"作为消息分隔符\npipeline.addLast("frameEncoder", new DelimiterBasedFrameEncoder("\\r\\n"));\npipeline.addLast("messageEncoder", new StringEncoder(CharsetUtil.UTF_8));\n// 解码器，根据"\\r\\n"对消息进行拆分\npipeline.addLast("frameDecoder", new DelimiterBasedFrameDecoder(1024, Delimiters.lineDelimiter()));\npipeline.addLast("messageDecoder", new StringDecoder(CharsetUtil.UTF_8));\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("ul",[t("li",[t("strong",[e._v("消息头部加长度字段")]),e._v("：在消息的头部加上表示消息长度的字段，在发送端发送消息时先发送消息长度，再发送消息内容。在接收端，先读取消息头部的长度字段，再根据长度读取消息内容。")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 编码器，将消息的长度加入消息头部\npipeline.addLast("frameEncoder", new LengthFieldPrepender(2));\npipeline.addLast("messageEncoder", new StringEncoder(CharsetUtil.UTF_8));\n// 解码器，先读取消息头部的长度字段，再根据长度读取消息内容\npipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(1024, 0, 2, 0, 2));\npipeline.addLast("messageDecoder", new StringDecoder(CharsetUtil.UTF_8));\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("h2",{attrs:{id:"_19-netty-如何处理大文件的传输"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_19-netty-如何处理大文件的传输"}},[e._v("#")]),e._v(" 19. Netty 如何处理大文件的传输？")]),e._v(" "),t("p",[e._v("在"),t("code",[e._v("Netty")]),e._v("中，可以通过使用"),t("code",[e._v("ChunkedWriteHandler")]),e._v("处理大文件的传输。"),t("code",[e._v("ChunkedWriteHandler")]),e._v("是一个编码器，可以将大文件切分成多个"),t("code",[e._v("Chunk")]),e._v("，并将它们以"),t("code",[e._v("ChunkedData")]),e._v("的形式写入管道，这样就可以避免一次性将整个文件读入内存，降低内存占用。")]),e._v(" "),t("p",[e._v("具体使用方法如下：")]),e._v(" "),t("ul",[t("li",[e._v("在服务端和客户端的"),t("code",[e._v("ChannelPipeline")]),e._v("中添加"),t("code",[e._v("ChunkedWriteHandler")]),e._v("。")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("pipeline.addLast(new ChunkedWriteHandler());\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("ul",[t("li",[e._v("在服务端和客户端的业务逻辑处理器中，接收并处理"),t("code",[e._v("ChunkedData")]),e._v("。")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class MyServerHandler extends SimpleChannelInboundHandler<Object> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {\n        if (msg instanceof HttpRequest) {\n            HttpRequest request = (HttpRequest) msg;\n            // 处理HTTP请求\n            // ...\n        } else if (msg instanceof HttpContent) {\n            HttpContent content = (HttpContent) msg;\n            // 处理HTTP内容\n            if (content instanceof LastHttpContent) {\n                // 处理完整个HTTP请求\n                // ...\n            } else if (content instanceof HttpChunkedInput) {\n                HttpChunkedInput chunkedInput = (HttpChunkedInput) content;\n                // 处理ChunkedData\n                while (true) {\n                    HttpContent chunk = chunkedInput.readChunk(ctx.alloc());\n                    if (chunk == null) {\n                        break;\n                    }\n                    // 处理单个Chunk\n                    // ...\n                }\n            }\n        }\n    }\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br"),t("span",{staticClass:"line-number"},[e._v("28")]),t("br")])]),t("ul",[t("li",[e._v("在客户端向服务端发送数据时，将需要传输的文件包装成"),t("code",[e._v("ChunkedFile")]),e._v("并写入管道。")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public void sendFile(Channel channel, File file) throws Exception {\n    RandomAccessFile raf = new RandomAccessFile(file, "r");\n    DefaultFileRegion fileRegion = new DefaultFileRegion(raf.getChannel(), 0, raf.length());\n    HttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, "/");\n    HttpUtil.setContentLength(request, raf.length());\n    channel.write(request);\n    channel.writeAndFlush(new HttpChunkedInput(new ChunkedFile(raf, 0, file.length(), 8192)));\n}\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])]),t("p",[e._v("在传输大文件时，还需要"),t("strong",[e._v("注意以下几点")]),e._v("：")]),e._v(" "),t("ul",[t("li",[e._v("使用"),t("code",[e._v("ChunkedFile")]),e._v("时需要指定"),t("code",[e._v("Chunk")]),e._v("的大小，根据实际情况选择合适的大小，一般建议不要超过"),t("code",[e._v("8KB")]),e._v("。")]),e._v(" "),t("li",[e._v("为了避免大文件传输过程中对网络造成影响，可以在服务端和客户端的"),t("code",[e._v("ChannelPipeline")]),e._v("中添加"),t("code",[e._v("WriteBufferWaterMark")]),e._v("，限制写入缓冲区的大小。")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("pipeline.addLast(new WriteBufferWaterMark(8 * 1024, 32 * 1024));\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h2",{attrs:{id:"_20-如何使用-netty-实现心跳机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_20-如何使用-netty-实现心跳机制"}},[e._v("#")]),e._v(" 20. 如何使用 Netty 实现心跳机制？")]),e._v(" "),t("p",[e._v("在"),t("code",[e._v("Netty")]),e._v("中，可以通过实现一个定时任务来实现心跳机制。具体来说，就是在客户端和服务端之间定时互相发送心跳包，以检测连接是否仍然有效。")]),e._v(" "),t("p",[t("strong",[e._v("以下是使用 Netty 实现心跳机制的基本步骤")]),e._v("：")]),e._v(" "),t("p",[t("img",{attrs:{src:v(841),alt:"图片"}})]),e._v(" "),t("ul",[t("li",[e._v("定义心跳消息的类型。")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class HeartbeatMessage implements Serializable {\n    // ...\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("ul",[t("li",[e._v("在客户端和服务端的"),t("code",[e._v("ChannelPipeline")]),e._v("中添加"),t("code",[e._v("IdleStateHandler")]),e._v("，用于触发定时任务。")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("pipeline.addLast(new IdleStateHandler(0, 0, 60, TimeUnit.SECONDS));\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("ul",[t("li",[e._v("在客户端和服务端的业务逻辑处理器中，重写"),t("code",[e._v("userEventTriggered")]),e._v("方法，在触发定时任务时发送心跳包。")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class MyServerHandler extends SimpleChannelInboundHandler<Object> {\n    @Override\n    public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n        if (evt instanceof IdleStateEvent) {\n            IdleStateEvent event = (IdleStateEvent) evt;\n            if (event.state() == IdleState.READER_IDLE) {\n                // 读空闲，发送心跳包\n                ctx.writeAndFlush(new HeartbeatMessage());\n            }\n        } else {\n            super.userEventTriggered(ctx, evt);\n        }\n    }\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br")])]),t("ul",[t("li",[e._v("在客户端和服务端的业务逻辑处理器中，重写"),t("code",[e._v("channelRead")]),e._v("方法，接收并处理心跳包。")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class MyClientHandler extends SimpleChannelInboundHandler<Object> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {\n        if (msg instanceof HeartbeatMessage) {\n            // 收到心跳包，不做处理\n            return;\n        }\n        // 处理其他消息\n        // ...\n    }\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br")])]),t("p",[e._v("需要注意的是，由于心跳包不需要传输大量数据，因此建议使用"),t("code",[e._v("Unpooled.EMPTY_BUFFER")]),e._v("作为心跳包的内容。另外，心跳间隔的时间应根据实际情况设置，一般建议设置为连接的超时时间的一半。")]),e._v(" "),t("h2",{attrs:{id:"_21-netty-中如何实现-ssl-tls-加密传输"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_21-netty-中如何实现-ssl-tls-加密传输"}},[e._v("#")]),e._v(" 21. Netty 中如何实现 SSL/TLS 加密传输？")]),e._v(" "),t("p",[e._v("在 "),t("code",[e._v("Netty")]),e._v(" 中实现 "),t("code",[e._v("SSL/TLS")]),e._v("加密传输，需要通过"),t("code",[e._v("SSLHandler")]),e._v("来进行处理。通常情况下，"),t("code",[e._v("SSLHandler")]),e._v(" 需要在"),t("code",[e._v("ChannelPipeline")]),e._v(" 中作为最后一个"),t("code",[e._v("handler")]),e._v("添加。")]),e._v(" "),t("p",[e._v("以下是实现"),t("code",[e._v("SSL/TLS")]),e._v(" 加密传输的示例代码：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 创建 SSLContext 对象，用于构建 SSLEngine\nSSLContext sslContext = SSLContext.getInstance("TLS");\n\n// 初始化 SSLContext\nKeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\nKeyStore keyStore = KeyStore.getInstance("JKS");\nkeyStore.load(new FileInputStream("server.jks"), "password".toCharArray());\nkeyManagerFactory.init(keyStore, "password".toCharArray());\nTrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\ntrustManagerFactory.init(keyStore);\nsslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null);\n\n// 获取 SSLEngine\nSSLEngine sslEngine = sslContext.createSSLEngine();\nsslEngine.setUseClientMode(false);\n\n// 添加 SslHandler 到 ChannelPipeline 中\npipeline.addLast("ssl", new SslHandler(sslEngine));\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br")])]),t("h2",{attrs:{id:"_22-nioeventloopgroup-默认的构造函数会起多少线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_22-nioeventloopgroup-默认的构造函数会起多少线程"}},[e._v("#")]),e._v(" 22. NioEventLoopGroup 默认的构造函数会起多少线程？")]),e._v(" "),t("p",[e._v("默认情况下，"),t("code",[e._v("NioEventLoopGroup")]),e._v(" 的构造函数会根据可用的处理器核心数 ("),t("code",[e._v("availableProcessors()")]),e._v(") 创建相应数量的线程。")]),e._v(" "),t("p",[e._v("具体来说，"),t("code",[e._v("NioEventLoopGroup")]),e._v(" 的默认构造函数内部调用了另一个构造函数，其参数 "),t("code",[e._v("nThreads")]),e._v("的默认值为"),t("code",[e._v("0")]),e._v("，表示使用默认线程数。而默认线程数的计算方式就是调用 "),t("code",[e._v("Runtime.getRuntime().availableProcessors()")]),e._v(" 方法获取当前机器可用的处理器核心数。")]),e._v(" "),t("p",[e._v("因此，如果你在一台四核的机器上创建了一个默认的 "),t("code",[e._v("NioEventLoopGroup")]),e._v(" 实例，那么它就会使用四个线程。如果你想要修改线程数，可以调用"),t("code",[e._v("NioEventLoopGroup")]),e._v(" 的其他构造函数，并传入自定义的线程数。")]),e._v(" "),t("h2",{attrs:{id:"_23-如何使用-netty-实现-websocket-协议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_23-如何使用-netty-实现-websocket-协议"}},[e._v("#")]),e._v(" 23. 如何使用 Netty 实现 WebSocket 协议？")]),e._v(" "),t("p",[e._v("在 "),t("code",[e._v("Netty")]),e._v(" 中实现 "),t("code",[e._v("WebSocket")]),e._v(" 协议，需要使用 "),t("code",[e._v("WebSocketServerProtocolHandler")]),e._v("进行处理。"),t("code",[e._v("WebSocketServerProtocolHandler")]),e._v("是一个"),t("code",[e._v("ChannelHandler")]),e._v("，可以将"),t("code",[e._v("HTTP")]),e._v(" 升级为 "),t("code",[e._v("WebSocket")]),e._v(" 并处理"),t("code",[e._v("WebSocket")]),e._v(" 帧。")]),e._v(" "),t("p",[e._v("以下是实现 "),t("code",[e._v("WebSocket")]),e._v(" 协议的示例代码：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 添加 HTTP 请求解码器\npipeline.addLast("httpDecoder", new HttpRequestDecoder());\n// 添加 HTTP 响应编码器\npipeline.addLast("httpEncoder", new HttpResponseEncoder());\n// 添加 HTTP 聚合器\npipeline.addLast("httpAggregator", new HttpObjectAggregator(65536));\n// 添加 WebSocket 服务器协议处理器\npipeline.addLast("webSocketHandler", new WebSocketServerProtocolHandler("/ws"));\n// 添加自定义的 WebSocket 处理器\npipeline.addLast("handler", new MyWebSocketHandler());\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br")])]),t("p",[e._v("在以上示例代码中，"),t("code",[e._v("WebSocketServerProtocolHandler")]),e._v('的参数 "/ws" 表示'),t("code",[e._v("WebSocket")]),e._v(" 请求的 "),t("code",[e._v("URL")]),e._v(" 路径，"),t("code",[e._v("MyWebSocketHandler")]),e._v(" 是自定义的"),t("code",[e._v("WebSocket")]),e._v(" 处理器。")]),e._v(" "),t("h2",{attrs:{id:"_24-netty-高性能表现在哪些方面"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_24-netty-高性能表现在哪些方面"}},[e._v("#")]),e._v(" 24. Netty 高性能表现在哪些方面？")]),e._v(" "),t("p",[t("img",{attrs:{src:v(842),alt:"image-20230901104240733"}})]),e._v(" "),t("ul",[t("li",[e._v("异步非阻塞 "),t("code",[e._v("I/O")]),e._v(" 模型："),t("code",[e._v("Netty")]),e._v("使用基于"),t("code",[e._v("NIO")]),e._v("的异步非阻塞 "),t("code",[e._v("I/O")]),e._v("模型，可以大大提高网络通信效率，减少线程的阻塞等待时间，从而提高应用程序的响应速度和吞吐量。")]),e._v(" "),t("li",[e._v("零拷贝技术："),t("code",[e._v("Netty")]),e._v(" 支持零拷贝技术，可以避免数据在内核和用户空间之间的多次复制，减少了数据拷贝的次数，从而提高了数据传输的效率和性能。")]),e._v(" "),t("li",[e._v("线程模型优化："),t("code",[e._v("Netty")]),e._v("的线程模型非常灵活，可以根据不同的业务场景选择不同的线程模型。例如，对于低延迟和高吞吐量的场景，可以选择 "),t("code",[e._v("Reactor")]),e._v(" 线程模型，对于"),t("code",[e._v("I/O")]),e._v(" 操作比较简单的场景，可以选择单线程模型。")]),e._v(" "),t("li",[e._v("内存池技术："),t("code",[e._v("Netty")]),e._v(" 提供了一套基于内存池技术的 "),t("code",[e._v("ByteBuf")]),e._v(" 缓冲区，可以重用已经分配的内存空间，减少内存的分配和回收次数，提高内存使用效率。")]),e._v(" "),t("li",[e._v("处理器链式调用："),t("code",[e._v("Netty")]),e._v("的 "),t("code",[e._v("ChannelHandler")]),e._v(" 可以按照一定的顺序组成一个处理器链，当事件发生时，会按照处理器链的顺序依次调用处理器，从而实现对事件的处理。这种处理方式比传统的多线程处理方式更加高效，减少了线程上下文切换和锁竞争等问题。")])]),e._v(" "),t("h2",{attrs:{id:"_25-netty-和-tomcat-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_25-netty-和-tomcat-的区别"}},[e._v("#")]),e._v(" 25. Netty 和 Tomcat 的区别？")]),e._v(" "),t("p",[t("img",{attrs:{src:v(843),alt:"image-20230901104310942"}})]),e._v(" "),t("p",[t("code",[e._v("Netty 和 Tomcat")]),e._v(" 都是 "),t("code",[e._v("Java Web")]),e._v("应用服务器，但是它们之间存在一些区别：")]),e._v(" "),t("ul",[t("li",[e._v("底层网络通信模型不同："),t("code",[e._v("Tomcat")]),e._v(" 是基于阻塞的"),t("code",[e._v("BIO（Blocking I/O）")]),e._v("模型实现的，而 "),t("code",[e._v("Netty")]),e._v(" 是基于"),t("code",[e._v("NIO（Non-Blocking I/O）")]),e._v("模型实现的。")]),e._v(" "),t("li",[e._v("线程模型不同："),t("code",[e._v("Tomcat")]),e._v(" 使用传统的多线程模型，每个请求都会分配一个线程，而 "),t("code",[e._v("Netty")]),e._v("使用 "),t("code",[e._v("EventLoop")]),e._v("线程模型，每个 "),t("code",[e._v("EventLoop")]),e._v(" 负责处理多个连接，通过线程池管理"),t("code",[e._v("EventLoop")]),e._v("。")]),e._v(" "),t("li",[e._v("协议支持不同："),t("code",[e._v("Tomcat")]),e._v("内置支持 "),t("code",[e._v("HTTP 和 HTTPS")]),e._v("协议，而 "),t("code",[e._v("Netty")]),e._v("不仅支持 "),t("code",[e._v("HTTP 和 HTTPS")]),e._v(" 协议，还支持 "),t("code",[e._v("TCP、UDP 和 WebSocket")]),e._v(" 等多种协议。")]),e._v(" "),t("li",[e._v("代码复杂度不同：由于"),t("code",[e._v("Tomcat")]),e._v("支持的功能比较全面，所以其代码相对较为复杂，而 "),t("code",[e._v("Netty")]),e._v("的代码相对比较简洁、精简。")]),e._v(" "),t("li",[e._v("应用场景不同："),t("code",[e._v("Tomcat")]),e._v("适合于处理比较传统的 "),t("code",[e._v("Web")]),e._v("应用程序，如传统的 "),t("code",[e._v("MVC")]),e._v(" 模式"),t("code",[e._v("Web")]),e._v("应用程序；而 "),t("code",[e._v("Netty")]),e._v("更适合于高性能、低延迟的网络应用程序，如游戏服务器、即时通讯服务器等。")])]),e._v(" "),t("h2",{attrs:{id:"_26-服务端-netty-的工作架构图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_26-服务端-netty-的工作架构图"}},[e._v("#")]),e._v(" 26. 服务端 Netty 的工作架构图")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("             ┌───────┐        ┌───────┐\n             │ Channel │◀───────│ Socket│\n             │Pipeline │        │       │\n             └───────┘        └───────┘\n                   ▲                 │\n                   │                 │\n         ┌─────────┴─────────┐       │\n         │                   │       │\n         ▼                   ▼       ▼\n┌──────────────┐   ┌──────────────┐  ┌──────────────┐\n│EventLoopGroup│   │EventLoopGroup│  │EventLoopGroup│\n│       boss   │   │     work     │  │     work     │\n└──────────────┘   └──────────────┘  └──────────────┘\n         ▲                   ▲       ▲\n         │                   │       │\n┌────────┴─────────┐ ┌────────┴─────────┐\n│     NioServerSocketChannel   │   NioSocketChannel      │ ...\n└──────────────────┘ └──────────────────┘\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br")])]),t("p",[e._v("整个服务端 Netty 的工作架构图包括了以下几个部分：")]),e._v(" "),t("ul",[t("li",[e._v("ChannelPipeline：管道处理器，用于处理入站或出站事件，对数据进行编解码、处理业务逻辑等。")]),e._v(" "),t("li",[e._v("Channel：通道，对应底层的 "),t("code",[e._v("Socket")]),e._v("连接，用于收发网络数据。")]),e._v(" "),t("li",[e._v("EventLoopGroup：事件循环组，包含了多个事件循环（"),t("code",[e._v("EventLoop")]),e._v("），每个事件循环负责处理多个通道上的事件。")]),e._v(" "),t("li",[e._v("EventLoop：事件循环，负责监听注册到该循环的多个通道上的事件，然后根据事件类型将事件派发给对应的处理器。")]),e._v(" "),t("li",[e._v("NioServerSocketChannel：NIO 服务端通道，用于接受客户端的连接。")]),e._v(" "),t("li",[e._v("NioSocketChannel：NIO 客户端通道，用于和服务端进行数据通信。")])]),e._v(" "),t("p",[e._v("在服务端启动时，会创建一个或多个 "),t("code",[e._v("EventLoopGroup")]),e._v("。其中一个 "),t("code",[e._v("EventLoopGroup")]),e._v("作为"),t("code",[e._v("boss")]),e._v("线程池，用于接受客户端的连接请求，并将连接请求分发给"),t("code",[e._v("work")]),e._v("线程池中的某个 "),t("code",[e._v("EventLoop")]),e._v("。"),t("code",[e._v("work")]),e._v("线程池中的"),t("code",[e._v("EventLoop")]),e._v("负责处理已经连接的客户端的数据通信。每个 "),t("code",[e._v("EventLoop")]),e._v("负责处理一个或多个 "),t("code",[e._v("NioSocketChannel")]),e._v("，并维护该通道的事件队列，当事件发生时，将事件添加到事件队列中，并将事件派发到管道处理器中进行处理。")]),e._v(" "),t("h2",{attrs:{id:"_27-简单聊聊-netty-的线程模型的三种使用方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_27-简单聊聊-netty-的线程模型的三种使用方式"}},[e._v("#")]),e._v(" 27. 简单聊聊：Netty 的线程模型的三种使用方式？")]),e._v(" "),t("p",[e._v("Netty 的线程模型有三种使用方式，分别是单线程模型、多线程模型和主从多线程模型。")]),e._v(" "),t("p",[t("img",{attrs:{src:v(844),alt:"图片"}})]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("单线程模型")]),e._v("：所有的"),t("code",[e._v("I/O")]),e._v("操作都由同一个线程来执行。虽然这种方式并不适合高并发的场景，但是它具有简单、快速的优点，适用于处理"),t("code",[e._v("I/O")]),e._v("操作非常快速的场景，例如传输小文件等。")]),e._v(" "),t("li",[t("strong",[e._v("多线程模")]),e._v("型：所有的"),t("code",[e._v("I/O")]),e._v("操作都由一组线程来执行，其中一个线程负责监听客户端的连接请求，其他线程负责处理"),t("code",[e._v("I/O")]),e._v("操作。这种方式可以支持高并发，但是线程上下文切换的开销较大，适用于处理"),t("code",[e._v("I/O")]),e._v("操作较为耗时的场景。")]),e._v(" "),t("li",[t("strong",[e._v("主从多线程模型")]),e._v("：所有的"),t("code",[e._v("I/O")]),e._v("操作都由一组"),t("code",[e._v("NIO")]),e._v("线程来执行，其中一个主线程负责监听客户端的连接请求，其他从线程负责处理"),t("code",[e._v("I/O")]),e._v("操作。这种方式将接受连接和处理"),t("code",[e._v("I/O")]),e._v("操作分开，避免了线程上下文切换的开销，同时又能支持高并发，适用于处理 I/O 操作耗时较长的场景。")])]),e._v(" "),t("h2",{attrs:{id:"_28-netty-是如何保持长连接的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_28-netty-是如何保持长连接的"}},[e._v("#")]),e._v(" 28. Netty 是如何保持长连接的")]),e._v(" "),t("p",[t("img",{attrs:{src:v(845),alt:"图片"}})]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("心跳机制")]),e._v("：使用心跳机制可以定期向服务器发送一个简短的数据包，以保持连接处于活动状态。如果在一段时间内没有收到心跳包，就可以认为连接已经断开，从而及时重新建立连接。"),t("code",[e._v("Netty")]),e._v("提供了"),t("code",[e._v("IdleStateHandler")]),e._v("处理器，可以方便地实现心跳机制。")]),e._v(" "),t("li",[t("strong",[e._v("断线重连机制")]),e._v("：在网络不稳定的情况下，连接可能会不可避免地断开。为了避免因为网络异常导致应用程序不能正常工作，可以实现断线重连机制，定期检查连接状态，并在连接断开时尝试重新连接。"),t("code",[e._v("Netty")]),e._v("提供了"),t("code",[e._v("ChannelFutureListener")]),e._v("接口和"),t("code",[e._v("ChannelFuture")]),e._v("对象，可以方便地实现断线重连机制。")]),e._v(" "),t("li",[t("strong",[e._v("基于 HTTP/1.1 协议的长连接")]),e._v("："),t("code",[e._v("HTTP/1.1")]),e._v("协议支持长连接，可以在一个"),t("code",[e._v("TCP")]),e._v("连接上多次发送请求和响应。在"),t("code",[e._v("Netty")]),e._v("中，可以使用"),t("code",[e._v("HttpClientCodec和HttpObjectAggregator")]),e._v("处理器，实现基于"),t("code",[e._v("HTTP/1.1")]),e._v("协议的长连接。")]),e._v(" "),t("li",[t("strong",[e._v("WebSocket 协议")]),e._v("："),t("code",[e._v("WebSocket")]),e._v("协议也支持长连接，可以在一个"),t("code",[e._v("TCP")]),e._v("连接上双向通信，实现实时数据交换。在"),t("code",[e._v("Netty")]),e._v("中，可以使用"),t("code",[e._v("WebSocketServerProtocolHandler")]),e._v("和"),t("code",[e._v("WebSocketClientProtocolHandler")]),e._v("处理器，实现"),t("code",[e._v("WebSocket")]),e._v("协议的长连接。")])]),e._v(" "),t("h2",{attrs:{id:"_29-netty-发送消息有几种方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_29-netty-发送消息有几种方式"}},[e._v("#")]),e._v(" 29. Netty 发送消息有几种方式？")]),e._v(" "),t("p",[e._v("在 "),t("code",[e._v("Netty")]),e._v(" 中，发送消息主要有以下三种方式：")]),e._v(" "),t("p",[t("img",{attrs:{src:v(846),alt:"图片"}})]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("Channel.write(Object msg)")]),e._v(" ：通过 "),t("code",[e._v("Channel")]),e._v(" 写入消息，消息会被缓存到"),t("code",[e._v("Channel")]),e._v(" 的发送缓冲区中，等待下一次调用 "),t("code",[e._v("flush()")]),e._v(" 将消息发送出去。")]),e._v(" "),t("li",[t("strong",[e._v("ChannelHandlerContext.write(Object msg)")]),e._v(" ：通过 "),t("code",[e._v("ChannelHandlerContext")]),e._v(" 写入消息，与"),t("code",[e._v("Channel.write(Object msg)")]),e._v(" 相比，"),t("code",[e._v("ChannelHandlerContext.write(Object msg)")]),e._v(" 会将消息写入到 "),t("code",[e._v("ChannelHandlerContext")]),e._v(" 的发送缓冲区中，等待下一次调用 "),t("code",[e._v("flush()")]),e._v("将消息发送出去。")]),e._v(" "),t("li",[t("strong",[e._v("ChannelHandlerContext.writeAndFlush(Object msg)")]),e._v(" ：通过"),t("code",[e._v("ChannelHandlerContext")]),e._v(" 写入并发送消息，等同于连续调用 "),t("code",[e._v("ChannelHandlerContext.write(Object msg)")]),e._v(" 和"),t("code",[e._v("ChannelHandlerContext.flush()")]),e._v("。")])]),e._v(" "),t("p",[e._v("在使用上述三种方式发送消息时，需要注意到写操作可能会失败或被延迟，因此需要在发送消息时进行一定的错误处理或者设置超时时间。另外，也可以使用 "),t("code",[e._v("Netty")]),e._v("提供的 "),t("code",[e._v("ChannelFuture")]),e._v(" 对象来监听操作结果或者进行异步操作。")]),e._v(" "),t("h2",{attrs:{id:"_30-netty-支持哪些心跳类型设置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_30-netty-支持哪些心跳类型设置"}},[e._v("#")]),e._v(" 30. Netty 支持哪些心跳类型设置？")]),e._v(" "),t("p",[e._v("在 "),t("code",[e._v("Netty")]),e._v(" 中，可以通过以下几种方式实现心跳机制：")]),e._v(" "),t("p",[t("img",{attrs:{src:v(847),alt:"图片"}})]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("IdleStateHandler")]),e._v(" ："),t("code",[e._v("Netty")]),e._v(" 内置的空闲状态检测处理器，支持多种空闲状态检测（如读空闲、写空闲、读写空闲）。")]),e._v(" "),t("li",[t("strong",[e._v("自定义心跳检测机制")]),e._v(" ：可以通过自定义实现 "),t("code",[e._v("ChannelInboundHandler")]),e._v("接口的处理器来实现心跳检测，例如可以通过计时器或者线程来定期发送心跳包，或者通过对远程端口的连接状态进行检测等方式实现。")]),e._v(" "),t("li",[t("strong",[e._v("使用心跳应答")]),e._v(" ：在应用层面定义心跳请求和应答消息，通过 "),t("code",[e._v("ChannelInboundHandler")]),e._v(" 处理器监听接收到的心跳请求消息，并返回心跳应答消息，来实现心跳检测。如果一段时间内未收到对方的心跳应答消息，则认为连接已经失效。")])]),e._v(" "),t("p",[e._v("需要注意的是，为了避免因心跳机制导致的网络负载过大或者频繁的连接断开和重连，应该根据具体业务场景选择适合的心跳类型和频率。")]),e._v(" "),t("h2",{attrs:{id:"_31-netty-的内存管理机制是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_31-netty-的内存管理机制是什么"}},[e._v("#")]),e._v(" 31. Netty 的内存管理机制是什么？")]),e._v(" "),t("p",[t("code",[e._v("Netty")]),e._v(" 的内存管理机制主要是通过 "),t("code",[e._v("ByteBuf")]),e._v("类实现的。"),t("code",[e._v("ByteBuf")]),e._v(" 是 "),t("code",[e._v("Netty")]),e._v(" 自己实现的一个可扩展的字节缓冲区类，它在 "),t("code",[e._v("JDK")]),e._v(" 的 "),t("code",[e._v("ByteBuffer")]),e._v("的基础上做了很多优化和改进。")]),e._v(" "),t("p",[t("code",[e._v("Netty")]),e._v(" 的"),t("code",[e._v("ByteBuf")]),e._v(" 的内存管理主要分为两种方式：")]),e._v(" "),t("ul",[t("li",[e._v("堆内存："),t("code",[e._v("ByteBuf")]),e._v(" 以普通的字节数组为基础，在 "),t("code",[e._v("JVM")]),e._v(" 堆上分配内存。这种方式适用于小型数据的传输，如传输的是文本、"),t("code",[e._v("XML")]),e._v(" 等数据。")]),e._v(" "),t("li",[e._v("直接内存："),t("code",[e._v("ByteBuf")]),e._v(" 使用操作系统的堆外内存，由操作系统分配和回收内存。这种方式适用于大型数据的传输，如传输的是音视频、大型图片等数据。")])]),e._v(" "),t("p",[e._v("对于堆内存，"),t("code",[e._v("Netty")]),e._v(" 采用了类似于"),t("code",[e._v("JVM")]),e._v("的分代内存管理机制，将缓冲区分为三种类型**：堆缓冲区、直接缓冲区、复合缓冲区**。Netty 会根据不同的使用场景和内存需求来决定使用哪种类型的缓冲区，从而提高内存利用率。")]),e._v(" "),t("p",[e._v("在使用 "),t("code",[e._v("ByteBuf")]),e._v("时，"),t("code",[e._v("Netty")]),e._v(" 还实现了一些优化和特殊处理，如池化缓冲区、零拷贝等技术，以提高内存的利用率和性能的表现。")]),e._v(" "),t("h2",{attrs:{id:"_32-netty-中如何实现高可用和负载均衡"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_32-netty-中如何实现高可用和负载均衡"}},[e._v("#")]),e._v(" 32. Netty 中如何实现高可用和负载均衡？")]),e._v(" "),t("p",[t("code",[e._v("Netty")]),e._v("本身并没有提供高可用和负载均衡的功能，但可以结合其他技术来实现这些功能。下面介绍一些常用的方案：")]),e._v(" "),t("ul",[t("li",[e._v("高可用：通过在多台服务器上部署同一个应用程序实现高可用。可以使用负载均衡器来将请求分配给不同的服务器，当某台服务器出现故障时，负载均衡器可以将请求转发给其他可用的服务器。常用的负载均衡器包括"),t("code",[e._v("Nginx、HAProxy")]),e._v("等。")]),e._v(" "),t("li",[e._v("负载均衡：负载均衡是将请求分配给多台服务器的过程，常用的负载均衡算法包括"),t("strong",[e._v("轮询、随机、权重")]),e._v("等。在"),t("code",[e._v("Netty")]),e._v("中可以使用多个"),t("code",[e._v("EventLoop")]),e._v("来处理请求，将请求分配给不同的"),t("code",[e._v("EventLoop")]),e._v("，从而实现负载均衡。另外，可以使用第三方框架，如"),t("code",[e._v("Zookeeper、Consul")]),e._v("等，来实现服务注册、发现和负载均衡。")]),e._v(" "),t("li",[e._v("高可用与负载均衡的结合：可以使用多台服务器来实现高可用和负载均衡。在每台服务器上部署同一个应用程序，并使用负载均衡器来分配请求。当某台服务器出现故障时，负载均衡器可以将请求转发给其他可用的服务器，从而保证高可用和负载均衡。")])])])}),[],!1,null,null,null);t.default=_.exports},833:function(e,t,v){e.exports=v.p+"assets/img/64021212121-dapdamdaskdmak.a425e47f.png"},834:function(e,t,v){e.exports=v.p+"assets/img/640-1693536014372-3.ce198add.png"},835:function(e,t,v){e.exports=v.p+"assets/img/640-1693536018331-6.9d6cc9fa.png"},836:function(e,t,v){e.exports=v.p+"assets/img/640-1693536022862-9.26a55a5c.png"},837:function(e,t,v){e.exports=v.p+"assets/img/640-1693536027154-12.852705ed.png"},838:function(e,t,v){e.exports=v.p+"assets/img/640-1693536030869-15.9da06e1c.png"},839:function(e,t,v){e.exports=v.p+"assets/img/640-1693536033699-18.36ea0965.png"},840:function(e,t,v){e.exports=v.p+"assets/img/image-20230901104147392.77155b5f.png"},841:function(e,t,v){e.exports=v.p+"assets/img/640-1693536117740-21.c3e77479.png"},842:function(e,t,v){e.exports=v.p+"assets/img/image-20230901104240733.5a4c42ab.png"},843:function(e,t,v){e.exports=v.p+"assets/img/image-20230901104310942.0e5c9d76.png"},844:function(e,t,v){e.exports=v.p+"assets/img/640-1693536202562-24.9e312019.png"},845:function(e,t,v){e.exports=v.p+"assets/img/640-1693536205450-27.731b0e19.png"},846:function(e,t,v){e.exports=v.p+"assets/img/640-1693536207788-30.2dd1c166.png"},847:function(e,t,v){e.exports=v.p+"assets/img/640-1693536211493-33.392f8981.png"}}]);