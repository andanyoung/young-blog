(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{606:function(s,a,n){"use strict";n.r(a);var t=n(4),e=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"_1、一致性hash算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、一致性hash算法"}},[s._v("#")]),s._v(" 1、⼀致性"),a("strong",[s._v("Hash")]),s._v("算法")]),s._v(" "),a("p",[s._v("Hash 算法，比如说在安全加密领域 MD5、SHA 等加密算法，在数据存储和查找方⾯有 Hash 表等, 以上都应用到了 Hash 算法。")]),s._v(" "),a("h2",{attrs:{id:"为什么需要使用-hash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要使用-hash"}},[s._v("#")]),s._v(" 为什么需要使用 Hash?")]),s._v(" "),a("p",[s._v("Hash 算法较多的应用在数据存储和查找领域，最经典的就是 Hash 表，它的查询效率非常之⾼，其中的哈希算法如果设计的比较 ok 的话，那么 Hash 表的数据查询时间复杂度可以接近于 O(1)，示例")]),s._v(" "),a("p",[s._v("需求：提供⼀组数据 1,5,7,6,3,4,8，对这组数据进⾏存储，然后随便给定⼀个数 n，请你判断 n 是否存在于刚才的数据集中？")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("list:List[1,5,7,6,3,4,8]\n\n// 通过循环判断来实现\nfor(int element: list) {\n\n    if(element == n) {\n\n    如果相等，说明n存在于数据集中\n\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("以上这种方法叫做顺序查找法 ：这种方式我们是通过循环来完成，比较原始，效率也不⾼")]),s._v(" "),a("p",[a("strong",[s._v("⼆分查找")]),s._v("：排序之后折半查找，相对于顺序查找法会提⾼⼀些效率，但是效率也并不是特别好我能否不循环！不⼆分！⽽是通过⼀次查询就把数据 n 从数据集中查询出来？？？可以！")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://md7.admin4j.com/blog/202303281557305.png",alt:"image-20230328155710259"}})]),s._v(" "),a("p",[s._v("定义⼀个数组，数组⻓度大于等于数据集⻓度，此处⻓度为 9，数据 1 就存储在下标为 1 的位置，3 就存储在下标为 3 的元素位置，，，依次类推。")]),s._v(" "),a("p",[s._v("这个时候，我想看下 5 存在与否，只需要判断 list.get(5) array[5] 是否为空，如果为空，代表 5 不存在于数据集，如果不为空代表 5 在数据集当中，通过⼀次查找就达到了目的，时间复杂度为 O(1)。")]),s._v(" "),a("p",[s._v("这种方式叫做“"),a("strong",[s._v("直接寻址法")]),s._v("”：直接把数据和数组的下标绑定到⼀起，查找的时候，直接 array[n]就取出了数据")]),s._v(" "),a("p",[s._v("优点：速度快，⼀次查找得到结果")]),s._v(" "),a("p",[s._v("缺点：")]),s._v(" "),a("p",[s._v("1）浪费空间，比如 1,5,7,6,3,4,8,12306 ，最大值 12306 ，按照上述方式需要定义⼀个比如⻓度为 12307 的数组，但是只存储零星的⼏个数据，其他位置空间都浪费着")]),s._v(" "),a("p",[s._v("2）数据如：1,5,7,6,3,4,8,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2 最大值 12，比如开辟 13 个空间，存储不了这么多内容")]),s._v(" "),a("p",[s._v("现在，换⼀种设计，如果数据是 3，5，7，12306，⼀共 4 个数据，我们开辟任意个空间，比如 5 个，那么具体数据存储到哪个位置呢，我们可以对数据进⾏求模（对空间位置数 5），根据求模余数确定存储位置的下标，比如 3%5=3，就可以把 3 这个数据放到下标为 3 的位置上，12306%5=1，就把 12306 这个数据存储到下标为 1 的位置上")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://md7.admin4j.com/blog/202303281558187.png",alt:"image-20230328155812130"}})]),s._v(" "),a("p",[s._v("对数据求模 （数据%空间位置数） 他就是⼀个 hash 算法，只不过这是⼀种比较普通⼜简单的 hash 算法，这种构造 Hash 算法的方式叫做除留余数法")]),s._v(" "),a("p",[s._v("如果数据是 1，6，7，8，把这 4 个数据存储到上⾯的数组中，1 和 6 得到的 hash 值是一样的，导致 hash 冲突")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://md7.admin4j.com/blog/202303281558280.png",alt:"image-20230328155831228"}})]),s._v(" "),a("p",[s._v("在此基础上采用开放寻址法（了解）")]),s._v(" "),a("p",[a("strong",[s._v("开放寻址法")]),s._v("：1 放进去了，6 再来的时候，向前或者向后找空闲位置存放，不好的地方，如果数组⻓度定义好了比如 10，⻓度不能扩展，来了 11 个数据，不管 Hash 冲突不冲突，肯定存不下这么多数据")]),s._v(" "),a("p",[a("strong",[s._v("拉链法")]),s._v("：数据⻓度定义好了，怎么存储更多内容呢，算好 Hash 值，在数组元素存储位置放了⼀个链表,一旦遇到 hash 冲突，冲突的位置就会放置一个链表，将冲突的值放到同一个链表中")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://md7.admin4j.com/blog/202303281559140.png",alt:"image-20230328155911090"}})]),s._v(" "),a("p",[s._v("如果 Hash 算法设计的比较好的话，那么查询效率会更接近于 O(1)，如果 Hash 算法设计的比较 low，那么查询效率就会很低了")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://md7.admin4j.com/blog/202303281559499.png",alt:"image-20230328155936434"}})]),s._v(" "),a("p",[s._v("所以，Hash 表的查询效率⾼不⾼取决于 Hash 算法，hash 算法能够让数据平均分布，既能够节省空间⼜能提⾼查询效率。Hash 算法的研究是很深的⼀⻔学问，比较复杂，⻓久以来，Hash 表内部的 Hash 算法也⼀直在更新，很多数学家也在研究。")]),s._v(" "),a("p",[s._v("除留余数法 3%5")]),s._v(" "),a("p",[s._v("线性构造 Hash 算法")]),s._v(" "),a("p",[s._v("直接寻址法也是⼀种构造 Hash 的方式，只不过更简单，表达式：H(key)=key")]),s._v(" "),a("p",[s._v("比如 H(key)=a*key + b(a,b 是常量)")]),s._v(" "),a("p",[s._v("hashcode 其实也是通过⼀个 Hash 算法得来的")]),s._v(" "),a("h3",{attrs:{id:"_1、-hash算法应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、-hash算法应用场景"}},[s._v("#")]),s._v(" 1、 "),a("strong",[s._v("Hash")]),s._v("算法应用场景")]),s._v(" "),a("p",[s._v("Hash 算法在分布式集群架构中的应用场景")]),s._v(" "),a("p",[s._v("Hash 算法在很多分布式集群产品中都有应用，比如分布式集群架构 Redis、Hadoop、ElasticSearch，Mysql 分库分表，Nginx 负载均衡等")]),s._v(" "),a("p",[s._v("主要的应用场景归纳起来两个")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("请求的负载均衡（比如 nginx 的 ip_hash 策略）")]),s._v(" "),a("p",[s._v("Nginx 的 IP_hash 策略可以在客户端 ip 不变的情况下，将其发出的请求始终路由到同⼀个目标服务")]),s._v(" "),a("p",[s._v("器上，实现会话粘滞，避免处理 session 共享问题")]),s._v(" "),a("p",[s._v("如果没有 IP_hash 策略，那么如何实现会话粘滞？")]),s._v(" "),a("p",[s._v("可以维护⼀张映射表，存储客户端 IP 或者 sessionid 与具体目标服务器的映射关系")]),s._v(" "),a("p",[s._v("<ip,tomcat1>")]),s._v(" "),a("p",[s._v("缺点")]),s._v(" "),a("p",[s._v("1）那么，在客户端很多的情况下，映射表非常大，浪费内存空间")]),s._v(" "),a("p",[s._v("2）客户端上下线，目标服务器上下线，都会导致重新维护映射表，映射表维护成本很大")])])]),s._v(" "),a("p",[s._v("如果使用哈希算法，事情就简单很多，我们可以对 ip 地址或者 sessionid 进⾏计算哈希值，哈希值与服务器数量进⾏取模运算，得到的值就是当前请求应该被路由到的服务器编号，如此，同⼀个客户端 ip 发送过来的请求就可以路由到同⼀个目标服务器，实现会话粘滞。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("分布式存储")]),s._v(" "),a("p",[s._v("以分布式内存数据库 Redis 为例,集群中有 redis1，redis2，redis3 三台 Redis 服务器那么,在进⾏数据存储时,<key1,value1>数据存储到哪个服务器当中呢？针对 key 进⾏ hash 处理 hash(key1)%3=index, 使用余数 index 锁定存储的具体服务器节点")])])]),s._v(" "),a("h3",{attrs:{id:"_2、普通hash算法存在的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、普通hash算法存在的问题"}},[s._v("#")]),s._v(" 2、普通"),a("strong",[s._v("Hash")]),s._v("算法存在的问题")]),s._v(" "),a("p",[s._v("普通 Hash 算法存在⼀个问题，以 ip_hash 为例，假定下载用户 ip 固定没有发生改变，现在 tomcat3 出现了问题，down 机了，服务器数量由 3 个变为了 2 个，之前所有的求模都需要重新计算。")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://md7.admin4j.com/blog/202303281601167.png",alt:"image-20230328160118116"}})]),s._v(" "),a("p",[s._v("如果在真实生产情况下，后台服务器很多台，客户端也有很多，那么影响是很大的，缩容和扩容都会存在这样的问题，大量用户的请求会被路由到其他的目标服务器处理，用户在原来服务器中的会话都会丢失。")]),s._v(" "),a("h3",{attrs:{id:"_3、一致性hash算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、一致性hash算法"}},[s._v("#")]),s._v(" 3、⼀致性"),a("strong",[s._v("Hash")]),s._v("算法")]),s._v(" "),a("p",[s._v("⼀致性哈希算法思路如下：")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://md7.admin4j.com/blog/202303281602276.png",alt:"image-20230328160202250"}})]),s._v(" "),a("p",[s._v("⾸先有⼀条直线，直线开头和结尾分别定为为 1 和 2 的 32 次方减 1，这相当于⼀个地址，对于这样⼀条线，弯过来构成⼀个圆环形成闭环，这样的⼀个圆环称为 hash 环。我们把服务器的 ip 或者主机名求 hash 值然后对应到 hash 环上，那么针对客户端用户，也根据它的 ip 进⾏ hash 求值，对应到环上某个位置，然后如何确定⼀个客户端路由到哪个服务器处理呢？按照顺时针方向找最近的服务器节点")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://md7.admin4j.com/blog/202303281602171.png",alt:"image-20230328160227107"}})]),s._v(" "),a("p",[s._v("假如将服务器 3 下线，服务器 3 下线后，原来路由到 3 的客户端重新路由到服务器 4，对于其他客户端没有影响只是这⼀小部分受影响（请求的迁移达到了最小，这样的算法对分布式集群来说非常合适的，避免了大量请求迁移 ）")]),s._v(" "),a("p",[a("img",{attrs:{src:"C:%5CUsers%5Candanyang%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230328160622067.png",alt:"image-20230328160622067"}})]),s._v(" "),a("p",[s._v("增加服务器 5 之后，原来路由到 3 的部分客户端路由到新增服务器 5 上，对于其他客户端没有影响只是这⼀小部分受影响（请求的迁移达到了最小，这样的算法对分布式集群来说非常合适的，避免了大量请求迁移 ）")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://md7.admin4j.com/blog/202303281604297.png",alt:"image-20230328160408243"}})]),s._v(" "),a("p",[s._v("1）如前所述，每⼀台服务器负责⼀段，⼀致性哈希算法对于节点的增减都只需重定位环空间中的⼀小部分数据，具有较好的容错性和可扩展性。")]),s._v(" "),a("p",[a("strong",[s._v("但是")]),s._v("，⼀致性哈希算法在服务节点太少时，容易因为节点分部不均匀⽽造成数据倾斜问题。例如系统中只有两台服务器，其环分布如下，节点 2 只能负责非常小的⼀段，大量的客户端")]),s._v(" "),a("p",[s._v("请求落在了节点 1 上，"),a("strong",[s._v("这就是数据（请求）倾斜问题")])]),s._v(" "),a("p",[s._v("2）为了解决这种数据倾斜问题，⼀致性哈希算法引⼊了虚拟节点机制，即对每⼀个服务节点计算多个哈希，每个计算结果位置都放置⼀个此服务节点，称为虚拟节点。")]),s._v(" "),a("p",[s._v("具体做法可以在服务器 ip 或主机名的后⾯增加编号来实现。比如，可以为每台服务器计算三个虚拟节点，于是可以分别计算 “节点 1 的 ip#1”、“节点 1 的 ip#2”、“节点 1 的 ip#3”、“节点 2 的 ip#1”、“节点 2 的 ip#2”、“节点 2 的 ip#3”的哈希值，于是形成六个虚拟节点，当客户端被路由到虚拟节点的时候其实是被路由到该虚拟节点所对应的真实节点")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://md7.admin4j.com/blog/image-20230328160536228.png",alt:"image-20230328160536228"}})]),s._v(" "),a("h3",{attrs:{id:"_4、手写实现一致性-hash-算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、手写实现一致性-hash-算法"}},[s._v("#")]),s._v(" 4、手写实现一致性 Hash 算法")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("普通 Hash 算法实现")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class GeneralHash {\n\n    public static void main(String[] args) {\n        // 定义客户端IP\n        String[] clients = new String[]\n                {"10.78.12.3","113.25.63.1","126.12.3.8"};\n        // 定义服务器数量\n        int serverCount = 5;// (编号对应0，1，2)\n        // hash(ip)%node_counts=index\n        //根据index锁定应该路由到的tomcat服务器\n        for(String client: clients) {\n            int hash = Math.abs(client.hashCode());\n            int index = hash%serverCount;\n            System.out.println("客户端：" + client + " 被路由到服务器编号为："\n                    + index);\n        }\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("一致性 hash 算法")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class ConsistentHashNoVirtual {\n\n    public static void main(String[] args) {\n        //step1 初始化：把服务器节点IP的哈希值对应到哈希环上\n        // 定义服务器ip\n        String[] tomcatServers = new String[]\n                {"123.111.0.0", "123.101.3.1", "111.20.35.2", "123.98.26.3"};\n\n\n        TreeMap<Integer, String> hashServerMap = new TreeMap<>();\n\n        for (String tomcatServer : tomcatServers) {\n\n            // 求出每⼀个ip的hash值，对应到hash环上，存储hash值与ip的对应关系\n            int serverHash = Math.abs(tomcatServer.hashCode());\n            // 存储hash值与ip的对应关系\n            hashServerMap.put(serverHash,tomcatServer);\n\n        }\n\n\n        //step2 针对客户端IP求出hash值\n        // 定义客户端IP\n        String[] clients = new String[]\n                {"10.78.12.3","113.25.63.1","126.12.3.8"};\n        for(String client : clients) {\n            int clientHash = Math.abs(client.hashCode());\n            //step3 针对客户端,找到能够处理当前客户端请求的服务器（哈希环上顺时针最近）\n            // 根据客户端ip的哈希值去找出哪⼀个服务器节点能够处理（）\n            SortedMap<Integer, String> integerStringSortedMap =\n                    hashServerMap.tailMap(clientHash);\n            if(integerStringSortedMap.isEmpty()) {\n                // 取哈希环上的顺时针第⼀台服务器\n                Integer firstKey = hashServerMap.firstKey();\n                System.out.println("==========>>>>客户端：" + client + " 被路由到服务器：" + hashServerMap.get(firstKey));\n            }else{\n                Integer firstKey = integerStringSortedMap.firstKey();\n                System.out.println("==========>>>>客户端：" + client + " 被路由到服务器：" + hashServerMap.get(firstKey));\n            }\n        }\n\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("含虚拟节点的一致性 hash 算法")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class ConsistentHashWithVirtual {\n\n    public static void main(String[] args) {\n        //step1 初始化：把服务器节点IP的哈希值对应到哈希环上\n        // 定义服务器ip\n        String[] tomcatServers = new String[]\n                {"123.111.0.0", "123.101.3.1", "111.20.35.2", "123.98.26.3"};\n\n\n        TreeMap<Integer, String> hashServerMap = new TreeMap<>();\n\n        // 定义针对每个真实服务器虚拟出来⼏个节点\n        int virtaulCount = 3;\n\n        for (String tomcatServer : tomcatServers) {\n\n            // 求出每⼀个ip的hash值，对应到hash环上，存储hash值与ip的对应关系\n            int serverHash = Math.abs(tomcatServer.hashCode());\n            // 存储hash值与ip的对应关系\n            hashServerMap.put(serverHash,tomcatServer);\n\n            for (int i = 0; i < virtaulCount; i++) {\n                int virtualHash = Math.abs((tomcatServer + "#" + i).hashCode());\n                hashServerMap.put(virtualHash,"----由虚拟节点"+ i + "映射过来的请求："+ tomcatServer);\n            }\n\n        }\n\n        //step2 针对客户端IP求出hash值\n        // 定义客户端IP\n        String[] clients = new String[]\n                {"10.78.12.3","113.25.63.1","126.12.3.8"};\n        for(String client : clients) {\n            int clientHash = Math.abs(client.hashCode());\n            //step3 针对客户端,找到能够处理当前客户端请求的服务器（哈希环上顺时针最近）\n            // 根据客户端ip的哈希值去找出哪⼀个服务器节点能够处理（）\n            SortedMap<Integer, String> integerStringSortedMap =\n                    hashServerMap.tailMap(clientHash);\n            if(integerStringSortedMap.isEmpty()) {\n                // 取哈希环上的顺时针第⼀台服务器\n                Integer firstKey = hashServerMap.firstKey();\n                System.out.println("==========>>>>客户端：" + client + " 被路由到服务器：" + hashServerMap.get(firstKey));\n            }else{\n                Integer firstKey = integerStringSortedMap.firstKey();\n                System.out.println("==========>>>>客户端：" + client + " 被路由到服务器：" + hashServerMap.get(firstKey));\n            }\n        }\n\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"_5、nginx-配置一致性hash负载均衡策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、nginx-配置一致性hash负载均衡策略"}},[s._v("#")]),s._v(" 5、"),a("strong",[s._v("Nginx")]),s._v(" 配置⼀致性"),a("strong",[s._v("Hash")]),s._v("负载均衡策略")]),s._v(" "),a("p",[a("code",[s._v("ngx_http_upstream_consistent_hash")]),s._v("模块是⼀个负载均衡器，使用⼀个内部⼀致性 hash 算法来选择合适的后端节点。")]),s._v(" "),a("p",[s._v("该模块可以根据配置参数采取不同的方式将请求均匀映射到后端机器，")]),s._v(" "),a("p",[s._v("consistent_hash $remote_addr：可以根据客户端 ip 映射")]),s._v(" "),a("p",[s._v("consistent_hash $request_uri：根据客户端请求的 uri 映射")]),s._v(" "),a("p",[s._v("consistent_hash $args：根据客户端携带的参数进⾏映")]),s._v(" "),a("p",[s._v("ngx_http_upstream_consistent_hash 模块是⼀个第三方模块，需要我们下载安装后使用")]),s._v(" "),a("p",[s._v("1）github 下载 nginx ⼀致性 hash 负载均衡模块 "),a("a",{attrs:{href:"https://github.com/replay/ngx_http_consistent_hash",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://github.com/replay/ngx_http_consistent_hash"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("2）将下载的压缩包上传到 nginx 服务器，并解压")]),s._v(" "),a("p",[s._v("3）我们已经编译安装过 nginx，此时进⼊当时 nginx 的源码目录，执⾏如下命令")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("./confifigure —add-module=/root/ngx_http_consistent_hash-master\nmake\nmake install\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("4）Nginx 就可以使⽤啦，在 nginx.conf ⽂件中配置")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://md7.admin4j.com/blog/image-20230328161214979.png",alt:""}})]),s._v(" "),a("h1",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/agonie201218/article/details/103887392",target:"_blank",rel:"noopener noreferrer"}},[s._v("什么是一致性 Hash 算法"),a("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);