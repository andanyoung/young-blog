(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{612:function(n,s,a){"use strict";a.r(s);var e=a(4),t=Object(e.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"第-5-章-spring-之-dao"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第-5-章-spring-之-dao"}},[n._v("#")]),n._v(" 第 5 章 Spring 之 DAO")]),n._v(" "),s("p",[n._v("在上一章节中，我们了解了 Spring 框架中的 AOP 模块，这一章节我们开始学习 Spring 框架中的 DAO 模块。\n本章主要涉及的知识点：")]),n._v(" "),s("ul",[s("li",[n._v("JDBC 基本用法：Statement、PreparedStatement、CallableStatement 的使用。")]),n._v(" "),s("li",[n._v("JDBC 高级用法：批处理、事务处理。")]),n._v(" "),s("li",[n._v("Spring DAO 模块：JdbcDaoSupport、MappingSqlQuery 等对象的使用。")]),n._v(" "),s("li",[n._v("Spring 事务管理：TransactionProxyFactoryBean、DataSourceTransactionManager 的配置与使用。")])]),n._v(" "),s("h2",{attrs:{id:"_5-1-jdbc-详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-jdbc-详解"}},[n._v("#")]),n._v(" 5.1 JDBC 详解")]),n._v(" "),s("p",[n._v("在了解 Spring 的 DAO 模块时需要有一定的数据库基础，Java 语言与数据库连接使用的是 JDBC，所以有必要学习一下 JDBC 的内容。")]),n._v(" "),s("h3",{attrs:{id:"_5-1-1-jdbc-介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-1-jdbc-介绍"}},[n._v("#")]),n._v(" 5.1.1 JDBC 介绍")]),n._v(" "),s("p",[n._v("JDBC（Java DB Connection，Java 数据库连接）是一种可用于执行 SQL 语句的 Java API（Application Programming Interface，应用程序设计接口）。它由一些 Java 语言编写的类和界面组成。JDBC 为数据库应用开发人员和数据库前台工具开发人员提供了一种标准的应用程序设计接口，使开发人员可以用纯 Java 语言编写完整的数据库应用程序。JDBC 代表 Java 数据库连接。它是一个软件层，允许开发者在 Java 中编写客户端／服务器应用。\n通过使用 JDBC，开发人员可以很方便地将 SQL 语句传送给几乎任何一种数据库。也就是说，开发人员可以不必写一个程序访问 Sybase，写另一个程序访问 Oracle，再写一个程序访问 Microsoft 的 SQL Server。用 JDBC 写的程序能够自动将 SQL 语句传送给相应的数据库管理系统（DBMS）。不但如此，使用 Java 编写的应用程序可以在任何支持 Java 的平台上运行，不必在不同的平台上编写不同的应用。Java 和 JDBC 的结合可以让开发人员在开发数据库应用时真正实现“Write Once，Run Everywhere！”。")]),n._v(" "),s("h3",{attrs:{id:"_5-1-2-操作步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-2-操作步骤"}},[n._v("#")]),n._v(" 5.1.2 操作步骤")]),n._v(" "),s("p",[n._v("JDBC 可以连接不同的数据库，不同的数据库也可以被不同的工具连接，但在连接时基本都是固定的几个步骤。")]),n._v(" "),s("h3",{attrs:{id:"_1-驱动引入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-驱动引入"}},[n._v("#")]),n._v(" 1．驱动引入")]),n._v(" "),s("p",[n._v("JDBC 是对外开放的接口，数据库提供商实现了这些接口，这些接口的组合就是驱动。数据库有好多种，例如 MySQL、Oracle 等，需要注册不同的驱动来操作对应的数据库，注册驱动也得要有驱动才是，所以首先要将驱动引入项目。")]),n._v(" "),s("h3",{attrs:{id:"_2-注册驱动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-注册驱动"}},[n._v("#")]),n._v(" 2．注册驱动")]),n._v(" "),s("p",[n._v("引入驱动之后应用程序也不知道是用的什么数据库，只是把驱动下载了下来放到项目中，所以得注册一下才知道是谁，注册之后会返回对应的驱动管理对象。就和入职一样，你到公司了但不报到，那也不知道来了没来，报到了才会有针对个人的流程。")]),n._v(" "),s("h4",{attrs:{id:"_3-创建连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-创建连接"}},[n._v("#")]),n._v(" 3．创建连接")]),n._v(" "),s("p",[n._v("数据库和应用程序是分隔开来的，数据库可能存放在远程，那怎么和数据库搭上呢？这就需要连接了。")]),n._v(" "),s("h4",{attrs:{id:"_4-执行操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-执行操作"}},[n._v("#")]),n._v(" 4．执行操作")]),n._v(" "),s("p",[n._v("连接上之后要干什么呢，不能一直连着不干事情啊，这也是资源的一种浪费，所以连接之后执行数据库的操作增、删、改、查等。")]),n._v(" "),s("h4",{attrs:{id:"_5-返回结果"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-返回结果"}},[n._v("#")]),n._v(" 5．返回结果")]),n._v(" "),s("p",[n._v("增、删、改、查操作结束之后，总要有一个结果，不然怎么知道成功与否，查询的话会返回查询的数据，增加、删除、修改会返回影响的行数。")]),n._v(" "),s("h4",{attrs:{id:"_6-释放资源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-释放资源"}},[n._v("#")]),n._v(" 6．释放资源")]),n._v(" "),s("p",[n._v("把结果也返回了，但不能老连着数据库，这样占用资源，创建的对象也没有释放，还占空间，所以用完了就把它关掉。")]),n._v(" "),s("h3",{attrs:{id:"_5-1-3-statement-的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-3-statement-的使用"}},[n._v("#")]),n._v(" 5.1.3 Statement 的使用")]),n._v(" "),s("p",[n._v("Statement 是 Java 执行数据库操作的一个重要接口，用于在已经建立数据库连接的基础上，向数据库发送要执行的 SQL 语句。Statement 对象用于执行静态 SQL 语句，并返回它所生成结果的对象。\n默认情况下，同一时间每个 Statement 对象只能打开一个 ResultSet 对象。因此，如果读取一个 ResultSet 对象与读取另一个交叉，那么这两个对象必须是由不同的 Statement 对象生成的。如果存在某个语句打开的当前 ResultSet 对象，那么 Statement 接口中的所有执行方法都会隐式关闭它。\n在使用 Statement 之前先进行数据准备，这里在本地 MySQL 中创建了一个数据库 daodemodb 和一张表 t_user，并在表中增加了几条数据用来测试。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("/* 数据库创建 */\nCREATE DATABASE `daodemodb` /*!40100 DEFAULT CHARACTER SET utf8 */;\n/*创建测试表*/\nCREATE TABLE `t_user` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` varchar(45) DEFAULT NULL,\n  `age` int(11) DEFAULT NULL,\n  `money` decimal(10,2) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n/*数据准备*/\ninsert into t_user(name,age,money)\nvalues\n('张三','24',666.66),\n('李四','25',888.88),\n('王二','26',999.99),\n('小明','27',555.55),\n('小赵','28',333.33)\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br")])]),s("p",[n._v("按照上面的操作步骤，需要引入驱动，这里使用 pom.xml 引入 mysql 的 jdbc 驱动。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>8.0.12</version>\n</dependency>\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[n._v("然后就是在代码中依次注册驱动、创建连接、执行操作、返回结果、释放资源步骤，下面代码演示的就是这个过程，从 t_user 表中查询数据并打印到日志中。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('import java.sql.*;\n\npublic class StatementDemo {\n\n  public static void main(String[] args) throws SQLException {\n    // TODO Auto-generated method stub\n    Connection conn = null;\n    Statement stmt = null;\n    ResultSet rs = null;\n    try {\n      // 注册驱动\n      DriverManager.registerDriver(new com.mysql.cj.jdbc.Driver());\n      // 通过注册的驱动获得连接对象Connection\n      conn =\n          DriverManager.getConnection(\n              "jdbc:mysql://127.0.0.1:3306/daodemodb?useUnicode=true&characterEncoding=UTF-8"\n                  + "&serverTimezone=UTC&useSSL=false",\n              "root",\n              "123456");\n      // 通过Statement对象执行操作 返回结果ResultSet\n      stmt = conn.createStatement();\n      // 返回结果\n      rs = stmt.executeQuery("select * from t_user");\n      while (rs.next()) {\n        System.out.println(\n            "姓名:"\n                + rs.getString("name")\n                + "  年龄:"\n                + rs.getInt("age")\n                + "  余额:"\n                + rs.getDouble("money"));\n      }\n    } catch (SQLException e) {\n      System.out.println(e.getMessage());\n      e.printStackTrace();\n    } finally {\n      // 释放资源\n      if (conn != null) {\n        conn.close();\n      }\n      if (stmt != null) {\n        stmt.close();\n      }\n      if (rs != null) {\n        rs.close();\n      }\n    }\n  }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br")])]),s("blockquote",[s("p",[n._v("输出结果：")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("姓名:张三  年龄:24  余额:666.66\n姓名:李四  年龄:25  余额:888.88\n姓名:王二  年龄:26  余额:999.99\n姓名:小明  年龄:27  余额:555.55\n姓名:小赵  年龄:28  余额:333.33\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("h3",{attrs:{id:"_5-1-4-使用-preparedstatement-返回自增主键"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-4-使用-preparedstatement-返回自增主键"}},[n._v("#")]),n._v(" 5.1.4 使用 PreparedStatement 返回自增主键")]),n._v(" "),s("p",[n._v("实际上有三种 Statement 对象，它们都作为在给定连接上执行 SQL 语句的包容器：Statement、PreparedStatement（从 Statement 继承而来）和 CallableStatement（从 PreparedStatement 继承而来）。它们都专用于发送特定类型的 SQL 语句：Statement 对象用于执行不带参数的简单 SQL 语句；PreparedStatement 对象用于执行带或不带 IN 参数的预编译 SQL 语句；CallableStatement 对象用于执行对数据库已存在的存储过程的调用。Statement 接口提供了执行语句和获取结果的基本方法。PreparedStatement 接口添加了处理 IN 参数的方法；而 CallableStatement 添加了处理 OUT 参数的方法。\n这里向 t_user 表中插入一条数据，并返回自增主键 id 的值。在准备 SQL 时使用？来做参数的占位符，在实例化 PreparedStatement 对象之后对 SQL 进行传参，这样也能防止注入式攻击。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('package spring.tutorial.chapter5.jdbc;\n\nimport java.sql.*;\n\npublic class PreparedStatementDemo {\n  public static void main(String[] args) throws SQLException {\n    // TODO Auto-generated method stub\n    Connection conn = null;\n    PreparedStatement prestmt = null;\n    ResultSet rs = null;\n    try {\n      // 注册驱动\n      DriverManager.registerDriver(new com.mysql.cj.jdbc.Driver());\n      // 通过注册的驱动获得连接对象Connection\n      conn =\n          DriverManager.getConnection(\n              "jdbc:mysql://127.0.0.1:3306/daodemodb?useUnicode=true&characterEncoding=UTF-8"\n                  + "&serverTimezone=UTC&useSSL=false",\n              "root",\n              "123456");\n      // PreparedStatement对象\n      String sql = "insert into t_user (name,age,money) values(?,?,?)";\n      prestmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);\n      prestmt.setString(1, "小李");\n      prestmt.setInt(2, 25);\n      prestmt.setDouble(3, 222.22);\n      // 返回结果\n      int result = prestmt.executeUpdate();\n      if (result > 0) {\n        System.out.println("新增成功");\n        rs = prestmt.getGeneratedKeys();\n        while (rs.next()) {\n          System.out.println("生成的主键ID为:" + rs.getInt(1));\n        }\n      }\n    } catch (SQLException e) {\n      System.out.println(e.getMessage());\n      e.printStackTrace();\n    } finally {\n      // 释放资源\n      if (conn != null) {\n        conn.close();\n      }\n      if (prestmt != null) {\n        prestmt.close();\n      }\n      if (rs != null) {\n        rs.close();\n      }\n    }\n  }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br")])]),s("blockquote",[s("p",[n._v("输出结果：")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("新增成功\n生成的主键ID为:6\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("h3",{attrs:{id:"_5-1-5-使用-callablestatement-调用存储过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-5-使用-callablestatement-调用存储过程"}},[n._v("#")]),n._v(" 5.1.5 使用 CallableStatement 调用存储过程")]),n._v(" "),s("p",[n._v("在使用数据库的过程中，可能会调用存储过程，可以使用 CallableStatement 来调用存储过程。")]),n._v(" "),s("ul",[s("li",[n._v("调用存储函数："),s("code",[n._v("{?= call <procedure-name>[(<arg1>,<arg2>, ...)]}")]),n._v("。")]),n._v(" "),s("li",[n._v("调用存储过程："),s("code",[n._v("{call <procedure-name>[(<arg1>,<arg2>, ...)]}")]),n._v("。\n通过 CallableStatement 对象的 registerOutParameter()方法注册 Out 参数。通过 CallableStatement 对象的 setXxx()方法设定 IN 或 In out 参数，若想将参数设为 null，可以使用 setNull()。如果所调用的是带返回参数的存储过程，还需要通过 CallableStatement 对象的 getXxx()获取输出参数。\n在数据库中创建了存储过程 p_selectUserByAge，根据用户年龄查找用户，存储过程一个传入参数 age，一个传出参数 count，参数 count 存放根据年龄查找的用户个数。")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("CREATE  PROCEDURE `p_selectUserByAge`(age int, out count int)\nBEGIN\n  set count=(select count(1) from t_user t where t.age =age);\n  select * from  t_user t where t.age =age;\nEND\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[n._v("在下面的代码中先使用 Connection 的 prepareCall 方法来实例化 CallableStatement，再使用 CallableStatement 对象的 registerOutParameter 方法设置传入参数，最后执行存储过程返回结果。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('package spring.tutorial.chapter5.jdbc;\n\nimport java.sql.*;\n\npublic class CallableStatementDemo {\n\n  public static void main(String[] args) throws SQLException {\n    // TODO Auto-generated method stub\n    Connection conn = null;\n    CallableStatement callstmt = null;\n    ResultSet rs = null;\n    try {\n      // 注册驱动\n      DriverManager.registerDriver(new com.mysql.cj.jdbc.Driver());\n      // 通过注册的驱动获得连接对象Connection\n      conn =\n          DriverManager.getConnection(\n              "jdbc:mysql://127.0.0.1:3306/daodemodb?useUnicode=true&characterEncoding=UTF-8"\n                  + "&serverTimezone=UTC&useSSL=false",\n              "root",\n              "123456");\n      // CallableStatement对象\n      callstmt = conn.prepareCall("{call p_selectUserByAge(?,?)}");\n      callstmt.setInt(1, 25);\n      // 设置传入参数\n      callstmt.registerOutParameter(2, Types.INTEGER);\n      rs = callstmt.executeQuery();\n      while (rs.next()) {\n        System.out.println(\n            "姓名:"\n                + rs.getString("name")\n                + "  年龄:"\n                + rs.getInt("age")\n                + "  出生日期:"\n                + rs.getDouble("money"));\n      }\n      System.out.println("存储过程返回值:" + callstmt.getInt(2));\n    } catch (SQLException e) {\n      System.out.println(e.getMessage());\n      e.printStackTrace();\n    } finally {\n      // 释放资源\n      if (conn != null) {\n        conn.close();\n      }\n      if (callstmt != null) {\n        callstmt.close();\n      }\n      if (rs != null) {\n        rs.close();\n      }\n    }\n  }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br")])]),s("blockquote",[s("p",[n._v("输出结果：")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("姓名:李四  年龄:25  出生日期:888.88\n姓名:小李  年龄:25  出生日期:222.22\n存储过程返回值:2\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("h3",{attrs:{id:"_5-1-6-批处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-6-批处理"}},[n._v("#")]),n._v(" 5.1.6 批处理")]),n._v(" "),s("p",[n._v("在实际开发中往往会批量执行 SQL，Statement 和 PreparedStatement 都支持批量执行 SQL 语句，但这些 SQL 必须是 Insert、Update、Delete 这种执行后返回一个 Int 类型的数，表示影响的行数。Statement 和 PreparedStatement 都是通过 addBatch()方法添加一条 SQL 语句，通过 executeBatch()方法批量执行 SQL 语句，返回一个 Int 类型的数组，表示各 SQL 的返回值，这样就减少了注入驱动、创建连接这些步骤，提升了效率。首先看一下 Statement 批处理的例子：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('package spring.tutorial.chapter5.jdbc;\n\nimport java.sql.*;\n\npublic class StatementSQLBatch {\n  public static void main(String[] args) throws SQLException {\n    // TODO Auto-generated method stub\n    Connection conn = null;\n\n    ResultSet rs = null;\n    Statement stmt = null;\n    try {\n      // 注册驱动\n      DriverManager.registerDriver(new com.mysql.jdbc.Driver());\n      // 通过注册的驱动获得连接对象Connection\n      conn =\n          DriverManager.getConnection(\n              "jdbc:mysql://127.0.0.1:3306/daodemodb?useUnicode=true&characterEncoding=UTF-8"\n                  + "&serverTimezone=UTC&useSSL=false",\n              "root",\n              "123456");\n\n      stmt = conn.createStatement();\n      for (int i = 0; i < 2; i++) {\n        String sql =\n            "insert into t_user (name,age,money) values(\'StatementTest"\n                + i\n                + "\',"\n                + 25\n                + i\n                + ",222.22)";\n        stmt.addBatch(sql);\n      }\n      // 批处理\n      int[] result = stmt.executeBatch();\n      System.out.println("影响的行数分别为:");\n      for (int i = 0; i < result.length; i++) {\n        System.out.print(result[i] + "  ");\n      }\n    } catch (SQLException e) {\n      System.out.println(e.getMessage());\n      e.printStackTrace();\n    } finally {\n      // 释放资源\n      if (conn != null) {\n        conn.close();\n      }\n      if (stmt != null) {\n        stmt.close();\n      }\n      if (rs != null) {\n        rs.close();\n      }\n    }\n  }\n}\n\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br")])]),s("p",[n._v("由于 Statement 无法传递参数，必须是完整的 SQL 语句，因此先将 SQL 拼接之后通过 addBatch(sql)方法加入到批处理中，然后通过 executeBatch 方法执行批处理返回影响行数的数组。\nPreparedStatement 既可以是完整的 SQL，也可以用带参数的不完整的 SQL。我们看一下使用 PreparedStatement 进行批处理的例子。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('package spring.tutorial.chapter5.jdbc;\n\nimport java.sql.*;\n\npublic class PreparedStatementSQLBatch {\n  public static void main(String[] args) throws SQLException {\n    Connection conn = null;\n\n    ResultSet rs = null;\n    PreparedStatement prestmt = null;\n    try {\n      // 注册驱动\n      DriverManager.registerDriver(new com.mysql.jdbc.Driver());\n      // 通过注册的驱动获得连接对象Connection\n      conn =\n          DriverManager.getConnection(\n              "jdbc:mysql://127.0.0.1:3306/daodemodb?useUnicode=true&characterEncoding=UTF-8"\n                  + "&serverTimezone=UTC&useSSL=false",\n              "root",\n              "123456");\n      String sql = "insert into t_user (name,age,money) values(?,?,?)";\n      prestmt = conn.prepareStatement(sql);\n      for (int i = 0; i < 2; i++) {\n        prestmt.setString(1, "PreparedStatementTest" + i);\n        prestmt.setInt(2, 25 + i);\n        prestmt.setDouble(3, 222.22);\n        prestmt.addBatch();\n      }\n      // 批处理\n      int[] result = prestmt.executeBatch();\n      System.out.println("影响的行数分别为:");\n      for (int i = 0; i < result.length; i++) {\n        System.out.print(result[i] + "  ");\n      }\n    } catch (SQLException e) {\n      System.out.println(e.getMessage());\n      e.printStackTrace();\n    } finally {\n      // 释放资源\n      if (conn != null) {\n        conn.close();\n      }\n      if (prestmt != null) {\n        prestmt.close();\n      }\n      if (rs != null) {\n        rs.close();\n      }\n    }\n  }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br")])]),s("p",[n._v("这里使用占位符？来初始化 SQL，然后通过不带参数的 addBatch 加入批处理中，最后还是通过 executeBatch 执行批处理操作。")]),n._v(" "),s("p",[n._v("上面演示了 Statement、PreparedStatement 批处理的使用，这里还要说明一下，批量执行 SQL 需要数据库的支持，有些数据库可能不支持。批量处理将多条 SQL 语句提交给数据库一块执行，效率高一些，但如果数据比较多，比如几万条 SQL，就需要分批次执行，例如 200 条执行一次，如果为了增加一致性，可以在批量处理的基础上增加事务。")]),n._v(" "),s("h3",{attrs:{id:"_5-1-7-事务处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-7-事务处理"}},[n._v("#")]),n._v(" 5.1.7 事务处理")]),n._v(" "),s("p",[n._v("关系型数据库一般都支持事务。事务有四大特性：原子性、一致性、隔离性、持久性。")]),n._v(" "),s("ul",[s("li",[n._v("原子性：原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚。例如转账，A 账户转给 B 账户，包含两个操作，将 A 账户的钱减去，然后将 B 账户加上对应的钱数，不可能 A 账户减了 B 账户没加上，也不可能 A 账户没减就给 B 账户加上了。两个操作要么都成功，要么都失败。")]),n._v(" "),s("li",[n._v("一致性：一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。假设账户 A 和账户 B 两者的钱加起来一共是 5000，那么不管 A 和 B 之间如何转账、转几次账，事务结束后两个用户的钱相加起来应该还得是 5000，这就是事务的一致性。这个就涉及隔离级别的问题了。")]),n._v(" "),s("li",[n._v("隔离性：隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。")]),n._v(" "),s("li",[n._v("持久性：持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。\n本例中使用 t_user 表的两个用户来模拟转账操作。目前李四账户有 888.88 元、张三账户有 666.66 元，让用户李四给用户张三转账 111.11 元，使两个账户都有 777.77 元。")])]),n._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/d454eb852f4ec5dc154ddb078e33a88b.png",alt:"image-20201126224722717"}})]),n._v(" "),s("p",[n._v("事务有两个结果：一是成功，二是回滚。在事务中，任何一个操作发生异常都会回滚。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('package spring.tutorial.chapter5.jdbc;\n\nimport java.sql.*;\n\npublic class TransactionDemo {\n  public static void main(String[] args) throws SQLException {\n\n    Connection conn = null;\n\n    ResultSet rs = null;\n    PreparedStatement prestmt = null;\n    try {\n      // 注册驱动\n      DriverManager.registerDriver(new com.mysql.jdbc.Driver());\n      // 通过注册的驱动获得连接对象Connection\n      conn =\n          DriverManager.getConnection(\n              "jdbc:mysql://127.0.0.1:3306/daodemodb?useUnicode=true&characterEncoding=UTF-8"\n                  + "&serverTimezone=UTC&useSSL=false",\n              "root",\n              "123456");\n      // 手动开启事务\n      conn.setAutoCommit(false);\n      String sql = "update  t_user set money=money-? where id=?";\n      prestmt = conn.prepareStatement(sql);\n\n      prestmt.setDouble(1, -111.11);\n      prestmt.setInt(2, 2);\n      prestmt.addBatch();\n\n      prestmt.setDouble(1, 111.11);\n      prestmt.setInt(2, 1);\n      prestmt.addBatch();\n\n      // 批处理\n      prestmt.executeBatch();\n\n      // 提交事务\n      conn.commit();\n\n    } catch (SQLException e) {\n      // 事务回滚\n      conn.rollback();\n      System.out.println(e.getMessage());\n      e.printStackTrace();\n    } finally {\n      // 释放资源\n      if (conn != null) {\n        conn.close();\n      }\n      if (prestmt != null) {\n        prestmt.close();\n      }\n      if (rs != null) {\n        rs.close();\n      }\n    }\n  }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br")])]),s("p",[n._v("上面代码只是做测试并未做金额是否满足转账要求检查，先使用“conn.setAutoCommit(false);”将自动提交设置为手动提交，默认是自动，然后批量执行两个 SQL 语句，在“conn.commit();”提交事务之前如果没有出现错误，执行结果会保存到数据库，一旦出现异常，就会执行“conn.rollback();”回滚操作。执行上面代码转账成功的输出结果如下：")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/a11e21ba76b40c150bbc6d2969f2acdc.png",alt:"image-20201126225013604"}})]),n._v(" "),s("p",[n._v("上面是提交成功的例子。为了演示事务回滚，可以在提交事务“conn.rollback();”之前制造一个异常“inta=1/0;”，然后执行，发现数据库的值并不会改变，并抛出了异常。")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/663b5e3d3d621826c179a63fc44d4f85.png",alt:"image-20201126225058274"}})]),n._v(" "),s("h2",{attrs:{id:"_5-2-spring-dao-模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-spring-dao-模块"}},[n._v("#")]),n._v(" 5.2 Spring DAO 模块")]),n._v(" "),s("p",[n._v("Spring 的 DAO 模块提供了对 JDBC、Hibernate、MyBatis 等 DAO 层支持，本节介绍 DAO 模块对 JDBC 的支持。DAO 模块依赖 commons-dbcp.jar、commons-pool.jar。")]),n._v(" "),s("h3",{attrs:{id:"_5-2-1-jdbcdaosupport-的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-1-jdbcdaosupport-的使用"}},[n._v("#")]),n._v(" 5.2.1 JdbcDaoSupport 的使用")]),n._v(" "),s("p",[n._v("传统的 JDBC 需要创建连接、打开、执行 SQL、关闭连接这一系列步骤。Spring 框架对 JDBC 进行了封装，我们只需使用封装好的 JdbcTemplate 执行 SQL 语句。既然是 JdbcDaoSupport 的使用，为什么是使用 JdbcTemplate 呢？因为 JdbcDaoSupport 提供了 JdbcTemplate 对象，通过 JdbcTemplate 对象进行数据库操作。可以转到定义，查看 JdbcDaoSupport、JdbcTemplate 两个类的具体实现。我们通过下面的例子来了解 JdbcDaoSupport 的使用，这里还是使用 JDBC 章节的数据库 daodemodb 和表 t_user 信息。")]),n._v(" "),s("p",[n._v("第一步，根据 t_user 表信息准备 Model 类 User，定义 id、name、age、money 属性，并声明两个构造函数。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('package spring.tutorial.chapter5.SpringDao.model;\n\npublic class User {\n  private int Id;\n  private String Name;\n  private int Age;\n  private double Money;\n  public User() {}\n\n  public User(String name, int age, double money) {\n\n    Name = name;\n    Age = age;\n    Money = money;\n  }\n\n  @Override\n  public String toString() {\n\n    return "Id:"\n        + this.getId()\n        + " Name:"\n        + this.getName()\n        + " Age:"\n        + this.getAge()\n        + " Money:"\n        + this.getMoney();\n  }\n\n //getter setter\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br")])]),s("p",[n._v("第二步，定义接口类 IUserDAO，在接口中声明两个方法：QueryAllUser 方法属于查询操作，查询所有 User；AddUser 属于更新操作，新增 User。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public interface IUserDAO {\n  public List<User> QueryAllUser();\n\n  public Boolean AddUser(User user);\n\n  public Boolean transfer(int fromUserId, int toUserId, float transferMoney);\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("p",[n._v("第三步，就是 JdbcDaoSupport 的使用了。在下面的 SpringDAODemo 类中首先继承 JdbcDaoSupport，同时实现 IUserDAO 接口中的方法。JdbcDaoSupport 提供了 JdbcTemplate 对象，SpringDAODemo 继承了 JdbcDaoSupport，所以也就可以直接获取到 JdbcTemplate 对象，然后执行该对象的方法进行数据库操作。")])])}),[],!1,null,null,null);s.default=t.exports}}]);