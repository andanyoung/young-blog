(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{385:function(a,s,t){a.exports=t.p+"assets/img/image-20230608222632302.fb87a7d7.png"},386:function(a,s,t){a.exports=t.p+"assets/img/image-20230614000658557.c9222082.png"},387:function(a,s,t){a.exports=t.p+"assets/img/image-20230614203932273.f5718a8f.png"},388:function(a,s,t){a.exports=t.p+"assets/img/image-20230614205242036.13e8fd91.png"},389:function(a,s,t){a.exports=t.p+"assets/img/image-20230614212624794.d7051f89.png"},390:function(a,s,t){a.exports=t.p+"assets/img/image-20230614212747456.d97ea604.png"},391:function(a,s,t){a.exports=t.p+"assets/img/image-20230614224847034.989babb6.png"},392:function(a,s,t){a.exports=t.p+"assets/img/image-20230614225641606.cb3d8ec2.png"},393:function(a,s,t){a.exports=t.p+"assets/img/image-20230614230134735.d5012940.png"},394:function(a,s,t){a.exports=t.p+"assets/img/image-20230614230202750.8793b2ed.png"},395:function(a,s,t){a.exports=t.p+"assets/img/image-20230614232316005.d760f77c.png"},396:function(a,s,t){a.exports=t.p+"assets/img/image-20230614232752640.2c729faf.png"},397:function(a,s,t){a.exports=t.p+"assets/img/image-20230614232903693.9ada8df0.png"},398:function(a,s,t){a.exports=t.p+"assets/img/image-20230614233420614.59f2b0a6.png"},544:function(a,s,t){"use strict";t.r(s);var e=t(4),n=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"_1-mapreduce-概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-mapreduce-概述"}},[a._v("#")]),a._v(" 1. MapReduce 概述")]),a._v(" "),s("h2",{attrs:{id:"_1-1-mapreduce-定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-mapreduce-定义"}},[a._v("#")]),a._v(" 1.1 MapReduce 定义")]),a._v(" "),s("p",[a._v("MapReduce 是一个"),s("strong",[a._v("分布式运算程序")]),a._v("的编程框架，是用户开发“基于 Hadoop 的数据分析应用”的核心框架。")]),a._v(" "),s("p",[a._v("MapReduce 核心功能是将用户编写的业务逻辑代码和自带默认组件整合成一个完整的分布式运算程序，并发运行在一个 Hadoop 集群上。")]),a._v(" "),s("h2",{attrs:{id:"_1-2-mapreduce-优缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-mapreduce-优缺点"}},[a._v("#")]),a._v(" 1.2 MapReduce 优缺点")]),a._v(" "),s("h3",{attrs:{id:"_1-2-1-优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-优点"}},[a._v("#")]),a._v(" 1.2.1 优点")]),a._v(" "),s("p",[a._v("1）MapReduce 易于编程")]),a._v(" "),s("p",[s("strong",[a._v("它简单的实现一些接口，就可以完成一个分布式程序")]),a._v("，这个分布式程序可以分布到大量 廉价的 PC 机器上运行。也就是说你写一个分布式程序，跟写一个简单的串行程序是一模一样的。就是因为这个特点使得 MapReduce 编程变得非常流行。")]),a._v(" "),s("p",[a._v("2）良好的扩展性")]),a._v(" "),s("p",[a._v("当你的计算资源不能得到满足的时候，你可以通过"),s("strong",[a._v("简单的增加机器")]),a._v("来扩展它的计算能力。")]),a._v(" "),s("p",[a._v("3）高容错性")]),a._v(" "),s("p",[a._v("MapReduce 设计的初衷就是使程序能够部署在廉价的 PC 机器上，这就要求它具有很高 的容错性。比如**其中一台机器挂了，它可以把上面的计算任务转移到另外一个节点上运行， 不至于这个任务运行失败，**而且这个过程不需要人工参与，而完全是由 Hadoop 内部完成的。")]),a._v(" "),s("p",[a._v("4）适合 PB 级以上海量数据的离线处理")]),a._v(" "),s("p",[a._v("可以实现上千台服务器集群并发工作，提供数据处理能力。")]),a._v(" "),s("h3",{attrs:{id:"_1-2-2-缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-缺点"}},[a._v("#")]),a._v(" 1.2.2 缺点")]),a._v(" "),s("p",[a._v("1）不擅长实时计算")]),a._v(" "),s("p",[a._v("MapReduce 无法像 MySQL 一样，在毫秒或者秒级内返回结果。")]),a._v(" "),s("p",[a._v("2）不擅长流式计算")]),a._v(" "),s("p",[a._v("流式计算的输入数据是动态的，而 MapReduce 的"),s("strong",[a._v("输入数据集是静态")]),a._v("的，不能动态变化。 这是因为 MapReduce 自身的设计特点决定了数据源必须是静态的。")]),a._v(" "),s("p",[a._v("3）不擅长 DAG（有向无环图）计算")]),a._v(" "),s("p",[a._v("多个应用程序存在依赖关系，后一个应用程序的输入为前一个的输出。在这种情况下， MapReduce 并不是不能做，而是使用后，每个 MapReduce 作业的输出结果都会写入到磁盘， 会造成大量的磁盘 IO，导致性能非常的低下。")]),a._v(" "),s("h2",{attrs:{id:"_1-3-mapreduce-核心思想"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-mapreduce-核心思想"}},[a._v("#")]),a._v(" 1.3 MapReduce 核心思想")]),a._v(" "),s("p",[s("img",{attrs:{src:t(385),alt:"image-20230608222632302"}})]),a._v(" "),s("p",[a._v("（1）分布式的运算程序往往需要分成至少 2 个阶段。")]),a._v(" "),s("p",[a._v("（2）第一个阶段的 MapTask 并发实例，完全并行运行，互不相干。 （3）第二个阶段的 ReduceTask 并发实例互不相干，但是他们的数据依赖于上一个阶段的所有 MapTask 并发实例的输出。")]),a._v(" "),s("p",[a._v("（4）MapReduce 编程模型只能包含一个 Map 阶段和一个 Reduce 阶段，如果用户的业 务逻辑非常复杂，那就只能多个 MapReduce 程序，串行运行。")]),a._v(" "),s("p",[a._v("总结：分析 WordCount   数据流走向深入理解 MapReduce 核心思想。")]),a._v(" "),s("h2",{attrs:{id:"_1-4-mapreduce-进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-mapreduce-进程"}},[a._v("#")]),a._v(" 1.4 MapReduce 进程")]),a._v(" "),s("p",[a._v("一个完整的 MapReduce 程序在分布式运行时有三类实例进程：")]),a._v(" "),s("p",[a._v("（1）MrAppMaster：负责整个程序的过程调度及状态协调。")]),a._v(" "),s("p",[a._v("（2）MapTask：负责 Map 阶段的整个数据处理流程。")]),a._v(" "),s("p",[a._v("（3）ReduceTask：负责 Reduce 阶段的整个数据处理流程。")]),a._v(" "),s("h2",{attrs:{id:"_1-5-官方-wordcount-源码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-官方-wordcount-源码"}},[a._v("#")]),a._v(" 1.5 官方 WordCount 源码")]),a._v(" "),s("p",[a._v("采用反编译工具反编译源码，发现 WordCount 案例有 Map 类、Reduce 类和驱动类。且 数据的类型是 Hadoop 自身封装的序列化类型。")]),a._v(" "),s("h2",{attrs:{id:"_1-6-常用数据序列化类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-常用数据序列化类型"}},[a._v("#")]),a._v(" 1.6 常用数据序列化类型")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("Java基本类型")]),a._v(" "),s("th",[a._v("Hadoop Writable类型")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("boolean")]),a._v(" "),s("td",[a._v("BooleanWritable")])]),a._v(" "),s("tr",[s("td",[a._v("byte")]),a._v(" "),s("td",[a._v("ByteWritable")])]),a._v(" "),s("tr",[s("td",[a._v("int")]),a._v(" "),s("td",[a._v("IntWritable")])]),a._v(" "),s("tr",[s("td",[a._v("float")]),a._v(" "),s("td",[a._v("FloatWritable")])]),a._v(" "),s("tr",[s("td",[a._v("long")]),a._v(" "),s("td",[a._v("LongWritable")])]),a._v(" "),s("tr",[s("td",[a._v("double")]),a._v(" "),s("td",[a._v("DoubleWritable")])]),a._v(" "),s("tr",[s("td",[a._v("String")]),a._v(" "),s("td",[a._v("Text")])]),a._v(" "),s("tr",[s("td",[a._v("map")]),a._v(" "),s("td",[a._v("MapWritable")])]),a._v(" "),s("tr",[s("td",[a._v("array")]),a._v(" "),s("td",[a._v("ArrayWritable")])])])]),a._v(" "),s("h2",{attrs:{id:"_1-7-mapreduce-编程规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-mapreduce-编程规范"}},[a._v("#")]),a._v(" 1.7 MapReduce 编程规范")]),a._v(" "),s("p",[a._v("用户编写的程序分成三个部分：Mapper、Reducer 和 Driver。")]),a._v(" "),s("p",[a._v("1．Mapper阶段")]),a._v(" "),s("p",[a._v("（1）用户自定义的Mapper要继承自己的父类")]),a._v(" "),s("p",[a._v("（2）Mapper的输入数据是KV对的形式（KV的类型可自定义）")]),a._v(" "),s("p",[a._v("（3）Mapper中的业务逻辑写在map()方法中")]),a._v(" "),s("p",[a._v("（4）Mapper的输出数据是KV对的形式（KV的类型可自定义）")]),a._v(" "),s("p",[a._v("（5）"),s("strong",[a._v("map()方法（MapTask进程）对每一个调用一次")])]),a._v(" "),s("p",[a._v("2．Reducer阶段")]),a._v(" "),s("p",[a._v("（1）用户自定义的Reducer要继承自己的父类")]),a._v(" "),s("p",[a._v("（2）Reducer的输入数据类型对应Mapper的输出数据类型，也是KV （3）Reducer的业务逻辑写在reduce()方法中")]),a._v(" "),s("p",[a._v("（4）"),s("strong",[a._v("ReduceTask进程对每一组相同k的组调用一次reduce()方法")])]),a._v(" "),s("p",[a._v("3．Driver阶段")]),a._v(" "),s("p",[a._v("相当于YARN集群的客户端，用于提交我们整个程序到YARN集群，提交的是封装了MapReduce程序相关运行参数的job对象")]),a._v(" "),s("h2",{attrs:{id:"_1-8-wordcount-案例实操"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-wordcount-案例实操"}},[a._v("#")]),a._v(" 1.8 WordCount 案例实操")]),a._v(" "),s("h3",{attrs:{id:"_1-8-1-本地测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-1-本地测试"}},[a._v("#")]),a._v(" 1.8.1 本地测试")]),a._v(" "),s("p",[a._v("1）需求")]),a._v(" "),s("p",[a._v("在给定的文本文件中统计输出每一个单词出现的总次数")]),a._v(" "),s("p",[a._v("2）需求分析")]),a._v(" "),s("p",[a._v("按照 MapReduce 编程规范，分别编写 Mapper，Reducer，Driver。")]),a._v(" "),s("p",[a._v("3）环境准备")]),a._v(" "),s("p",[a._v("（1）创建 maven 工程，MapReduceDemo")]),a._v(" "),s("p",[a._v("（2）在 pom.xml 文件中添加如下依赖")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("  <dependencies>\n        <dependency>\n            <groupId>org.apache.hadoop</groupId>\n            <artifactId>hadoop-client</artifactId>\n            <version>3.1.3</version>\n        </dependency>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.12</version>\n        </dependency>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-log4j12</artifactId>\n            <version>1.7.30</version>\n        </dependency>\n    </dependencies>\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br")])]),s("p",[a._v("（2）在项目的 src/main/resources 目录下，新建一个文件，命名为“log4j.properties”，在 文件中填入。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("log4j.rootLogger=INFO, stdout \nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender \nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout \nlog4j.appender.stdout.layout.ConversionPattern=%d %p [%c] - %m%n \nlog4j.appender.logfile=org.apache.log4j.FileAppender \nlog4j.appender.logfile.File=target/spring.log \nlog4j.appender.logfile.layout=org.apache.log4j.PatternLayout \nlog4j.appender.logfile.layout.ConversionPattern=%d %p [%c] - %m%n\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br")])]),s("p",[a._v("4）编写程序")]),a._v(" "),s("p",[a._v("（1）编写 Mapper 类")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('import org.apache.hadoop.io.IntWritable;\nimport org.apache.hadoop.io.LongWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapreduce.Mapper;\n\nimport java.io.IOException;\n/**\n * KEYIN, map阶段输入的key的类型：LongWritable\n * VALUEIN,map阶段输入value类型：Text\n * KEYOUT,map阶段输出的Key类型：Text\n * VALUEOUT,map阶段输出的value类型：IntWritable\n */\npublic class WordCountMapper extends Mapper<LongWritable, Text, Text, IntWritable> {\n    private Text outK = new Text();\n    private IntWritable outV = new IntWritable(1);\n\n    @Override\n    protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {\n\n        // 1 获取一行\n        // atguigu atguigu\n        String line = value.toString();\n\n        // 2 切割\n        // atguigu\n        // atguigu\n        String[] words = line.split(" ");\n\n        // 3 循环写出\n        for (String word : words) {\n            // 封装outk\n            outK.set(word);\n\n            // 写出\n            context.write(outK, outV);\n        }\n    }\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br"),s("span",{staticClass:"line-number"},[a._v("35")]),s("br"),s("span",{staticClass:"line-number"},[a._v("36")]),s("br"),s("span",{staticClass:"line-number"},[a._v("37")]),s("br"),s("span",{staticClass:"line-number"},[a._v("38")]),s("br")])]),s("p",[a._v("（2）编写 Reducer 类")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("import org.apache.hadoop.io.IntWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapreduce.Reducer;\n\nimport java.io.IOException;\n/**\n * KEYIN, reduce阶段输入的key的类型：Text\n * VALUEIN,reduce阶段输入value类型：IntWritable\n * KEYOUT,reduce阶段输出的Key类型：Text\n * VALUEOUT,reduce阶段输出的value类型：IntWritable\n */\npublic class WordCountReducer extends Reducer<Text, IntWritable, Text, IntWritable> {\n    private IntWritable outV = new IntWritable();\n\n    @Override\n    protected void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {\n\n        int sum = 0;\n        // atguigu, (1,1)\n        // 累加\n        for (IntWritable value : values) {\n            sum += value.get();\n        }\n\n        outV.set(sum);\n\n        // 写出\n        context.write(key, outV);\n    }\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br")])]),s("p",[a._v("（3）编写 Driver 驱动类")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('import org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.io.IntWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapreduce.Job;\nimport org.apache.hadoop.mapreduce.lib.input.FileInputFormat;\nimport org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;\n\nimport java.io.IOException;\n\n/**\n * @author andanyoung\n * @version 1.0\n * @date 2023/6/8 22:55\n */\n\npublic class WordCountDriver {\n\n    public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {\n\n        // 1 获取job\n        Configuration conf = new Configuration();\n        //conf.set("fs.defaultFS", "hdfs://node1:8020");\n        Job job = Job.getInstance(conf);\n\n        // 2 设置jar包路径\n        job.setJarByClass(WordCountDriver.class);\n\n        // 3 关联mapper和reducer\n        job.setMapperClass(WordCountMapper.class);\n        job.setReducerClass(WordCountReducer.class);\n\n        // 4 设置map输出的kv类型\n        job.setMapOutputKeyClass(Text.class);\n        job.setMapOutputValueClass(IntWritable.class);\n\n        // 5 设置最终输出的kV类型\n        job.setOutputKeyClass(Text.class);\n        job.setOutputValueClass(IntWritable.class);\n\n        // 6 设置输入路径和输出路径\n        FileInputFormat.setInputPaths(job, new Path("F:\\\\hadoop-test\\\\wc.txt"));\n        FileOutputFormat.setOutputPath(job, new Path("F:\\\\hadoop-out11"));\n\n        // 7 提交job\n        boolean result = job.waitForCompletion(true);\n\n        System.exit(result ? 0 : 1);\n    }\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br"),s("span",{staticClass:"line-number"},[a._v("35")]),s("br"),s("span",{staticClass:"line-number"},[a._v("36")]),s("br"),s("span",{staticClass:"line-number"},[a._v("37")]),s("br"),s("span",{staticClass:"line-number"},[a._v("38")]),s("br"),s("span",{staticClass:"line-number"},[a._v("39")]),s("br"),s("span",{staticClass:"line-number"},[a._v("40")]),s("br"),s("span",{staticClass:"line-number"},[a._v("41")]),s("br"),s("span",{staticClass:"line-number"},[a._v("42")]),s("br"),s("span",{staticClass:"line-number"},[a._v("43")]),s("br"),s("span",{staticClass:"line-number"},[a._v("44")]),s("br"),s("span",{staticClass:"line-number"},[a._v("45")]),s("br"),s("span",{staticClass:"line-number"},[a._v("46")]),s("br"),s("span",{staticClass:"line-number"},[a._v("47")]),s("br"),s("span",{staticClass:"line-number"},[a._v("48")]),s("br"),s("span",{staticClass:"line-number"},[a._v("49")]),s("br"),s("span",{staticClass:"line-number"},[a._v("50")]),s("br")])]),s("p",[a._v("5）本地测试")]),a._v(" "),s("p",[a._v("（1）需要首先配置好 HADOOP_HOME 变量以及 Windows 运行依赖")]),a._v(" "),s("p",[a._v("（2）在 IDEA/Eclipse 上运行程序")]),a._v(" "),s("h3",{attrs:{id:"_1-8-2-提交到集群测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-2-提交到集群测试"}},[a._v("#")]),a._v(" 1.8.2 提交到集群测试")]),a._v(" "),s("p",[a._v("集群上测试")]),a._v(" "),s("p",[a._v("（1）用 maven 打 jar 包，需要添加的打包插件依赖")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("<build>\n        <plugins>\n            <plugin>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.6.1</version>\n                <configuration>\n                    <source>1.8</source>\n                    <target>1.8</target>\n                </configuration>\n            </plugin>\n            <plugin>\n                <artifactId>maven-assembly-plugin</artifactId>\n                <configuration>\n                    <descriptorRefs>\n                        <descriptorRef>jar-with-dependencies</descriptorRef>\n                    </descriptorRefs>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>make-assembly</id>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>single</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br")])]),s("p",[a._v("（2）将程序打成 jar 包")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("mvn clean package\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("（3）修改不带依赖的 jar 包名称为 wc.jar，并拷贝该 jar 包到 Hadoop 集群的 /opt/module/hadoop-3.1.3 路径")]),a._v(" "),s("p",[a._v("（4）启动 Hadoop 集群")]),a._v(" "),s("p",[a._v("（5）执行 WordCount 程序")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v(" hadoop jar wc.jar\ncom.atguigu.mapreduce.wordcount.WordCountDriver /user/atguigu/input \n/user/atguigu/output\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("h1",{attrs:{id:"_2-hadoop-序列化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-hadoop-序列化"}},[a._v("#")]),a._v(" 2. Hadoop 序列化")]),a._v(" "),s("h2",{attrs:{id:"_2-1-序列化概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-序列化概述"}},[a._v("#")]),a._v(" 2.1 序列化概述")]),a._v(" "),s("p",[a._v("1）什么是序列化")]),a._v(" "),s("p",[s("strong",[a._v("序列化")]),a._v("就是把"),s("strong",[a._v("内存中的对象，转换成字节序列")]),a._v("（或其他数据传输协议）以便于存储到磁盘（持久化）和网络传输。")]),a._v(" "),s("p",[s("strong",[a._v("反序列化")]),a._v("就是将收到字节序列（或其他数据传输协议）或者是磁盘的持久化数据，转换成内存中的对象。")]),a._v(" "),s("p",[a._v("2）为什么要序列化")]),a._v(" "),s("p",[a._v("一般来说，“活的”对象只生存在内存里，关机断电就没有了。而且“活的”对象只能 由本地的进程使用，不能被发送到网络上的另外一台计算机。 然而序列化可以存储“活的” 对象，可以将“活的”对象发送到远程计算机。")]),a._v(" "),s("p",[s("strong",[a._v("3）为什么不用 Java 的序列化")])]),a._v(" "),s("p",[a._v("Java 的序列化是一个重量级序列化框架（Serializable），一个对象被序列化后，会附带很多额外的信息（各种校验信息，Header，继承体系等），不便于在网络中高效传输。所以， Hadoop 自己开发了一套序列化机制（Writable）。")]),a._v(" "),s("p",[a._v("4）Hadoop 序列化特点：")]),a._v(" "),s("ul",[s("li",[a._v("（1）紧凑 ：高效使用存储空间。")]),a._v(" "),s("li",[a._v("（2）快速：读写数据的额外开销小。")]),a._v(" "),s("li",[a._v("（3）互操作：支持多语言的交互")])]),a._v(" "),s("p",[a._v("Java基本类型与Hadoop常用序列化类型")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("Java基本类型")]),a._v(" "),s("th",[a._v("Hadoop Writable类型")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("boolean")]),a._v(" "),s("td",[a._v("BooleanWritable")])]),a._v(" "),s("tr",[s("td",[a._v("byte")]),a._v(" "),s("td",[a._v("ByteWritable")])]),a._v(" "),s("tr",[s("td",[a._v("int")]),a._v(" "),s("td",[a._v("IntWritable")])]),a._v(" "),s("tr",[s("td",[a._v("float")]),a._v(" "),s("td",[a._v("FloatWritable")])]),a._v(" "),s("tr",[s("td",[a._v("long")]),a._v(" "),s("td",[a._v("LongWritable")])]),a._v(" "),s("tr",[s("td",[a._v("double")]),a._v(" "),s("td",[a._v("DoubleWritable")])]),a._v(" "),s("tr",[s("td",[a._v("String")]),a._v(" "),s("td",[a._v("Text")])]),a._v(" "),s("tr",[s("td",[a._v("map")]),a._v(" "),s("td",[a._v("MapWritable")])]),a._v(" "),s("tr",[s("td",[a._v("array")]),a._v(" "),s("td",[a._v("ArrayWritable")])])])]),a._v(" "),s("h2",{attrs:{id:"_2-2-自定义-bean-对象实现序列化接口-writable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-自定义-bean-对象实现序列化接口-writable"}},[a._v("#")]),a._v(" 2.2 自定义 bean 对象实现序列化接口（Writable）")]),a._v(" "),s("p",[a._v("在企业开发中往往常用的基本序列化类型不能满足所有需求，比如在 Hadoop 框架内部 传递一个 bean 对象，那么该对象就需要实现序列化接口。")]),a._v(" "),s("p",[a._v("具体实现 bean 对象序列化步骤如下 7 步。")]),a._v(" "),s("p",[a._v("（1）必须实现 "),s("code",[a._v("Writable")]),a._v(" 接口")]),a._v(" "),s("p",[a._v("（2）反序列化时，需要反射调用空参构造函数，所以必须有空参构造")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public FlowBean() {\n\tsuper();\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("p",[a._v("（3）重写序列化方法")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("@Override\npublic void write(DataOutput out) throws IOException {\n\tout.writeLong(upFlow);\n    out.writeLong(downFlow);\n    out.writeLong(sumFlow);\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("p",[a._v("（4）重写反序列化方法")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("@Override\npublic void readFields(DataInput in) throws IOException {\n    upFlow = in.readLong();\n    downFlow = in.readLong();\n    sumFlow = in.readLong();\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("p",[a._v("（5）"),s("strong",[a._v("注意反序列化的顺序和序列化的顺序完全一致")])]),a._v(" "),s("p",[a._v('（6）要想把结果显示在文件中，需要重写 toString()，可用"\\t"分开，方便后续用。')]),a._v(" "),s("p",[a._v("（7）如果需要将自定义的 bean 放在 key 中传输，则还需要实现 Comparable 接口，因为 MapReduce 框中的 Shuffle 过程要求对 key 必须能排序。详见后面排序案例。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("@Override\npublic int compareTo(FlowBean o) {\n    // 倒序排列，从大到小\n    return this.sumFlow > o.getSumFlow() ? -1 : 1;\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("h1",{attrs:{id:"_3-mapreduce-框架原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-mapreduce-框架原理"}},[a._v("#")]),a._v(" 3. MapReduce 框架原理")]),a._v(" "),s("p",[s("img",{attrs:{src:t(386),alt:"image-20230614000658557"}})]),a._v(" "),s("h2",{attrs:{id:"_3-1-inputformat-数据输入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-inputformat-数据输入"}},[a._v("#")]),a._v(" 3.1 InputFormat 数据输入")]),a._v(" "),s("h3",{attrs:{id:"_3-1-1-切片与-maptask-并行度决定机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-切片与-maptask-并行度决定机制"}},[a._v("#")]),a._v(" 3.1.1 切片与 MapTask 并行度决定机制")]),a._v(" "),s("p",[a._v("1）问题引出")]),a._v(" "),s("p",[a._v("MapTask 的并行度决定 Map 阶段的任务处理并发度，进而影响到整个 Job 的处理速度。")]),a._v(" "),s("p",[a._v("思考：1G 的数据，启动 8 个 MapTask，可以提高集群的并发处理能力。那么 1K 的数据，也启动 8 个 MapTask，会提高集群性能吗？MapTask 并行任务是否越多越好呢？哪些因素影响了 MapTask 并行度？")]),a._v(" "),s("p",[a._v("2）MapTask 并行度决定机制")]),a._v(" "),s("p",[a._v("**数据块：**Block 是 HDFS 物理上把数据分成一块一块。数据块是 HDFS 存储数据单位。")]),a._v(" "),s("p",[a._v("**数据切片：**数据切片只是在逻辑上对输入进行分片，并不会在磁盘上将其切分成片进行存储。数据切片是 MapReduce 程序计算输入数据的单位，一个切片会对应启动一个 MapTask。")]),a._v(" "),s("h3",{attrs:{id:"_3-1-2-job-提交流程源码和切片源码详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-job-提交流程源码和切片源码详解"}},[a._v("#")]),a._v(" "),s("img",{attrs:{src:t(387),alt:"image-20230614203932273"}}),a._v("3.1.2 Job 提交流程源码和切片源码详解")]),a._v(" "),s("p",[a._v("1）Job 提交流程源码详解")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("waitForCompletion()\n\nsubmit();\n\n// 1建立连接\n\tconnect();\t\n\t\t// 1）创建提交Job的代理\n\t\tnew Cluster(getConfiguration());\n\t\t\t// （1）判断是本地运行环境还是yarn集群运行环境\n\t\t\tinitialize(jobTrackAddr, conf); \n\n// 2 提交job\nsubmitter.submitJobInternal(Job.this, cluster)\n\n\t// 1）创建给集群提交数据的Stag路径\n\tPath jobStagingArea = JobSubmissionFiles.getStagingDir(cluster, conf);\n\n\t// 2）获取jobid ，并创建Job路径\n\tJobID jobId = submitClient.getNewJobID();\n\n\t// 3）拷贝jar包到集群\ncopyAndConfigureFiles(job, submitJobDir);\t\n\trUploader.uploadFiles(job, jobSubmitDir);\n\n\t// 4）计算切片，生成切片规划文件\nwriteSplits(job, submitJobDir);\n\t\tmaps = writeNewSplits(job, jobSubmitDir);\n\t\tinput.getSplits(job);\n\n\t// 5）向Stag路径写XML配置文件\nwriteConf(conf, submitJobFile);\n\tconf.writeXml(out);\n\n\t// 6）提交Job,返回提交状态\nstatus = submitClient.submitJob(jobId, submitJobDir.toString(), job.getCredentials());\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br"),s("span",{staticClass:"line-number"},[a._v("35")]),s("br")])]),s("p",[s("img",{attrs:{src:t(388),alt:"image-20230614205242036"}})]),a._v(" "),s("p",[a._v("2）FileInputFormat 切片源码解析（input.getSplits(job)）")]),a._v(" "),s("p",[s("img",{attrs:{src:t(389),alt:"image-20230614212624794"}})]),a._v(" "),s("h3",{attrs:{id:"_3-1-3-fileinputformat-切片机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-3-fileinputformat-切片机制"}},[a._v("#")]),a._v(" 3.1.3 FileInputFormat 切片机制")]),a._v(" "),s("h4",{attrs:{id:"_1、切片机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、切片机制"}},[a._v("#")]),a._v(" 1、切片机制")]),a._v(" "),s("p",[a._v("（1）简单地按照文件的内容长度进行切片")]),a._v(" "),s("p",[a._v("（2）切片大小，默认等于Block大小")]),a._v(" "),s("p",[s("strong",[a._v("（3）切片时不考虑数据集整体，而是逐个针对每一个文件单独切片")])]),a._v(" "),s("h4",{attrs:{id:"_2、案例分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、案例分析"}},[a._v("#")]),a._v(" 2、案例分析")]),a._v(" "),s("p",[s("img",{attrs:{src:t(390),alt:"image-20230614212747456"}})]),a._v(" "),s("p",[a._v("（1）源码中计算切片大小的公式")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Math.max(minSize, Math.min(maxSize, blockSize));\nmapreduce.input.fileinputformat.split.minsize=1 默认值为1\nmapreduce.input.fileinputformat.split.maxsize= Long.MAXValue 默认值Long.MAXValu\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("p",[a._v("因此，"),s("strong",[a._v("默认情况下，切片大小=blocksize。")])]),a._v(" "),s("p",[a._v("（2）切片大小设置")]),a._v(" "),s("p",[a._v("maxsize（切片最大值）：参数如果调得比blockSize小，则会让切片变小，而且就等于配置的这个参数的值。 minsize（切片最小值）：参数调的比blockSize大，则可以让切片变得比blockSize还大。")]),a._v(" "),s("p",[a._v("（3）获取切片信息API")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("// 获取切片的文件名称\nString name = inputSplit.getPath().getName();\n// 根据文件类型获取切片信息\nFileSplit inputSplit = (FileSplit) context.getInputSplit();\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("h3",{attrs:{id:"_3-1-4-textinputformat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-4-textinputformat"}},[a._v("#")]),a._v(" 3.1.4 TextInputFormat")]),a._v(" "),s("h4",{attrs:{id:"_1-fileinputformat-实现类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-fileinputformat-实现类"}},[a._v("#")]),a._v(" 1）FileInputFormat 实现类")]),a._v(" "),s("p",[a._v("思考："),s("strong",[a._v("在运行 MapReduce 程序时，输入的文件格式包括：基于行的日志文件、二进制格式文件、数据库表等。")]),a._v(" 那么，针对不同的数据类型，MapReduce 是如何读取这些数据的呢？")]),a._v(" "),s("p",[a._v("FileInputFormat 常见的接口实现类包括：TextInputFormat、KeyValueTextInputFormat、NLineInputFormat、CombineTextInputFormat 和自定义 InputFormat 等")]),a._v(" "),s("h4",{attrs:{id:"_2-textinputformat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-textinputformat"}},[a._v("#")]),a._v(" 2）TextInputFormat")]),a._v(" "),s("p",[a._v("TextInputFormat 是"),s("strong",[a._v("默认的")]),a._v(" FileInputFormat 实现类。按行读取每条记录。**键是存储该行在整个文件中的起始字节偏移量， LongWritable 类型。值是这行的内容，**不包括任何行终止符（换行符和回车符），Text 类型。")]),a._v(" "),s("p",[a._v("以下是一个示例，比如，一个分片包含了如下 4 条文本记录。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Rich learning form\nIntelligent learning engine\nLearning more convenient\nFrom the real demand for more close to the enterprise\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("p",[a._v("每条记录表示为以下键/值对：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("(0,Rich learning form)\n(20,Intelligent learning engine)\n(49,Learning more convenient)\n(74,From the real demand for more close to the enterprise)\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("h3",{attrs:{id:"_3-1-5-combinetextinputformat-切片机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-5-combinetextinputformat-切片机制"}},[a._v("#")]),a._v(" 3.1.5 CombineTextInputFormat 切片机制")]),a._v(" "),s("p",[a._v("框架默认的 TextInputFormat 切片机制是对任务按文件规划切片，**不管文件多小，都会是一个单独的切片，**都会交给一个 MapTask，这样如果有大量小文件，就会产生大量的 "),s("strong",[a._v("MapTask")]),a._v("(一个MapTask 消耗一个CPU ，1G内存)，处理效率极其低下。")]),a._v(" "),s("p",[a._v("1）应用场景：")]),a._v(" "),s("p",[a._v("CombineTextInputFormat 用于小文件过多的场景，它可以将多个小文件从逻辑上规划到 一个切片中，这样，多个小文件就可以交给一个 MapTask 处理。")]),a._v(" "),s("p",[a._v("2）虚拟存储切片最大值设置")]),a._v(" "),s("p",[a._v("CombineTextInputFormat.setMaxInputSplitSize(job, 4194304);// 4m")]),a._v(" "),s("p",[a._v("注意：虚拟存储切片最大值设置最好根据实际的小文件大小情况来设置具体的值。")]),a._v(" "),s("p",[a._v("3）切片机制")]),a._v(" "),s("p",[a._v("生成切片过程包括：虚拟存储过程和切片过程二部分")]),a._v(" "),s("p",[a._v("setMaxInputSplitSize值为4M")]),a._v(" "),s("p",[s("img",{attrs:{src:t(391),alt:"image-20230614224847034"}})]),a._v(" "),s("h4",{attrs:{id:"_1-虚拟存储过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-虚拟存储过程"}},[a._v("#")]),a._v(" （1）虚拟存储过程：")]),a._v(" "),s("p",[a._v("将输入目录下所有文件大小，依次和设置的 setMaxInputSplitSize 值比较，如果不大于设置的最大值，逻辑上划分一个块。如果输入文件大于设置的最大值且大于两倍， 那么以最大值切割一块；"),s("strong",[a._v("当剩余数据大小超过设置的最大值且不大于最大值 2 倍，此时将文件均分成 2 个虚拟存储块（防止出现太小切片）。")])]),a._v(" "),s("p",[a._v("例如 setMaxInputSplitSize 值为 4M，输入文件大小为 8.02M，则先逻辑上分成一个 4M。剩余的大小为 4.02M，如果按照 4M 逻辑划分，就会出现 0.02M 的小的虚拟存储 文件，所以将剩余的 4.02M 文件切分成（2.01M 和 2.01M）两个文件。")]),a._v(" "),s("h4",{attrs:{id:"_2-切片过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-切片过程"}},[a._v("#")]),a._v(" （2）切片过程：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("（a）判断虚拟存储的文件大小是否大于 setMaxInputSplitSize 值，大于等于则单独形成一个切片。")])]),a._v(" "),s("li",[s("p",[a._v("（b）如果不大于则跟下一个虚拟存储文件进行合并，共同形成一个切片。")])]),a._v(" "),s("li",[s("p",[a._v("（c）测试举例：有 4 个小文件大小分别为 1.7M、5.1M、3.4M 以及 6.8M 这四个小 文件，则虚拟存储之后形成 6 个文件块，大小分别为：")]),a._v(" "),s("p",[a._v("1.7M，（2.55M、2.55M），3.4M 以及（3.4M、3.4M）")]),a._v(" "),s("p",[a._v("最终会形成 3 个切片，大小分别为： （1.7+2.55）M，（2.55+3.4）M，（3.4+3.4）M")])])]),a._v(" "),s("h3",{attrs:{id:"_3-1-6-combinetextinputformat-案例实操"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-6-combinetextinputformat-案例实操"}},[a._v("#")]),a._v(" 3.1.6 CombineTextInputFormat 案例实操")]),a._v(" "),s("p",[a._v("1）需求")]),a._v(" "),s("p",[a._v("将输入的大量小文件合并成一个切片统一处理。")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("（1）输入数据 准备 4 个小文件")]),a._v(" "),s("p",[s("img",{attrs:{src:t(392),alt:"image-20230614225641606"}})])]),a._v(" "),s("li",[s("p",[a._v("（2）期望")]),a._v(" "),s("p",[a._v("期望一个切片处理 4 个文件")])])]),a._v(" "),s("p",[a._v("2）实现过程")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("（1）不做任何处理，运行 1.8 节的 WordCount 案例程序，观察切片个数为 4。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("number of splits:4\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])])]),a._v(" "),s("li",[s("p",[a._v("（2）在 WordcountDriver 中增加如下代码，运行程序，并观察运行的切片个数为 3。")]),a._v(" "),s("p",[a._v("（a）驱动类中添加代码如下：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("// 如果不设置 InputFormat，它默认用的是 TextInputFormat.class\njob.setInputFormatClass(CombineTextInputFormat.class);\n//虚拟存储切片最大值设置 4m\nCombineTextInputFormat.setMaxInputSplitSize(job, 4194304);\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("p",[a._v("（b）运行如果为 3 个切片。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("number of splits:3\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])])]),a._v(" "),s("li",[s("p",[a._v("（3）在 WordcountDriver 中增加如下代码，运行程序，并观察运行的切片个数为 1。")]),a._v(" "),s("p",[a._v("（a）驱动中添加代码如下：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("// 如果不设置 InputFormat，它默认用的是 TextInputFormat.class\njob.setInputFormatClass(CombineTextInputFormat.class);\n//虚拟存储切片最大值设置 20m\nCombineTextInputFormat.setMaxInputSplitSize(job, 20971520);\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("p",[a._v("（b）运行如果为 1 个切片")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("number of splits:1\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h2",{attrs:{id:"_3-2-mapreduce-工作流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-mapreduce-工作流程"}},[a._v("#")]),a._v(" 3.2 MapReduce 工作流程")]),a._v(" "),s("p",[s("img",{attrs:{src:t(393),alt:"image-20230614230134735"}})])])]),a._v(" "),s("p",[s("img",{attrs:{src:t(394),alt:"image-20230614230202750"}})]),a._v(" "),s("p",[a._v("上面的流程是整个 MapReduce 最全工作流程，但是 Shuffle 过程只是从第 7 步开始到第 16 步结束，具体 Shuffle 过程详解，如下：")]),a._v(" "),s("ul",[s("li",[a._v("（1）MapTask 收集我们的 map()方法输出的 kv 对，放到内存缓冲区中")]),a._v(" "),s("li",[a._v("（2）从内存缓冲区不断溢出本地磁盘文件，可能会溢出多个文件")]),a._v(" "),s("li",[a._v("（3）多个溢出文件会被合并成大的溢出文件")]),a._v(" "),s("li",[a._v("（4）在溢出过程及合并的过程中，都要调用 Partitioner 进行分区和针对 key 进行排序")]),a._v(" "),s("li",[a._v("（5）ReduceTask 根据自己的分区号，去各个 MapTask 机器上取相应的结果分区数据")]),a._v(" "),s("li",[a._v("（6）ReduceTask 会抓取到同一个分区的来自不同 MapTask 的结果文件，ReduceTask 会将这些文件再进行合并（归并排序）")]),a._v(" "),s("li",[a._v("（7）合并成大文件后，Shuffle 的过程也就结束了，后面进入 ReduceTask 的逻辑运算过程（从文件中取出一个一个的键值对 Group，调用用户自定义的 reduce()方法）")])]),a._v(" "),s("p",[a._v("注意：")]),a._v(" "),s("p",[a._v("（1）Shuffle 中的缓冲区大小会影响到 MapReduce 程序的执行效率，原则上说，缓冲区越大，磁盘 io 的次数越少，执行速度就越快。")]),a._v(" "),s("p",[a._v("（2）缓冲区的大小可以通过参数调整，参数：mapreduce.task.io.sort.mb 默认 100M。")]),a._v(" "),s("h2",{attrs:{id:"_3-3-shuffle-机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-shuffle-机制"}},[a._v("#")]),a._v(" 3.3 Shuffle 机制")]),a._v(" "),s("h3",{attrs:{id:"_3-3-1-shuffle-机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-shuffle-机制"}},[a._v("#")]),a._v(" 3.3.1 Shuffle 机制")]),a._v(" "),s("p",[a._v("Map 方法之后，Reduce 方法之前的数据处理过程称之为 Shuffle。")]),a._v(" "),s("p",[s("img",{attrs:{src:t(395),alt:"image-20230614232316005"}})]),a._v(" "),s("h3",{attrs:{id:"_3-3-2-partition-分区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-partition-分区"}},[a._v("#")]),a._v(" 3.3.2 Partition 分区")]),a._v(" "),s("h4",{attrs:{id:"_1、问题引出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、问题引出"}},[a._v("#")]),a._v(" 1、问题引出")]),a._v(" "),s("p",[a._v("要求将统计结果按照条件输出到不同文件中（分区）。比如：将统计结果按照手机归属地不同省份输出到不同文件中（分区）")]),a._v(" "),s("h4",{attrs:{id:"_2、默认partitioner分区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、默认partitioner分区"}},[a._v("#")]),a._v(" 2、默认Partitioner分区")]),a._v(" "),s("p",[s("img",{attrs:{src:t(396),alt:"image-20230614232752640"}})]),a._v(" "),s("p",[a._v("默 认分区是根据key的hashCode对ReduceTasks个数取模得到的。用户没法控制哪个 key存储到哪个分区。")]),a._v(" "),s("h4",{attrs:{id:"_3、自定义partitioner步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、自定义partitioner步骤"}},[a._v("#")]),a._v(" 3、自定义Partitioner步骤")]),a._v(" "),s("p",[a._v("（1）自定义类继承Partitioner，重写getPartition()方法")]),a._v(" "),s("p",[s("img",{attrs:{src:t(397),alt:"image-20230614232903693"}}),a._v("（2)在Job驱动中，设置自定义Partitioner")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("job.setPartitionerClass(CustomPartitioner.class);\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("（3）自定义Partition后，要根据自定义Partitioner的逻辑设置相应数量的ReduceTask")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("job.setNumReduceTasks(5);\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h4",{attrs:{id:"_4、分区总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、分区总结"}},[a._v("#")]),a._v(" 4、分区总结")]),a._v(" "),s("p",[s("img",{attrs:{src:t(398),alt:"image-20230614233420614"}})]),a._v(" "),s("h4",{attrs:{id:"_5、案例分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、案例分析"}},[a._v("#")]),a._v(" 5、案例分析")]),a._v(" "),s("p",[a._v("例如：假设自定义分区数为5，则")]),a._v(" "),s("p",[a._v("（1）job.setNumReduceTasks(1);  会正常运行，只不过会产生一个输出文件")]),a._v(" "),s("p",[a._v("（2）job.setNumReduceTasks(2);  会报错")]),a._v(" "),s("p",[a._v("（3）job.setNumReduceTasks(6);  大于5，程序会正常运行，会产生空文件")]),a._v(" "),s("h3",{attrs:{id:"_3-3-3-partition-分区案例实操"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-3-partition-分区案例实操"}},[a._v("#")]),a._v(" 3.3.3 Partition 分区案例实操")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('package com.atguigu.mapreduce.partitioner;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapreduce.Partitioner;\npublic class ProvincePartitioner extends Partitioner<Text, FlowBean> {\n @Override\n public int getPartition(Text text, FlowBean flowBean, int numPartitions) \n{\n     //获取手机号前三位 prePhone\n     String phone = text.toString();\n     String prePhone = phone.substring(0, 3);\n     //定义一个分区号变量 partition,根据 prePhone 设置分区号\n     int partition;\n     if("136".equals(prePhone)){\n     \tpartition = 0;\n     }else if("137".equals(prePhone)){\n     \tpartition = 1;\n     }else if("138".equals(prePhone)){\n     \tpartition = 2;\n     }else if("139".equals(prePhone)){\n     \tpartition = 3;\n     }else {\n     \tpartition = 4;\n     }\n     //最后返回分区号 partition\n     return partition;\n \t}\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br")])]),s("p",[a._v("4）在驱动函数中增加自定义数据分区设置和 ReduceTask 设置")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("//8 指定自定义分区器\n job.setPartitionerClass(ProvincePartitioner.class);\n //9 同时指定相应数量的 ReduceTask\n job.setNumReduceTasks(5);\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])])])}),[],!1,null,null,null);s.default=n.exports}}]);