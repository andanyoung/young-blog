(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{632:function(s,n,a){"use strict";a.r(n);var e=a(4),t=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"_1-为什么不使用-jdk-spi"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-为什么不使用-jdk-spi"}},[s._v("#")]),s._v(" 1. 为什么不使用 JDK SPI")]),s._v(" "),n("p",[s._v("既然已经有了 JDK SPI 为什么还需要 Dubbo SPI 呢？")]),s._v(" "),n("p",[s._v("技术的出现通常都是为了解决现有问题，通过之前的 demo，不难发现 JDK SPI 机制就存在以下一些问题：")]),s._v(" "),n("ol",[n("li",[s._v("实现类会被全部遍历并且实例化，假如我们只需要使用其中的一个实现，这在实现类很多的情况下无疑是对机器资源巨大的浪费，")]),s._v(" "),n("li",[s._v("无法按需获取实现类，不够灵活，我们需要遍历一遍所有实现类才能找到指定实现。")])]),s._v(" "),n("p",[s._v("Dubbo SPI 以 JDK SPI 为参考做出了改进设计，进行了性能优化以及功能增强，Dubbo SPI 机制的出现解决了上述问题。除此之外，Dubbo 的 SPI 还支持自适应扩展以及 IOC 和 AOP 等高级特性。")]),s._v(" "),n("p",[s._v("JDK SPI 原理，请移步这篇文章："),n("a",{attrs:{href:"https://blog.csdn.net/agonie201218/article/details/124663738",target:"_blank",rel:"noopener noreferrer"}},[s._v("聊聊 Java SPI 机制"),n("OutboundLink")],1)]),s._v(" "),n("h1",{attrs:{id:"_2-dubbo-spi-配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-dubbo-spi-配置"}},[s._v("#")]),s._v(" 2.Dubbo SPI 配置")]),s._v(" "),n("p",[s._v("Dubbo SPI 的配置做出了改进，在 Dubbo 中有三种不同的目录可以存放 SPI 配置，用途也不同。")]),s._v(" "),n("ul",[n("li",[s._v("**META-INF/services/ **目录：此目录配置文件用于兼容 JDK SPI 。")]),s._v(" "),n("li",[n("strong",[s._v("META-INF/dubbo/")]),s._v(" 目录：此目录用于存放用户自定义 SPI 配置文件。")]),s._v(" "),n("li",[n("strong",[s._v("META-INF/dubbo/internal/")]),s._v(" 目录：此目录用于存放 Dubbo 内部使用的 SPI 配置文件。")])]),s._v(" "),n("p",[s._v("并且配置文件中可以配置成 Key-Value 形式，key 为扩展名，value 为具体实现类。有了扩展名就可以动态根据名字来定位到具体的实现类，并且可以针对性的实例化需要的实现类。比如指定 zookeeper，就知道要使用 zookeeper 作为注册中心的实现。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("zookeeper=org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("Dubbo 并未使用 Java SPI，而是重新实现了一套功能更强的 SPI 机制。Dubbo SPI 的相关逻辑被封装在了 ExtensionLoader 类中，通过 ExtensionLoader，我们可以加载指定的实现类。")]),s._v(" "),n("p",[s._v("除了对应目录的配置，还需要 "),n("strong",[s._v("@SPI")]),s._v(" 注解的配合，被修饰的接口表示这是一个扩展接口，"),n("code",[s._v("@SPI")]),s._v(" 的 value 表示这个扩展接口的默认扩展实现的扩展名，扩展名就是配置文件中对应实现类配置信息的 key。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('//dubbo=org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol\n@SPI("dubbo")\npublic interface Protocol {\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("除此之外，还需要 "),n("strong",[s._v("@Adaptive")]),s._v("注解配合，被他修饰的类会生成 Dubbo 的适配器，Adaptive 注解比较复杂，关于这个注解我们后续文章会再详细讲解。")]),s._v(" "),n("h1",{attrs:{id:"_3-extensionloader"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-extensionloader"}},[s._v("#")]),s._v(" 3. ExtensionLoader")]),s._v(" "),n("p",[s._v("我们这里以 dubbo 2.7 为例")]),s._v(" "),n("p",[s._v("之前的文章我们提到过，dubbo-common 模块中的 extension 包包含了 Dubbo SPI 的逻辑，而 ExtensionLoader 就位于其中，Dubbo SPI 的核心逻辑几乎都封装在 ExtensionLoader 这个类里，其地位你可以类比为 JDK SPI 中的 java.util.ServiceLoader。")]),s._v(" "),n("p",[s._v("学习 ExtensionLoader 首先了解以下几个关键属性。")]),s._v(" "),n("h2",{attrs:{id:"_3-1-核心静态变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-核心静态变量"}},[s._v("#")]),s._v(" 3.1 核心静态变量")]),s._v(" "),n("p",[s._v("1、EXTENSION_LOADERS")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 扩展接口和ExtensionLoader的关系\nprivate static final ConcurrentMap<Class<?>, ExtensionLoader<?>> EXTENSION_LOADERS = new ConcurrentHashMap<>(64);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("这个字段保存了扩展接口和 ExtensionLoader 之间的映射关系，一个扩展接口对应一个 ExtensionLoader。key 为接口，value 为 ExtensionLoader。")]),s._v(" "),n("p",[n("img",{attrs:{src:"http://md7.admin4j.com/blog/Dubboimage-20230411092506254.png",alt:"image-20230411092506254"}})]),s._v(" "),n("p",[s._v("2、EXTENSION_INSTANCES")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//扩展接口实现类和实例对象的关系\nprivate final ConcurrentMap<Class<?>, Object> extensionInstances = new ConcurrentHashMap<>(64);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("这个字段保存了扩展接口扩展实现类和实例对象之间的关系，key 为扩展实现类，value 为实例对象。")]),s._v(" "),n("p",[s._v("3、strategies 加载策略")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//加载策略\nprivate static volatile LoadingStrategy[] strategies = loadLoadingStrategies();\nimport static java.util.ServiceLoader.load;\nprivate static LoadingStrategy[] loadLoadingStrategies() {\n    return stream(load(LoadingStrategy.class).spliterator(), false)\n           .sorted().toArray(LoadingStrategy[]::new);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("strategies 对应的是 Dubbo 内部实现的三个加载策略，分别对应之前提到的三个不同的 SPI 配置目录，接口的继承关系如下。他们的实现中无非就是包含了两个信息：加载目录和优先级。")]),s._v(" "),n("p",[n("img",{attrs:{src:"http://md7.admin4j.com/blog/Dubboimage-20230411093438221.png",alt:"image-20230411093438221"}})]),s._v(" "),n("p",[s._v("每个实现类都继承了优先级接口"),n("code",[s._v("Prioritized")]),s._v("，所以不同加载策略的加载优先级不同，对应的优先级是：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("DubboInternalLoadingStrategy 大于>DubboLoadingStrategy 大于>ServicesLoadingStrateg\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("对应目录的"),n("strong",[s._v("优先级")]),s._v("分别是：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("META-INF/dubbo/internal/>META-INF/dubbo/>META-INF/services/\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"_3-2-loadingstrategy-是如何加载的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-loadingstrategy-是如何加载的"}},[s._v("#")]),s._v(" 3.2 "),n("strong",[s._v("LoadingStrategy 是如何加载的？")])]),s._v(" "),n("p",[s._v("需要注意的是，"),n("code",[s._v("LoadingStrategy")]),s._v("的控制了 Dubbo 内部实现的加载策略，那他自身又是如何加载的呢？")]),s._v(" "),n("p",[s._v("其实根据上面的代码就可以发现"),n("code",[s._v("LoadingStrategy")]),s._v("正是依赖 JDK SPI 机制来加载的，在"),n("code",[s._v("loadLoadingStrategies()")]),s._v("方法中调用了"),n("code",[s._v("ServiceLoader.load()")]),s._v("方法，从"),n("code",[s._v("META-INF/services")]),s._v("文件夹下的"),n("code",[s._v("org.apache.dubbo.common.extension.LoadingStrategy")]),s._v("文件中读取到了具体实现类并且依次加载。所以一定程度上来说，Dubbo SPI 机制正是依赖于 JDK SPI 机制。")]),s._v(" "),n("p",[n("img",{attrs:{src:"http://md7.admin4j.com/blog/Dubboimage-20230411093917438.png",alt:"LoadingStrategy是如何加载的"}})]),s._v(" "),n("h2",{attrs:{id:"_3-3-核心成员变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-核心成员变量"}},[s._v("#")]),s._v(" 3.3 核心成员变量")]),s._v(" "),n("p",[s._v("1、type：与当前 ExtensionLoader 绑定的扩展接口类型。")]),s._v(" "),n("p",[s._v("2、cachedNames：存储了扩展实现类和扩展名的关系，key 为扩展实现类，value 为对应扩展名。")]),s._v(" "),n("p",[s._v("3、cachedClasses：存储了扩展名和扩展实现类之间的关系。key 为扩展名，value 为扩展实现类，这个 map 可以和 cachedNames 对应着理解，他们存贮内容是相反的关系，算是一种空间换时间的技巧。")]),s._v(" "),n("p",[s._v("4、cachedInstances：存储了扩展实现类类名与实现类的实例对象之间的关系，key 为扩展实现名，value 为实例对象。")]),s._v(" "),n("p",[s._v("5、cachedDefaultName：@SPI 注解配置的默认扩展名。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//扩展接口类型\nprivate final Class<?> type;\n//存储了扩展实现类和扩展名的关系\nprivate final ConcurrentMap<Class<?>, String> cachedNames = new ConcurrentHashMap<>();\n//存储了扩展名和扩展实现类之间的关系\nprivate final Holder<Map<String, Class<?>>> cachedClasses = new Holder<>();\n//存储了扩展实现类类名与实例对象之间的关系\nprivate final ConcurrentMap<String, Holder<Object>> cachedInstances = new ConcurrentHashMap<>();\n//扩展接口对@SPI注解配置的value\nprivate String cachedDefaultName;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h1",{attrs:{id:"_4-dubbo-spi-加载原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-dubbo-spi-加载原理"}},[s._v("#")]),s._v(" 4."),n("strong",[s._v("Dubbo SPI 加载原理")])]),s._v(" "),n("h2",{attrs:{id:"_4-1-测试-demo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-测试-demo"}},[s._v("#")]),s._v(" 4.1 测试 demo")]),s._v(" "),n("p",[s._v("为了方便调试并且抓住核心原理，其实可以跟 JDK SPI 一样写一个 demo，我们直接复用上次的扩展接口和实现类，但是这次是用 Dubbo SPI 的形式加载。配置文件需要重新写一份，写成 key-value 形式，并且放在"),n("code",[s._v("META-INF/dubbo")]),s._v("文件夹下。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('@SPI\npublic interface MySPI {\n    void say();\n}\npublic class HelloMySPI implements MySPI{\n    @Override\n    public void say() {\n        System.out.println("HelloMySPI say:hello");\n    }\n}\npublic class GoodbyeMySPI implements MySPI {\n    @Override\n    public void say() {\n        System.out.println("GoodbyeMySPI say:Goodbye");\n    }\n}\npublic static void main(String[] args) {\n    ExtensionLoader<MySPI> extensionLoader = ExtensionLoader.getExtensionLoader(MySPI.class);\n    MySPI hello = extensionLoader.getExtension("hello");\n    hello.say();\n    MySPI goodbye = extensionLoader.getExtension("goodbye");\n    goodbye.say();\n}\n//配置文件 META-INF/dubbo/org.daley.spi.demo.MySPI\ngoodbye=org.daley.spi.demo.GoodbyeMySPI\nhello=org.daley.spi.demo.HelloMySPI\n\n// 输出结果\nHelloMySPI say:hello\nGoodbyeMySPI say:Goodbye\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br")])]),n("p",[s._v("一定记得给接口标记@SPI 注解，否则会抛出以下错误。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('Exception in thread "main" java.lang.IllegalArgumentException: Extension type (interface org.daley.spi.demo.MySPI) is not an extension, because it is NOT annotated with @SPI!\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"_4-2-获得扩展实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-获得扩展实例"}},[s._v("#")]),s._v(" 4.2 获得扩展实例")]),s._v(" "),n("p",[s._v("在上述 demo 中，我们首先通过 ExtensionLoader 的 getExtensionLoader 方法获取一个 ExtensionLoader 实例，然后再通过 ExtensionLoader 的 getExtension 方法获取拓展类对象。")]),s._v(" "),n("p",[s._v("在调用"),n("code",[s._v("getExtensionLoader()")]),s._v("时会首先尝试从"),n("code",[s._v("EXTENSION_LOADERS")]),s._v("中根据扩展点类型获得"),n("code",[s._v("ExtensionLoader")]),s._v("，如果未命中缓存，则会新创建一个"),n("code",[s._v("ExtensionLoader")]),s._v("，然后返回。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public static <T> ExtensionLoader<T> getExtensionLoader(Class<T> type) {\n   ……省略校验逻辑\n    ExtensionLoader<T> loader = (ExtensionLoader<T>) EXTENSION_LOADERS.get(type);\n    if (loader == null) {\n        EXTENSION_LOADERS.putIfAbsent(type, new ExtensionLoader<T>(type));\n        loader = (ExtensionLoader<T>) EXTENSION_LOADERS.get(type);\n    }\n    return loader;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("在"),n("code",[s._v("ExtensionLoader")]),s._v("的构造方法中，会绑定扩展点接口类型，并且会绑定扩展对象工厂"),n("code",[s._v("ExtensionFactory objectFactory")]),s._v("，这也是一个扩展点，为了避免越套越深，这里不做深入追踪。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("private ExtensionLoader(Class<?> type) {\n    this.type = type;\n    objectFactory =\n            (type == ExtensionFactory.class ? null : ExtensionLoader.getExtensionLoader(ExtensionFactory.class).getAdaptiveExtension());\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("创建好"),n("code",[s._v("ExtensionLoader")]),s._v("之后，便可以调用"),n("code",[s._v("getExtension()")]),s._v("方法。核心在于获得扩展实现，首先检查缓存，缓存未命中则创建扩展对象，然后设置到 holder 中。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('ublic T getExtension(String name) {\n    return getExtension(name, true);\n}\n\npublic T getExtension(String name, boolean wrap) {\n    if (StringUtils.isEmpty(name)) {\n        throw new IllegalArgumentException("Extension name == null");\n    }\n    if ("true".equals(name)) {\n        // 获取默认的扩展实现类\n        return getDefaultExtension();\n    }\n    //用于持有目标对象\n    final Holder<Object> holder = getOrCreateHolder(name);\n    Object instance = holder.get();\n    if (instance == null) {\n        synchronized (holder) {\n            instance = holder.get();\n            if (instance == null) {\n                //创建扩展实例\n                instance = createExtension(name, wrap);\n                //设置到holder中\n                holder.set(instance);\n            }\n        }\n    }\n    return (T) instance;\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br")])]),n("p",[s._v("创建扩展实例方法"),n("code",[s._v("createExtension()")]),s._v("主要包含以下逻辑：")]),s._v(" "),n("ol",[n("li",[s._v("通过 "),n("code",[s._v("getExtensionClasses()")]),s._v(" 获取所有的拓展类")]),s._v(" "),n("li",[s._v("通过反射创建拓展对象")]),s._v(" "),n("li",[s._v("向拓展对象中注入依赖（可以想象到，这里存在依赖其他 SPI 扩展点的情况，递归注入）")]),s._v(" "),n("li",[s._v("将拓展对象包裹在相应的 Wrapper 对象中")]),s._v(" "),n("li",[s._v("如果实现了"),n("code",[s._v("Lifecycle")]),s._v("接口，执行生命周期的初始化方法")])]),s._v(" "),n("p",[s._v("步骤 1 是加载拓展类的关键，步骤 3 和 4 是 Dubbo IOC 与 AOP 的具体实现，注意 IOC 和 AOP 是一种思想，别和 Spring 的 IOC、AOP 混淆。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("private T createExtension(String name, boolean wrap) {\n    //关键代码！从配置文件中加载所有的拓展类，可得到“配置项名称”到“配置类”的映射关系表\n    Class<?> clazz = getExtensionClasses().get(name);\n    if (clazz == null || unacceptableExceptions.contains(name)) {\n        throw findException(name);\n    }\n    try {\n        // 通过反射创建实例\n        T instance = (T) EXTENSION_INSTANCES.get(clazz);\n        if (instance == null) {\n            EXTENSION_INSTANCES.putIfAbsent(clazz, clazz.getDeclaredConstructor().newInstance());\n            instance = (T) EXTENSION_INSTANCES.get(clazz);\n        }\n        // 向实例中注入依赖\n        injectExtension(instance);\n\n\n        if (wrap) {\n\n            List<Class<?>> wrapperClassesList = new ArrayList<>();\n            if (cachedWrapperClasses != null) {\n                wrapperClassesList.addAll(cachedWrapperClasses);\n                wrapperClassesList.sort(WrapperComparator.COMPARATOR);\n                Collections.reverse(wrapperClassesList);\n            }\n\n            if (CollectionUtils.isNotEmpty(wrapperClassesList)) {\n                // 循环创建 Wrapper 实例\n                for (Class<?> wrapperClass : wrapperClassesList) {\n                    Wrapper wrapper = wrapperClass.getAnnotation(Wrapper.class);\n                    if (wrapper == null\n                            || (ArrayUtils.contains(wrapper.matches(), name) && !ArrayUtils.contains(wrapper.mismatches(), name))) {\n                        // 将当前 instance 作为参数传给 Wrapper 的构造方法，并通过反射创建 Wrapper 实例。\n                        // 然后向 Wrapper 实例中注入依赖，最后将 Wrapper 实例再次赋值给 instance 变量\n                        instance = injectExtension((T) wrapperClass.getConstructor(type).newInstance(instance));\n                    }\n                }\n            }\n        }\n    //执行生命周期初始化方法 initialize()\n        initExtension(instance);\n        return instance;\n    } catch (Throwable t) {\n        ……\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br")])]),n("h2",{attrs:{id:"_4-3-获得所有扩展类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-获得所有扩展类"}},[s._v("#")]),s._v(" 4.3 获得所有扩展类")]),s._v(" "),n("p",[s._v("我们在根据名称获得指定拓展类之前，首先需要根据配置文件解析出拓展项名称到拓展类的映射 Map（Map<名称, 拓展类>），之后再根据拓展项名称从映射关系 Map 中根据 name 取出相应的拓展类即可。")]),s._v(" "),n("p",[s._v("在获得全部扩展名与扩展类关系"),n("code",[s._v("classes")]),s._v("时，如果还未创建，会有个双重检查的过程以防止并发加载。通过检查后会调用 "),n("code",[s._v("loadExtensionClasses()")]),s._v(" 加载扩展类。相关过程的代码分析如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("private Map<String, Class<?>> getExtensionClasses() {\n    // 从缓存中获取已加载的拓展类\n    Map<String, Class<?>> classes = cachedClasses.get();\n    // DBC 双重检查\n    if (classes == null) {\n        synchronized (cachedClasses) {\n            classes = cachedClasses.get();\n            if (classes == null) {\n                // 加载所有拓展类逻辑\n                classes = loadExtensionClasses();\n                cachedClasses.set(classes);\n            }\n        }\n    }\n    return classes;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[n("code",[s._v("loadExtensionClasses()")]),s._v("主要做了两件事，一是解析@SPI 注解设置默认扩展名，二是在这里会扫描 Dubbo 那三个配置文件夹下的所有配置文件，具体注释如下。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('private Map<String, Class<?>> loadExtensionClasses() {\n    cacheDefaultExtensionName();\n\n    Map<String, Class<?>> extensionClasses = new HashMap<>();\n    // 从三种加载策略中获得扩展实现类，对应加载指定文件夹下的配置文件，这里的加载策略已经根据优先级排好了顺序，数字越小越优先\n    for (LoadingStrategy strategy : strategies) {\n        loadDirectory(extensionClasses, strategy.directory(), type.getName(), strategy.preferExtensionClassLoader(),\n                strategy.overridden(), strategy.excludedPackages());\n        // 此处为了兼容阿里巴巴到Apache的版本过度\n        loadDirectory(extensionClasses, strategy.directory(), type.getName().replace("org.apache", "com.alibaba"),\n                strategy.preferExtensionClassLoader(), strategy.overridden(), strategy.excludedPackages());\n    }\n\n    return extensionClasses;\n}\n\n// 设置默认扩展名\nprivate void cacheDefaultExtensionName() {\n    // 获取 SPI 注解，这里的 type 变量是在调用 getExtensionLoader 方法时传入的\n    final SPI defaultAnnotation = type.getAnnotation(SPI.class);\n    if (defaultAnnotation == null) {\n        return;\n    }\n    //从@SPI注解获得默认实现扩展实现名\n    String value = defaultAnnotation.value();\n    if ((value = value.trim()).length() > 0) {\n        // 对 SPI 注解内容进行切分\n        String[] names = NAME_SEPARATOR.split(value);\n        // 检测 SPI 注解内容是否合法，不合法则抛出异常\n        if (names.length > 1) {\n            throw new IllegalStateException("More than 1 default extension name on extension " + type.getName()\n                    + ": " + Arrays.toString(names));\n        }\n        if (names.length == 1) {\n            // 设置默认名称，参考 getDefaultExtension 方法\n            cachedDefaultName = names[0];\n        }\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br")])]),n("p",[s._v("可以看出，关键的逻辑应该在"),n("code",[s._v("loadDirectory()")]),s._v("方法中。"),n("code",[s._v("loadDirectory()")]),s._v(" 方法先通过 "),n("code",[s._v("classLoader")]),s._v(" 获取所有资源链接，然后再通过"),n("code",[s._v("loadResource")]),s._v(" 方法加载资源。我们继续跟下去，看一下 loadResource 方法的实现。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('private void loadResource(Map<String, Class<?>> extensionClasses, ClassLoader classLoader,\n                          java.net.URL resourceURL, boolean overridden, String... excludedPackages) {\n    try {\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(resourceURL.openStream(), StandardCharsets.UTF_8))) {\n            String line;\n            String clazz = null;\n            // 按行读取配置内容\n            while ((line = reader.readLine()) != null) {\n                // 定位 # 字符\n                final int ci = line.indexOf(\'#\');\n                if (ci >= 0) {\n                    // 截取 # 之前的字符串，# 之后的内容为注释，需要忽略\n                    line = line.substring(0, ci);\n                }\n                line = line.trim();\n                if (line.length() > 0) {\n                    try {\n                        String name = null;\n                        // 以等于号 = 为界，截取键与值\n                        int i = line.indexOf(\'=\');\n                        if (i > 0) {\n                            name = line.substring(0, i).trim();\n                            clazz = line.substring(i + 1).trim();\n                        } else {\n                            clazz = line;\n                        }\n                        if (StringUtils.isNotEmpty(clazz) && !isExcluded(clazz, excludedPackages)) {\n                            // 加载类，并通过 loadClass 方法对类进行缓存\n                            loadClass(extensionClasses, resourceURL, Class.forName(clazz, true, classLoader), name, overridden);\n                        }\n                    } catch (Throwable t) {\n                        IllegalStateException e = new IllegalStateException(\n                                "Failed to load extension class (interface: " + type + ", class line: " + line + ") in " + resourceURL +\n                                        ", cause: " + t.getMessage(), t);\n                        exceptions.put(line, e);\n                    }\n                }\n            }\n        }\n    } catch (Throwable t) {\n        logger.error("Exception occurred when loading extension class (interface: " +\n                type + ", class file: " + resourceURL + ") in " + resourceURL, t);\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br")])]),n("p",[s._v("loadResource 方法用于读取和解析配置文件，并通过反射加载类，最后调用 loadClass 方法进行其他操作。loadClass 方法用于主要用于操作缓存，该方法的逻辑如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('private void loadClass(Map<String, Class<?>> extensionClasses, java.net.URL resourceURL, Class<?> clazz, String name,\n                       boolean overridden) throws NoSuchMethodException {\n    if (!type.isAssignableFrom(clazz)) {\n        throw new IllegalStateException("Error occurred when loading extension class (interface: " +\n                type + ", class line: " + clazz.getName() + "), class "\n                + clazz.getName() + " is not subtype of interface.");\n    }\n    // 检测目标类上是否有 Adaptive 注解\n    if (clazz.isAnnotationPresent(Adaptive.class)) {\n        // 设置 cachedAdaptiveClass缓存\n        cacheAdaptiveClass(clazz, overridden);\n\n        // 检测 clazz 是否是 Wrapper 类型\n    } else if (isWrapperClass(clazz)) {\n        // 存储 clazz 到 cachedWrapperClasses 缓存中\n        cacheWrapperClass(clazz);\n\n    } else {\n        // 程序进入此分支，表明 clazz 是一个普通的拓展类\n        clazz.getConstructor();\n        // 检测 clazz 是否有默认的构造方法，如果没有，则抛出异常\n        if (StringUtils.isEmpty(name)) {\n            // 如果 name 为空，则尝试从 Extension 注解中获取 name，或使用小写的类名作为 name\n            name = findAnnotationName(clazz);\n            if (name.length() == 0) {\n                throw new IllegalStateException(\n                        "No such extension name for the class " + clazz.getName() + " in the config " + resourceURL);\n            }\n        }\n        // 切分 name\n        String[] names = NAME_SEPARATOR.split(name);\n        if (ArrayUtils.isNotEmpty(names)) {\n            cacheActivateClass(clazz, names[0]);\n            for (String n : names) {\n                // 存储 Class 到名称的映射关系\n                cacheName(clazz, n);\n                // 存储名称到 Class 的映射关系\n                saveInExtensionClass(extensionClasses, clazz, n, overridden);\n            }\n        }\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br")])]),n("p",[s._v("如上，loadClass 方法操作了不同的缓存，比如解析@Adaptive 注解设置到 cachedAdaptiveClass 缓存；如果是 wrapper 类设置到 cachedWrapperClasses 缓存；保存拓展类和拓展名到 cachedNames 缓存等等。")]),s._v(" "),n("h1",{attrs:{id:"_5-总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-总结"}},[s._v("#")]),s._v(" 5. 总结")]),s._v(" "),n("p",[s._v("在我们了解了各种实现细节后，最后可以总结一下各种知识点。")]),s._v(" "),n("ol",[n("li",[s._v("dubbo 的 ExtensionLoader 对应 JDK 的 ServiceLoader，包含了加载所需要的各种上下文信息，一个扩展接口对应一个 ExtensionLoader，关系维护在一个 Map 中。")]),s._v(" "),n("li",[s._v("在尝试获取拓展类的时候，才开始实例化，按需加载，这种懒加载是一种对 JDK SPI 的优化。")]),s._v(" "),n("li",[s._v("Dubbo SPI 会从三个配置目录按照优先级加载配置，加载策略是依赖 JDK SPI 加载的。")]),s._v(" "),n("li",[s._v("加载配置的时候会加载所有配置的 Class 类型，然后把拓展名和拓展类的类型维护一个映射（key-value），这也是按需加载，灵活使用的基础。")])])])}),[],!1,null,null,null);n.default=t.exports}}]);