(window.webpackJsonp=window.webpackJsonp||[]).push([[147],{1116:function(t,a,s){"use strict";s.r(a);var e=s(4),l=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"base理论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#base理论"}},[t._v("#")]),t._v(" BASE理论")]),t._v(" "),a("p",[t._v("上面我们讲到CAP 不可能同时满足，而分区容错性是对于分布式系统而言，是必须的。最后，我们说，如果系统能够同时实现 CAP 是再好不过的了，所以出现了 BASE 理论。")]),t._v(" "),a("p",[t._v("BASE：全称：Basically Available(基本可用)，Soft state（软状态）,和 Eventually consistent（最终一致性）三个短语的缩写 ,Base 理论是对 CAP 中一致性和可用性权衡的结果，其来源于对大型互联网分布 式实践的总结，是基于 CAP 定理逐步演化而来的。其核心思想是： 既是无法做到强一致性（Strong consistency），但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性（Eventual consistency）。")]),t._v(" "),a("h2",{attrs:{id:"basically-available-基本可用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#basically-available-基本可用"}},[t._v("#")]),t._v(" Basically Available(基本可用)")]),t._v(" "),a("p",[t._v("什么是基本可用呢？假设系统，出现了不可预知的故障，但还是能用，相比较正常的系统而言：")]),t._v(" "),a("ul",[a("li",[t._v("响应时间上的损失：正常情况下的搜索引擎 0.5 秒即返回给用户结果，而基本可用的搜索引擎 可以在 1 秒返回结果。")]),t._v(" "),a("li",[t._v("功能上的损失：在一个电商网站上，正常情况下，用户可以顺利完成每一笔订单，但是到了大促期间，为了保护购物系统的稳定性，部分消费者可能会被引导到一个降级页面")])]),t._v(" "),a("h2",{attrs:{id:"soft-state-软状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#soft-state-软状态"}},[t._v("#")]),t._v(" Soft state（软状态）")]),t._v(" "),a("p",[t._v("什么是软状态呢？相对于原子性而言，要求多个节点的数据副本都是一致的，这是一种 “硬状态”。 软状态指的是：允许系统中的数据存在中间状态，并认为该状态不会影响系统的整体可用性，即允许系统在多个不同节点的数据副本存在数据延时。")]),t._v(" "),a("h2",{attrs:{id:"eventually-consistent-最终一致性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eventually-consistent-最终一致性"}},[t._v("#")]),t._v(" Eventually consistent（最终一致性）")]),t._v(" "),a("p",[t._v("上面说软状态，然后不可能一直是软状态，必须有个时间期限。在期限过后，应当保证所有副本保持数据一致性。从而达到数据的最终一致性。这个时间期限取决于网络延时，系统负载，数据复制方案设计等等因素。")])])}),[],!1,null,null,null);a.default=l.exports}}]);