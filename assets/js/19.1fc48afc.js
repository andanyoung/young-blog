(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{409:function(s,e,n){s.exports=n.p+"assets/img/format-rm12121.47a61a78.png"},410:function(s,e,n){s.exports=n.p+"assets/img/format,png-1685598203834-1.631ff2aa.png"},411:function(s,e,n){s.exports=n.p+"assets/img/format,png-1685598203834-2.27023b2e.png"},571:function(s,e,n){"use strict";n.r(e);var a=n(4),t=Object(a.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("p",[s._v("今天抽空给大家整理了一份关于 RocketMQ 的高性能知识点文章总结。希望能对各位读者有所帮助。")]),s._v(" "),e("h1",{attrs:{id:"关于-rockemq-的基本介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关于-rockemq-的基本介绍"}},[s._v("#")]),s._v(" "),e("strong",[s._v("关于 RockeMQ 的基本介绍")])]),s._v(" "),e("h2",{attrs:{id:"简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[s._v("#")]),s._v(" "),e("strong",[s._v("简介")])]),s._v(" "),e("p",[s._v("RocketMQ 是一个纯 Java、分布式、队列模型的开源消息中间件，前身是 MetaQ，是阿里参考 Kafka 特点研发的一个队列模型的消息中间件，后开源给 apache 基金会成为了 apache 顶级开源项目，具有高性能、高可靠、高实时、分布式特点。")]),s._v(" "),e("h3",{attrs:{id:"发展背景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#发展背景"}},[s._v("#")]),s._v(" "),e("strong",[s._v("发展背景")])]),s._v(" "),e("ul",[e("li",[s._v("2011 年：业界出现了现在被很多大数据领域所推崇的 Kafka 消息引擎，阿里巴巴在研究了 Kafka 的整体机制和架构设计之后，基于 Kafka 的设计使用 Java 进行了完全重写并推出了 MetaQ 1.0 版本，主要是用于解决顺序消息和海量堆积的问题。")]),s._v(" "),e("li",[s._v("2012 年：阿里巴巴开源其自研的第三代分布式消息中间件——RocketMQ。")]),s._v(" "),e("li",[s._v("2016 年 11 月：阿里将 RocketMQ 捐献给 Apache 软件基金会，正式成为孵化项目。")]),s._v(" "),e("li",[s._v("2017 年 2 月 20 日：RocketMQ 正式发布 4.0 版本，专家称新版本适用于电商领域，金融领域，大数据领域，兼有物联网领域的编程模型。")]),s._v(" "),e("li",[s._v("2022 年：RocketMQ 正式发布 5.0 版本，这也是目前最新版本。")])]),s._v(" "),e("h3",{attrs:{id:"rocketmq-的各个特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq-的各个特点"}},[s._v("#")]),s._v(" "),e("strong",[s._v("RocketMQ 的各个特点")])]),s._v(" "),e("ul",[e("li",[s._v("单机吞吐量：10w/s。")]),s._v(" "),e("li",[s._v("可用性：支持双主双从的分布式架构，具备高可用特性。支持使用 topic,tag,SQL 来对消息进行筛选。底层结构通过多队列来承载消息存储等特性。可靠的 FIFO 和严格有序的消息队列中间件。支持多种消息传递协议，例如 grpc，Mqtt，Jms....")]),s._v(" "),e("li",[s._v("源码实现：Java 语言。")])]),s._v(" "),e("h1",{attrs:{id:"pagecache-和-mmap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pagecache-和-mmap"}},[s._v("#")]),s._v(" "),e("strong",[s._v("PageCache 和 Mmap")])]),s._v(" "),e("p",[s._v("RocketMQ 这款中间件具有着单机 10w + 的吞吐量，其底层原因，实际上得从操作系统原理开始和大家讲起。")]),s._v(" "),e("h2",{attrs:{id:"顺序写入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#顺序写入"}},[s._v("#")]),s._v(" "),e("strong",[s._v("顺序写入")])]),s._v(" "),e("p",[s._v("磁盘的写步骤通常是：CPU 发送一个写信号给到磁盘磁头，接着磁头需要进行寻道操作，找到对应的磁道后，定位对应的位置进行数据写入。所以如果数据是随机写入的话，磁头就需要频繁地切换盘道进行数据的写入，整体耗时会有所提升。")]),s._v(" "),e("p",[s._v("顺序写，其实是一种非常常见的提升 IO 写性能的方式，利用连续的写入地址，从而减少磁头的切换次数，提升性能。")]),s._v(" "),e("h2",{attrs:{id:"pagecache"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pagecache"}},[s._v("#")]),s._v(" "),e("strong",[s._v("PageCache")])]),s._v(" "),e("p",[s._v("为了提升对文件的读写效率，Linux 内核会以页大小（4KB）为单位，将文件划分为多数据块。当用户对文件中的某个数据块进行读写操作时，内核首先会申请一个内存页（称为 页缓存）与文件中的数据块进行绑定。")]),s._v(" "),e("p",[s._v("例如下边这张图，当我们发起一次系统调用的 write 方法，想要将用户态中的数据写入磁盘的时候，其实是需要发生以下操作的：")]),s._v(" "),e("p",[e("img",{attrs:{src:n(409),alt:"img"}})]),s._v(" "),e("p",[s._v("首先，将用户地址空间的数据通过 CPU 拷贝，放入到内核空间中，并且写入一个 PageCache 里面，然后通过 DMA 去将 PageCache 的数据写入到磁盘。")]),s._v(" "),e("p",[s._v("这里面由于有 CPU 拷贝这样的重操作，所以想要提升吞吐量，必须解决这个问题。而 RocketMQ 的创作团队，则是通过 mmap 技术来解决了它。")]),s._v(" "),e("h2",{attrs:{id:"什么是-mmap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是-mmap"}},[s._v("#")]),s._v(" "),e("strong",[s._v("什么是 mmap")])]),s._v(" "),e("p",[s._v("mmap 系统调用，让用户地址空间，跟文件做映射（实际是指向不存在的物理内存）。将内核态的一段空间地址映射到了用户态中，这样数据只需要写入到用户态的这段虚拟地址中，接着内核空间的 DMA 会将这段数据写入到磁盘中。这样之后，整体的写入流程就如下图所示：")]),s._v(" "),e("p",[e("img",{attrs:{src:n(410),alt:"img"}})]),s._v(" "),e("p",[s._v("使用 mmap 技术之后，可以减少一次的 CPU 拷贝次数，提升性能。")]),s._v(" "),e("p",[s._v("这里补充一些说明，其实 DMA 本质上是一块访问独立的芯片。由于每次访问磁盘进行 IO 操作都会导致 CPU 大量的空闲时间，而 DMA 则是用于提升 IO 操作效率的一个角色，主要用于 IO 的数据传输，降低 CPU 等待时间。")]),s._v(" "),e("h1",{attrs:{id:"java-里面如何使用-mmap-技术"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-里面如何使用-mmap-技术"}},[s._v("#")]),s._v(" "),e("strong",[s._v("Java 里面如何使用 mmap 技术")])]),s._v(" "),e("p",[s._v("在 Java 语言中，其实很早就有提供 mmap 方面的 api 了，下边是一段简单的 mmap 使用案例。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('public class MmapUtils {\n\n\n    public File commitLogFile;\n    public MappedByteBuffer mappedByteBuffer;\n    public int mappedSize = 0;\n    public int writePos = 0;\n\n\n    public MmapUtils(String commitLogPath, int mappedSize) {\n        this.commitLogFile = new File(commitLogPath);\n        if(!commitLogFile.exists()){\n            try {\n                commitLogFile.createNewFile();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        this.mappedSize = mappedSize;\n        try {\n            mappedByteBuffer = new RandomAccessFile(commitLogFile, "rw").getChannel().map(FileChannel.MapMode.READ_WRITE, 0, mappedSize);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n\n    /**\n     * 往磁盘写数据\n     *\n     * @param content\n     * @return\n     */\n    public int writeFile(String content) {\n        mappedByteBuffer.put(content.getBytes());\n        //强制刷盘\n        mappedByteBuffer.force();\n        writePos = mappedByteBuffer.position();\n        return 1;\n    }\n\n\n    /**\n     * 从磁盘中读取数据\n     *\n     * @param len\n     * @return\n     */\n    public byte[] readContent(int len) {\n        mappedByteBuffer.position(0);\n        byte[] dest = new byte[len];\n        int j = 0;\n        for (int i = 0; i < mappedSize; i++) {\n            byte b = mappedByteBuffer.get();\n            if (b != 0) {\n                dest[j++] = b;\n            }\n        }\n        return dest;\n    }\n\n\n}\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br")])]),e("h2",{attrs:{id:"mmap-存在的缺陷"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mmap-存在的缺陷"}},[s._v("#")]),s._v(" "),e("strong",[s._v("mmap 存在的缺陷")])]),s._v(" "),e("p",[s._v("其实使用 mmap 技术还是存在一些缺陷的。")]),s._v(" "),e("h3",{attrs:{id:"导致缺页中断问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#导致缺页中断问题"}},[s._v("#")]),s._v(" "),e("strong",[s._v("导致缺页中断问题")])]),s._v(" "),e("p",[s._v("我们知道，在操作系统的中，数据通常都是被放在磁盘中的，只有在需要计算的时候，才会将数据加载到内存中，而每次加载的单位都是以 “页” 作为基础，假设我们需要访问一块存在于磁盘，但是没有被加载到内存中的数据，这种情况，我们称之为 "),e("strong",[s._v("“软性的缺页中断”")]),s._v(" 。 如果数据是存在于内存，但是该页的地址没有被注册到 MMU 中，我们则称之为 "),e("strong",[s._v("“硬性的缺页中断”")]),s._v(" 。")]),s._v(" "),e("p",[s._v("总之不管是软性还是硬性的中断，都需要重新建立一次数据的内存映射，比较消耗性能。")]),s._v(" "),e("h3",{attrs:{id:"mmap-对于文件的大小有一定要求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mmap-对于文件的大小有一定要求"}},[s._v("#")]),s._v(" "),e("strong",[s._v("mmap 对于文件的大小有一定要求")])]),s._v(" "),e("p",[s._v("使用 mmap 技术之后，我们不可以使用 2gb 大小以上的文件去做映射，同时文件的长度也不建议做变长，最好是固定的大小。最后对于小文件而言，使用 mmap 可能性能还不如直接的原始 IO 操作。")]),s._v(" "),e("h3",{attrs:{id:"rocketmq-对-mmap-的优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq-对-mmap-的优化"}},[s._v("#")]),s._v(" "),e("strong",[s._v("RocketMQ 对 mmap 的优化")])]),s._v(" "),e("p",[s._v("好了，现在我们了解了 mmap 存在的缺陷之后，来看看 RocketMQ 是如何解决这些不足点的。")]),s._v(" "),e("h3",{attrs:{id:"预映射"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#预映射"}},[s._v("#")]),s._v(" "),e("strong",[s._v("预映射")])]),s._v(" "),e("p",[s._v("在 RocketMQ 的源代码里，可以看到这样一份代码，它的名字叫做：org.apache.rocketmq.store.AllocateMappedFileService。这个类负责在 rocketmq 启动时，预先分配 mmap 的文件映射。")]),s._v(" "),e("h3",{attrs:{id:"文件预热"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文件预热"}},[s._v("#")]),s._v(" "),e("strong",[s._v("文件预热")])]),s._v(" "),e("p",[s._v("调用 mmap 进行内存映射后，OS 只是建立虚拟内存地址至物理地址的映射表，没有实际加载任何文件至内存。依靠一次缺页加载 4K，1G 的 commitLog 需要发生 256 次缺页中断。而在 RocketMQ 的源代码中，进行了 madvise 系统调用，其目的是使操作系统做一次内存映射后对应的文件数据尽可能多地预加载进内存，从而实现预热。")]),s._v(" "),e("h3",{attrs:{id:"内存锁定"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内存锁定"}},[s._v("#")]),s._v(" "),e("strong",[s._v("内存锁定")])]),s._v(" "),e("p",[s._v("将进程使用的部分或者全部的地址空间锁定在物理内存中，并会先写入一些随机值到 mmap 映射出的内存空间里，防止其被交换到 swap 空间。基于 mlock 系统调用。")]),s._v(" "),e("h3",{attrs:{id:"堆外缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#堆外缓存"}},[s._v("#")]),s._v(" "),e("strong",[s._v("堆外缓存")])]),s._v(" "),e("p",[s._v("到这里，我们了解了 RocketMQ 内部通过使用 PageCache 去让我们的数据写入如写入内存般轻松，但是这在极端情况下，可能会有出现频繁出现缺页中断的情况，以及 PageCache 阻塞，这种情况下，Broker 节点会返回一个 SYSTEM_BUSY 的信号给到客户端，不过这类场景在实际生产中很少会出现。为了避免这种情况，RocketMQ 底层增加了一套堆外缓存来优化这类场景。当 PageCache 写入阻塞的时候，可以选择写入到堆外缓存中，之后再从堆外缓存 "),e("strong",[s._v("(DirectByteBuffer)")]),s._v(" 写入到 PageCache。")]),s._v(" "),e("h1",{attrs:{id:"rocketmq-中的-mmap-预分配实现分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq-中的-mmap-预分配实现分析"}},[s._v("#")]),s._v(" "),e("strong",[s._v("RocketMQ 中的 mmap 预分配实现分析")])]),s._v(" "),e("p",[s._v("下边让我们来看看 RocketMQ 底层是如何进行 mmap 的文件映射预分配的。在 RocketMQ 的源代码中，当服务启动之后，AllocateMappedFileService 这个线程类便会开始执行。")]),s._v(" "),e("p",[e("img",{attrs:{src:n(411),alt:"img"}})]),s._v(" "),e("p",[s._v("线程启动之后，便会执行 mmapOperation 方法，这个方法的大致步骤如下：")]),s._v(" "),e("ul",[e("li",[s._v("从优先级队列中获取 AllocateRequest")]),s._v(" "),e("li",[s._v("创建 MappedFile")]),s._v(" "),e("li",[s._v("根据配置是否预热 MappedFile（填充 0 字节），将 MappedFile 放入到 AllocateRequest")]),s._v(" "),e("li",[s._v("如果出现 IOException 将 AllocateRequest 重新放入优先级队列")]),s._v(" "),e("li",[s._v("调用 AllocateRequest 的 CountDownLatch#countDown 方法通知 putRequestAndReturnMappedFile 线程")])]),s._v(" "),e("p",[s._v("整体执行目的总结起来就是：初始化 + 预热 mappedFile。")]),s._v(" "),e("p",[s._v("关于 mmapOperation 的源代码和其含义，我列了一份出来给各位读者查看：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('/**\n * Only interrupted by the external thread, will return false\n */\nprivate boolean mmapOperation() {\n    boolean isSuccess = false;\n    AllocateRequest req = null;\n    try {\n        // 从优先级队列里获取AllocateRequest\n        req = this.requestQueue.take();\n        //从Map里获取AllocateRequest\n        AllocateRequest expectedRequest = this.requestTable.get(req.getFilePath());\n        if (null == expectedRequest) {\n            log.warn("this mmap request expired, maybe cause timeout " + req.getFilePath() + " "\n                + req.getFileSize());\n            return true;\n        }\n        //putRequestAndReturnMappedFile里map与优先级队列并不是强一致，是最终一致的\n        if (expectedRequest != req) {\n            log.warn("never expected here,  maybe cause timeout " + req.getFilePath() + " "\n                + req.getFileSize() + ", req:" + req + ", expectedRequest:" + expectedRequest);\n            return true;\n        }\n\n\n        if (req.getMappedFile() == null) {\n            long beginTime = System.currentTimeMillis();\n\n\n            MappedFile mappedFile;\n            //堆外内存\n            if (messageStore.getMessageStoreConfig().isTransientStorePoolEnable()) {\n                try {\n                    mappedFile = ServiceLoader.load(MappedFile.class).iterator().next();\n                    mappedFile.init(req.getFilePath(), req.getFileSize(), messageStore.getTransientStorePool());\n                } catch (RuntimeException e) {\n                    log.warn("Use default implementation.");\n                    mappedFile = new MappedFile(req.getFilePath(), req.getFileSize(), messageStore.getTransientStorePool());\n                }\n            } else {\n                mappedFile = new MappedFile(req.getFilePath(), req.getFileSize());\n            }\n\n\n            long eclipseTime = UtilAll.computeEclipseTimeMilliseconds(beginTime);\n            //创建MappedFile 花费大于10ms打印日志\n            if (eclipseTime > 10) {\n                int queueSize = this.requestQueue.size();\n                log.warn("create mappedFile spent time(ms) " + eclipseTime + " queue size " + queueSize\n                    + " " + req.getFilePath() + " " + req.getFileSize());\n            }\n\n\n            // pre write mappedFile 默认warmMapedFileEnable=false，即默认不预热\n            if (mappedFile.getFileSize() >= this.messageStore.getMessageStoreConfig()\n                .getMapedFileSizeCommitLog()\n                &&\n                this.messageStore.getMessageStoreConfig().isWarmMapedFileEnable()) {\n                // 文件预热\n                mappedFile.warmMappedFile(this.messageStore.getMessageStoreConfig().getFlushDiskType(),\n                    this.messageStore.getMessageStoreConfig().getFlushLeastPagesWhenWarmMapedFile());\n            }\n\n\n            req.setMappedFile(mappedFile);\n            this.hasException = false;\n            isSuccess = true;\n        }\n    } catch (InterruptedException e) {\n        log.warn(this.getServiceName() + " interrupted, possibly by shutdown.");\n        this.hasException = true;\n        return false;\n    } catch (IOException e) {\n        log.warn(this.getServiceName() + " service has exception. ", e);\n        this.hasException = true;\n        if (null != req) {\n            //重新插入请求到队列\n            requestQueue.offer(req);\n            try {\n                Thread.sleep(1);\n            } catch (InterruptedException ignored) {\n            }\n        }\n    } finally {\n        //AllocateRequest计数器减一，表示MappedFile已经创建完成\n        if (req != null && isSuccess)\n            req.getCountDownLatch().countDown();\n    }\n    return true;\n}\n复制代码\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br"),e("span",{staticClass:"line-number"},[s._v("67")]),e("br"),e("span",{staticClass:"line-number"},[s._v("68")]),e("br"),e("span",{staticClass:"line-number"},[s._v("69")]),e("br"),e("span",{staticClass:"line-number"},[s._v("70")]),e("br"),e("span",{staticClass:"line-number"},[s._v("71")]),e("br"),e("span",{staticClass:"line-number"},[s._v("72")]),e("br"),e("span",{staticClass:"line-number"},[s._v("73")]),e("br"),e("span",{staticClass:"line-number"},[s._v("74")]),e("br"),e("span",{staticClass:"line-number"},[s._v("75")]),e("br"),e("span",{staticClass:"line-number"},[s._v("76")]),e("br"),e("span",{staticClass:"line-number"},[s._v("77")]),e("br"),e("span",{staticClass:"line-number"},[s._v("78")]),e("br"),e("span",{staticClass:"line-number"},[s._v("79")]),e("br"),e("span",{staticClass:"line-number"},[s._v("80")]),e("br"),e("span",{staticClass:"line-number"},[s._v("81")]),e("br"),e("span",{staticClass:"line-number"},[s._v("82")]),e("br"),e("span",{staticClass:"line-number"},[s._v("83")]),e("br"),e("span",{staticClass:"line-number"},[s._v("84")]),e("br"),e("span",{staticClass:"line-number"},[s._v("85")]),e("br"),e("span",{staticClass:"line-number"},[s._v("86")]),e("br"),e("span",{staticClass:"line-number"},[s._v("87")]),e("br"),e("span",{staticClass:"line-number"},[s._v("88")]),e("br"),e("span",{staticClass:"line-number"},[s._v("89")]),e("br"),e("span",{staticClass:"line-number"},[s._v("90")]),e("br")])]),e("p",[s._v("在这段代码里头，我们可以看到有个文件预热的方法，叫做：warmMappedFile，该方法内部最后发出了一次系统调用，mlock 方法。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('public void warmMappedFile(FlushDiskType type, int pages) {\n        long beginTime = System.currentTimeMillis();\n        ByteBuffer byteBuffer = this.mappedByteBuffer.slice();\n        int flush = 0;\n        long time = System.currentTimeMillis();\n        for (int i = 0, j = 0; i < this.fileSize; i += MappedFile.OS_PAGE_SIZE, j++) {\n            byteBuffer.put(i, (byte) 0);\n            // force flush when flush disk type is sync\n            if (type == FlushDiskType.SYNC_FLUSH) {\n                if ((i / OS_PAGE_SIZE) - (flush / OS_PAGE_SIZE) >= pages) {\n                    flush = i;\n                    mappedByteBuffer.force();\n                }\n            }\n\n\n            // prevent gc\n            if (j % 1000 == 0) {\n                log.info("j={}, costTime={}", j, System.currentTimeMillis() - time);\n                time = System.currentTimeMillis();\n                try {\n                    Thread.sleep(0);\n                } catch (InterruptedException e) {\n                    log.error("Interrupted", e);\n                }\n            }\n        }\n\n\n        // force flush when prepare load finished\n        if (type == FlushDiskType.SYNC_FLUSH) {\n            log.info("mapped file warm-up done, force to disk, mappedFile={}, costTime={}",\n                this.getFileName(), System.currentTimeMillis() - beginTime);\n            mappedByteBuffer.force();\n        }\n        log.info("mapped file warm-up done. mappedFile={}, costTime={}", this.getFileName(),\n            System.currentTimeMillis() - beginTime);\n        // 这里是一个系统调用\n        this.mlock();\n    }\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br")])]),e("p",[s._v("这段代码的末尾处调用的 mlock 函数，它的内部是利用了 Java 的 JNI 机制，去进行系统调用。")]),s._v(" "),e("p",[s._v("JNA 的本质就是将大多数 native 的方法封装到 jar 包中的动态库中，并且提供了一系列的机制来自动加载这个动态库。例如下边这个例子就是基于 JNI 去调用 c lib 中的 print 方法：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('public class JNAUsage {\n\n\n    public interface CLibrary extends Library {\n        CLibrary INSTANCE = (CLibrary)\n                Native.load((Platform.isWindows() ? "msvcrt" : "c"),\n                        CLibrary.class);\n\n\n        void printf(String format, Object... args);\n    }\n\n\n    public static void main(String[] args) {\n        CLibrary.INSTANCE.printf("Hello, World\\n");\n        for (int i=0;i < args.length;i++) {\n            CLibrary.INSTANCE.printf("Argument %d: %s\\n", i, args[i]);\n        }\n    }\n}\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br")])]),e("p",[s._v("这个例子中，我们想要加载系统的 c lib，从而使用 c lib 中的 printf 方法。")]),s._v(" "),e("p",[s._v("具体做法就是创建一个 CLibrary interface，这个 interface 继承自 Library，然后使用 Native.load 方法来加载 c lib，最后在这个 interface 中定义要使用的 lib 中的方法即可。")]),s._v(" "),e("p",[s._v("那么在 RocketMQ 中，底层又是如何通过 JNI 来实现 mlock 的调用呢，来看源代码：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('public void mlock() {\n        final long beginTime = System.currentTimeMillis();\n        final long address = ((DirectBuffer) (this.mappedByteBuffer)).address();\n        Pointer pointer = new Pointer(address);\n        {\n            int ret = LibC.INSTANCE.mlock(pointer, new NativeLong(this.fileSize));\n            log.info("mlock {} {} {} ret = {} time consuming = {}", address, this.fileName, this.fileSize, ret, System.currentTimeMillis() - beginTime);\n        }\n\n\n        {\n            int ret = LibC.INSTANCE.madvise(pointer, new NativeLong(this.fileSize), LibC.MADV_WILLNEED);\n            log.info("madvise {} {} {} ret = {} time consuming = {}", address, this.fileName, this.fileSize, ret, System.currentTimeMillis() - beginTime);\n        }\n    }\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[s._v("上边代码中的 LIbC 是一个作者封装的系统调用接口文件，里面正好是映射了操作系统的 mlock 方法。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('package org.apache.rocketmq.store.util;\n\n\nimport com.sun.jna.Library;\nimport com.sun.jna.Native;\nimport com.sun.jna.NativeLong;\nimport com.sun.jna.Platform;\nimport com.sun.jna.Pointer;\n\n\npublic interface LibC extends Library {\n    LibC INSTANCE = (LibC) Native.loadLibrary(Platform.isWindows() ? "msvcrt" : "c", LibC.class);\n\n\n    int MADV_WILLNEED = 3;\n    int MADV_DONTNEED = 4;\n\n\n    int MCL_CURRENT = 1;\n    int MCL_FUTURE = 2;\n    int MCL_ONFAULT = 4;\n\n\n    /* sync memory asynchronously */\n    int MS_ASYNC = 0x0001;\n    /* invalidate mappings & caches */\n    int MS_INVALIDATE = 0x0002;\n    /* synchronous memory sync */\n    int MS_SYNC = 0x0004;\n\n\n    int mlock(Pointer var1, NativeLong var2);\n\n\n    int munlock(Pointer var1, NativeLong var2);\n\n\n    int madvise(Pointer var1, NativeLong var2, int var3);\n\n\n    Pointer memset(Pointer p, int v, long len);\n\n\n    int mlockall(int flags);\n\n\n    int msync(Pointer p, NativeLong length, int flags);\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br")])]),e("p",[s._v("通过调用 mlock 可以将进程使用的部分或者全部的地址空间锁定在物理内存中，防止其被交换到 "),e("strong",[s._v("swap")]),s._v(" 空间。对时间敏感的应用会希望全部使用物理内存，提高数据访问和操作的效率。例如，"),e("strong",[s._v("memcached")]),s._v(" 就提供锁定内存的选项，保证 memcached 使用内存全部在物理内存中。")]),s._v(" "),e("p",[s._v("通过 mlock 锁定对应的地址空间，防止被 swap 出去，这样的效果 ，也正是 RocketMQ 所需要的。")])])}),[],!1,null,null,null);e.default=t.exports}}]);