(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{653:function(s,a,n){"use strict";n.r(a);var e=n(4),t=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"一、概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、概述"}},[s._v("#")]),s._v(" 一、概述")]),s._v(" "),a("h3",{attrs:{id:"_1-什么是多租户架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是多租户架构"}},[s._v("#")]),s._v(" 1. 什么是多租户架构？")]),s._v(" "),a("p",[s._v("多租户架构是指在一个应用中支持多个租户（Tenant）同时访问，每个租户拥有独立的资源和数据，并且彼此之间完全隔离。")]),s._v(" "),a("p",[s._v("通俗来说，多租户就是把一个应用按照客户的需求 “分割” 成多个独立的实例，每个实例互不干扰。")]),s._v(" "),a("h3",{attrs:{id:"_2-多租户架构的优势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-多租户架构的优势"}},[s._v("#")]),s._v(" 2. 多租户架构的优势")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("更好地满足不同租户的个性化需求。")])]),s._v(" "),a("li",[a("p",[s._v("可以降低运维成本，减少硬件、网络等基础设施的投入。")])]),s._v(" "),a("li",[a("p",[s._v("节约开发成本，通过复用代码，快速上线新的租户实例。")])]),s._v(" "),a("li",[a("p",[s._v("增强了系统的可扩展性和可伸缩性，支持水平扩展，每个租户的数据和资源均可管理和控制。")])])]),s._v(" "),a("h3",{attrs:{id:"_3-实现多租户架构的技术选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-实现多租户架构的技术选择"}},[s._v("#")]),s._v(" 3. 实现多租户架构的技术选择")]),s._v(" "),a("p",[s._v("对于实现多租户架构技术不是最重要的最重要的是正确的架构思路。但是选择正确的技术可以更快地实现多租户架构。")]),s._v(" "),a("h2",{attrs:{id:"二、设计思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、设计思路"}},[s._v("#")]),s._v(" 二、设计思路")]),s._v(" "),a("h3",{attrs:{id:"_1-架构选型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-架构选型"}},[s._v("#")]),s._v(" 1. 架构选型")]),s._v(" "),a("p",[s._v("基于 Java 开发多租户应用推荐使用 Spring Boot 和 Spring Cloud。Spring Boot 能快速搭建应用并提供许多成熟的插件。Spring Cloud 则提供了许多实现微服务架构的工具和组件。")]),s._v(" "),a("h4",{attrs:{id:"_1-1-spring-boot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-spring-boot"}},[s._v("#")]),s._v(" 1.1 Spring Boot")]),s._v(" "),a("p",[s._v("使用 Spring Boot 可以简化项目的搭建过程自动配置许多常见的第三方库和组件，减少了开发人员的工作量。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@RestController\npublic class TenantController {\n\n    @GetMapping("/hello")\n    public String hello(@RequestHeader("tenant-id") String tenantId) {\n        return "Hello, " + tenantId;\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h4",{attrs:{id:"_1-2-spring-cloud"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-spring-cloud"}},[s._v("#")]),s._v(" 1.2 Spring Cloud")]),s._v(" "),a("p",[s._v("在架构多租户的系统时 Spring Cloud 会更加有用。Spring Cloud 提供了一些成熟的解决方案，如 Eureka、Zookeeper、Consul 等，以实现服务发现、负载均衡等微服务功能。")]),s._v(" "),a("p",[s._v("另外，如果你近期准备面试跳槽，建议在 Java 面试库小程序在线刷题，涵盖 2000+  道 Java 面试题，几乎覆盖了所有主流技术面试题。")]),s._v(" "),a("h3",{attrs:{id:"_2-数据库设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据库设计"}},[s._v("#")]),s._v(" 2. 数据库设计")]),s._v(" "),a("p",[s._v("在多租户环境中数据库必须为每个租户分别存储数据并确保数据隔离。我们通常使用以下两种方式实现：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("多个租户共享相同的数据库，每个表中都包含 tenant_id 这一列，用于区分不同租户的数据。")])]),s._v(" "),a("li",[a("p",[s._v("为每个租户创建单独的数据库，每个数据库内的表结构相同，但数据相互隔离。")])])]),s._v(" "),a("h3",{attrs:{id:"_3-应用多租户部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-应用多租户部署"}},[s._v("#")]),s._v(" 3. 应用多租户部署")]),s._v(" "),a("p",[s._v("为了实现多租户在应用部署时我们需要考虑以下两个问题。")]),s._v(" "),a("h4",{attrs:{id:"_3-1-应用隔离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-应用隔离"}},[s._v("#")]),s._v(" 3.1 应用隔离")]),s._v(" "),a("p",[s._v("在多租户环境中不同租户需要访问不同的资源，因此需要进行应用隔离。可以通过构建独立的容器或虚拟机、使用命名空间等方式实现。Docker 就是一种非常流行的隔离容器技术。")]),s._v(" "),a("h4",{attrs:{id:"_3-2-应用配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-应用配置"}},[s._v("#")]),s._v(" 3.2 应用配置")]),s._v(" "),a("p",[s._v("由于每个租户都有自己的配置需求因此需要为每个租户分别设置应用配置信息，例如端口号、SSL 证书等等。这些配置可以存储在数据库中，也可以存储在云配置中心中。")]),s._v(" "),a("h3",{attrs:{id:"_4-租户管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-租户管理"}},[s._v("#")]),s._v(" 4. 租户管理")]),s._v(" "),a("p",[s._v("在多租户系统中需要能够管理不同租户的数据和资源，同时需要为每个租户分配相应的权限。解决方案通常包括以下两部分。")]),s._v(" "),a("h4",{attrs:{id:"_4-1-租户信息维护"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-租户信息维护"}},[s._v("#")]),s._v(" 4.1 租户信息维护")]),s._v(" "),a("p",[s._v("租户信息的维护包括添加、修改、删除、查询等操作，要求能够根据租户名称或租户 ID 快速查找对应的租户信息。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("CREATE TABLE tenant (\n    id BIGINT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL UNIQUE,\n    description VARCHAR(255),\n    created_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h4",{attrs:{id:"_4-2-租户权限控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-租户权限控制"}},[s._v("#")]),s._v(" 4.2 租户权限控制")]),s._v(" "),a("p",[s._v("在多租户应用中必须为每个租户分别设置对系统资源的访问权限。例如，A 租户和 B 租户不能访问彼此的数据。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@EnableGlobalMethodSecurity(prePostEnabled = true)\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests()\n                .antMatchers("/api/tenant/**").hasRole("ADMIN")\n                .anyRequest().authenticated()\n                .and()\n                .formLogin();\n    }\n\n    @Autowired\n    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\n        auth.userDetailsService(userDetailsService())\n                .passwordEncoder(new BCryptPasswordEncoder())\n                .and()\n                .inMemoryAuthentication()\n                .withUser("admin")\n                .password(new BCryptPasswordEncoder().encode("123456"))\n                .roles("ADMIN");\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("h2",{attrs:{id:"三、技术实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、技术实现"}},[s._v("#")]),s._v(" 三、技术实现")]),s._v(" "),a("h3",{attrs:{id:"_1-spring-boot-中的多租户实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-spring-boot-中的多租户实现"}},[s._v("#")]),s._v(" 1. Spring Boot 中的多租户实现")]),s._v(" "),a("p",[s._v("在 Spring Boot 中可以通过多数据源和动态路由来实现多租户机制。")]),s._v(" "),a("h4",{attrs:{id:"_1-1-多数据源实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-多数据源实现"}},[s._v("#")]),s._v(" 1.1 多数据源实现")]),s._v(" "),a("p",[s._v("多数据源是指为不同的租户配置不同的数据源，使得每个租户都可以访问自己的独立数据。")]),s._v(" "),a("p",[s._v("具体实现方法如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@Configuration\npublic class DataSourceConfig {\n    @Bean(name = "dataSourceA")\n    @ConfigurationProperties(prefix = "spring.datasource.a")\n    public DataSource dataSourceA() {\n        return DataSourceBuilder.create().build();\n    }\n\n    @Bean(name = "dataSourceB")\n    @ConfigurationProperties(prefix = "spring.datasource.b")\n    public DataSource dataSourceB() {\n        return DataSourceBuilder.create().build();\n    }\n\n    @Bean(name = "dataSourceC")\n    @ConfigurationProperties(prefix = "spring.datasource.c")\n    public DataSource dataSourceC() {\n        return DataSourceBuilder.create().build();\n    }\n}\n\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("p",[s._v("以上代码是配置了三个数据源分别对应三个租户。然后在使用时，可以使用注解标记需要连接的数据源。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@Service\npublic class ProductService {\n    @Autowired\n    @Qualifier("dataSourceA")\n    private DataSource dataSource;\n\n    // ...\n}\n\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h4",{attrs:{id:"_1-2-动态路由实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-动态路由实现"}},[s._v("#")]),s._v(" 1.2 动态路由实现")]),s._v(" "),a("p",[s._v("动态路由是指根据请求的 URL 或参数动态地切换到对应租户的数据源。具体实现如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class DynamicDataSource extends AbstractRoutingDataSource {\n    @Override\n    protected Object determineCurrentLookupKey() {\n        return TenantContextHolder.getTenantId();\n    }\n}\n\n@Configuration\npublic class DataSourceConfig {\n    @Bean(name = "dataSource")\n    @ConfigurationProperties(prefix = "spring.datasource")\n    public DataSource dataSource() {\n        return DataSourceBuilder.create().type(DynamicDataSource.class).build();\n    }\n}\n\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("以上是动态路由的核心代码"),a("code",[s._v("DynamicDataSource")]),s._v("继承自"),a("code",[s._v("AbstractRoutingDataSource")]),s._v("，通过"),a("code",[s._v("determineCurrentLookupKey()")]),s._v("方法动态获得租户 ID，然后切换到对应的数据源。")]),s._v(" "),a("h3",{attrs:{id:"_2-spring-cloud-中的多租户实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-spring-cloud-中的多租户实现"}},[s._v("#")]),s._v(" 2. Spring Cloud 中的多租户实现")]),s._v(" "),a("p",[s._v("在 Spring Cloud 中可以通过服务注册与发现、配置中心、负载均衡等方式实现多租户机制。")]),s._v(" "),a("h4",{attrs:{id:"_2-1-服务注册与发现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-服务注册与发现"}},[s._v("#")]),s._v(" 2.1 服务注册与发现")]),s._v(" "),a("p",[s._v("使用 Spring Cloud 中的 Eureka 实现服务注册与发现。每个租户的服务都在注册中心以不同的应用名称进行注册，客户端可以通过服务名称来访问对应租户的服务。")]),s._v(" "),a("h4",{attrs:{id:"_2-2-配置中心"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-配置中心"}},[s._v("#")]),s._v(" 2.2 配置中心")]),s._v(" "),a("p",[s._v("使用 Spring Cloud Config 作为配置中心。配置文件以租户 ID 进行区分，客户端通过读取对应租户的配置文件来获取配置信息。")]),s._v(" "),a("h4",{attrs:{id:"_2-3-负载均衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-负载均衡"}},[s._v("#")]),s._v(" 2.3 负载均衡")]),s._v(" "),a("p",[s._v("使用 Spring Cloud Ribbon 作为负载均衡器。根据请求的 URL 或参数选择对应租户的服务实例进行请求转发。")]),s._v(" "),a("h4",{attrs:{id:"_2-4-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-api"}},[s._v("#")]),s._v(" 2.4 API")]),s._v(" "),a("p",[s._v("在 API 网关层面实现多租户机制根据请求的 URL 或参数判断所属租户，并转发到对应租户的服务实例。")]),s._v(" "),a("h2",{attrs:{id:"四、-应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、-应用场景"}},[s._v("#")]),s._v(" 四、 应用场景")]),s._v(" "),a("h3",{attrs:{id:"_1-私有云环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-私有云环境"}},[s._v("#")]),s._v(" 1. 私有云环境")]),s._v(" "),a("p",[s._v("私有云环境指的是由企业自行搭建的云环境，不对外提供服务，主要应用于企业内部的数据存储、管理、共享和安全控制。相较于公有云，私有云的优点在于可以更好地保护企业核心数据，同时也能够满足企业对于数据安全性和可控性的要求。")]),s._v(" "),a("h3",{attrs:{id:"_2-公有云环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-公有云环境"}},[s._v("#")]),s._v(" 2. 公有云环境")]),s._v(" "),a("p",[s._v("公有云环境指的是由云服务商搭建并对外提供服务的云环境，用户可以根据需要购买相应的云服务，如云存储、云计算、云数据库等。相较于私有云，公有云的优点在于具有成本低廉、弹性伸缩、全球化部署等特点，能够更好地满足企业快速发展的需求。")]),s._v(" "),a("h3",{attrs:{id:"_3-企业级应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-企业级应用"}},[s._v("#")]),s._v(" 3. 企业级应用")]),s._v(" "),a("p",[s._v("企业级应用是指面向企业客户的应用程序，主要包括 ERP、CRM、OA 等一系列应用系统。这类应用的特点在于功能强大、流程复杂、数据量大，需要满足企业的高效率、高可靠性、高安全性和易维护性等要求。在云计算环境下，企业可以将这些应用部署在私有云或公有云上，减少了硬件设备的投入和维护成本，提高了管理效率。")]),s._v(" "),a("h2",{attrs:{id:"五、实现步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、实现步骤"}},[s._v("#")]),s._v(" 五、实现步骤")]),s._v(" "),a("h3",{attrs:{id:"_1-搭建-spring-boot-和-spring-cloud-环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-搭建-spring-boot-和-spring-cloud-环境"}},[s._v("#")]),s._v(" 1. 搭建 Spring Boot 和 Spring Cloud 环境")]),s._v(" "),a("p",[s._v("首先需要在 Maven 项目中引入以下依赖：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\x3c!-- Spring Boot --\x3e\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n\n\x3c!-- Spring Cloud --\x3e\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-dependencies</artifactId>\n    <version>2020.0.3</version>\n    <type>pom</type>\n    <scope>import</scope>\n</dependency>\n\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("然后需要在 application.yml 中配置相应的参数，如下所示：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('spring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/appdb?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai\n    username: root\n    password: 123456\n\nmybatis:\n  type-aliases-package: com.example.demo.model\n  mapper-locations: classpath:mapper/*.xml\n\nserver:\n  port: 8080\n\neureka:\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:8761/eureka/\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: "*"\n\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("p",[s._v("其中"),a("code",[s._v("datasource.url")]),s._v("为数据库连接的 URL，username 和 password 为数据库连接的账号和密码；"),a("code",[s._v("server.port")]),s._v("为 Spring Boot 应用启动的端口；"),a("code",[s._v("eureka.client.serviceUrl.defaultZone")]),s._v("为 Eureka 服务注册中心的 URL。")]),s._v(" "),a("h3",{attrs:{id:"_2-修改数据库设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-修改数据库设计"}},[s._v("#")]),s._v(" 2. 修改数据库设计")]),s._v(" "),a("p",[s._v("接下来需要对数据库进行相应的修改，以支持多租户部署。具体来说，我们需要在数据库中添加一个与租户相关的字段，以便在应用中区分不同的租户。")]),s._v(" "),a("h3",{attrs:{id:"_3-实现应用多租户部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-实现应用多租户部署"}},[s._v("#")]),s._v(" 3. 实现应用多租户部署")]),s._v(" "),a("p",[s._v("接着需要在代码中实现应用的多租户部署功能。具体来说，我们需要为每个租户实例化对应的 Spring Bean，并根据租户 ID 将请求路由到相应的 Bean 中去处理。")]),s._v(" "),a("p",[s._v("以下是一个简单的实现示例：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@Configuration\npublic class MultiTenantConfig {\n \n    // 提供对应租户的数据源\n    @Bean\n    public DataSource dataSource(TenantRegistry tenantRegistry) {\n        return new TenantAwareDataSource(tenantRegistry);\n    }\n \n    // 多租户Session工厂\n    @Bean(name = "sqlSessionFactory")\n    public SqlSessionFactory sqlSessionFactory(DataSource dataSource)\n            throws Exception {\n        SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();\n        sessionFactory.setDataSource(dataSource);\n        return sessionFactory.getObject();\n    }\n \n    // 动态切换租户\n    @Bean\n    public MultiTenantInterceptor multiTenantInterceptor(TenantResolver tenantResolver) {\n        MultiTenantInterceptor interceptor = new MultiTenantInterceptor();\n        interceptor.setTenantResolver(tenantResolver);\n        return interceptor;\n    }\n \n    // 注册拦截器\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(multiTenantInterceptor());\n    }\n \n    // 注册租户信息\n    @Bean\n    public TenantRegistry tenantRegistry() {\n        return new TenantRegistryImpl();\n    }\n     \n    // 解析租户ID\n    @Bean\n    public TenantResolver tenantResolver() {\n        return new HeaderTenantResolver();\n    }\n \n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br")])]),a("p",[s._v("其中"),a("code",[s._v("MultiTenantConfig")]),s._v("是多租户部署的核心配置类，它提供了对应租户数据源、多租户 Session 工厂、动态切换租户等功能。")]),s._v(" "),a("h3",{attrs:{id:"_4-实现租户管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-实现租户管理"}},[s._v("#")]),s._v(" 4. 实现租户管理")]),s._v(" "),a("p",[s._v("最后需要实现一个租户管理的功能，以便在系统中管理不同的租户。具体来说，我们可以使用 Spring Cloud 的服务注册与发现组件 Eureka 来注册每个租户的实例，并在管理界面中进行相应的操作。另外，我们还需要为每个租户提供一个独立的数据库，以保证数据隔离性。")]),s._v(" "),a("h2",{attrs:{id:"六、小结回顾"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、小结回顾"}},[s._v("#")]),s._v(" 六、小结回顾")]),s._v(" "),a("p",[s._v("本文详细介绍了如何使用 Spring Boot 和 Spring Cloud 实现一个支持多租户部署的应用。主要包括搭建 Spring Boot 和 Spring Cloud 环境、修改数据库设计、实现应用多租户部署、实现租户管理等方面。")])])}),[],!1,null,null,null);a.default=t.exports}}]);