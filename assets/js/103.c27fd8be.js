(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{998:function(s,e,t){"use strict";t.r(e);var n=t(4),a=Object(n.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"_1-curator-客户端的依赖包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-curator-客户端的依赖包"}},[s._v("#")]),s._v(" 1. Curator 客户端的依赖包")]),s._v(" "),e("p",[s._v("curator 是 Netflix 公司开源的⼀套 Zookeeper 客户端框架，和 ZKClient ⼀样，Curator 解决了很多 Zookeeper 客户端⾮常底层的细节开发工作，包括连接重连，反复注册 Watcher 和 NodeExistsException 异常等，是最流行的 Zookeeper 客户端之⼀。从编码风格上来讲，它提供了基于 Fluent 的编程风格⽀持")]),s._v(" "),e("p",[s._v("打开"),e("a",{attrs:{href:"https://curator.apache.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Curator 的官网"),e("OutboundLink")],1),s._v("，我们可以看到，Curator 包含了以下几个包：")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("curator-framework：对 zookeeper 的底层 api 的一些封装；")])]),s._v(" "),e("li",[e("p",[s._v("curator-client：提供一些客户端的操作，例如重试策略等；")])]),s._v(" "),e("li",[e("p",[s._v("curator-recipes：封装了一些高级特性，如：Cache 事件监听、选举、分布式锁、分布式计数器、分布式 Barrier 等。")])])]),s._v(" "),e("p",[s._v("Maven 依赖 "),e("a",{attrs:{href:"https://central.sonatype.com/artifact/org.apache.curator/curator-framework/",target:"_blank",rel:"noopener noreferrer"}},[s._v("最新版查看"),e("OutboundLink")],1)]),s._v(" "),e("div",{staticClass:"language-xml line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-xml"}},[e("code",[s._v("  \t\t"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("dependency")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n            "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("groupId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("org.apache.curator"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("groupId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n            "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("artifactId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("curator-framework"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("artifactId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n            "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("version")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("5.4.0"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("version")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("dependency")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h2",{attrs:{id:"_1-2-curator-创建会话"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-curator-创建会话"}},[s._v("#")]),s._v(" 1.2. Curator 创建会话")]),s._v(" "),e("p",[s._v("使用 curator-framework 包中的工厂类 CuratorFrameworkFactory 中的静态方法 newClient，来创建客户端会话。")]),s._v(" "),e("p",[s._v("1.使用 CuratorFramework 这个工⼚类的两个静态方法来创建⼀个客户端")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public static CuratorFramework newClient(String connectString, RetryPolicy retryPolicy)\n\npublic static CuratorFramework newClient(String connectString, int sessionTimeoutMs, int connectionTimeoutMs, RetryPolicy retryPolicy)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("其中参数 RetryPolicy 提供重试策略的接口，可以让用户实现⾃定义的重试策略，默认提供了以下实现， 分别为 ExponentialBackoffRetry（基于 backoff 的重连策略）、RetryNTimes（重连 N 次策略）、 RetryForever（永远重试策略）")]),s._v(" "),e("p",[s._v("2.通过调用 CuratorFramework 中的 start()方法来启动会话")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000,3);\nCuratorFramework client =\nCuratorFrameworkFactory.newClient("127.0.0.1:2181",retryPolicy);\nclient.start();\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000,3);\nCuratorFramework client = CuratorFrameworkFactory.newClient("127.0.0.1:2181",\n 5000,1000,retryPolicy);\nclient.start();\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("其实进⼀步查看源代码可以得知，其实这两种方法内部实现⼀样，只是对外包装成不同的方法。它们的 底层都是通过第三个方法 builder 来实现的")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000,3);\nprivate static CuratorFramework Client = CuratorFrameworkFactory.builder()\n     .connectString("server1:2181,server2:2181,server3:2181")\n     .sessionTimeoutMs(50000)\n     .connectionTimeoutMs(30000)\n     .retryPolicy(retryPolicy)\n     .build();\nclient.start();\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("参数：")]),s._v(" "),e("ul",[e("li",[s._v("connectString：zk 的 server 地址，多个 server 之间使用英文逗号分隔开")]),s._v(" "),e("li",[s._v("connectionTimeoutMs：连接超时时间，如上是 30s，默认是 15s")]),s._v(" "),e("li",[s._v("sessionTimeoutMs：会话超时时间，如上是 50s，默认是 60s")]),s._v(" "),e("li",[s._v("retryPolicy：失败重试策略\n"),e("ul",[e("li",[s._v("ExponentialBackoffRetry：构造器含有三个参数 "),e("code",[s._v("ExponentialBackoffRetry(int baseSleepTimeMs, int maxRetries, int maxSleepMs)")]),s._v(" "),e("ul",[e("li",[s._v("baseSleepTimeMs：初始的 sleep 时间，用于计算之后的每次重试的 sleep 时间，\n"),e("ul",[e("li",[s._v("计算公式：当前 sleep 时间=baseSleepTimeMs*Math.max(1, random.nextInt(1<<(retryCount+1)))")]),s._v(" "),e("li",[s._v("maxRetries：最⼤重试次数 maxSleepMs：最⼤ sleep 时间，如果上述的当前 sleep 计算出来⽐这个⼤，那么 sleep 用 这个时间，默认的最⼤时间是 Integer.MAX_VALUE 毫秒。")])])])])]),s._v(" "),e("li",[s._v("其他，查看 org.apache.curator.RetryPolicy 接口的实现类")])])]),s._v(" "),e("li",[s._v("start()：完成会话的创建")])]),s._v(" "),e("p",[s._v("代码如下：")]),s._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ZkClientFactory")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * @param connectionString    zk的连接地址\n     * @param retryPolicy         重试策略\n     * @param connectionTimeoutMs 连接\n     * @param sessionTimeoutMs\n     * @return CuratorFramework 实例\n     */")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CuratorFramework")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("createWithOptions")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n            "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" connectionString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RetryPolicy")]),s._v(" retryPolicy"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" namespace"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" connectionTimeoutMs"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sessionTimeoutMs"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// builder 模式创建 CuratorFramework 实例")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CuratorFrameworkFactory")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("builder")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("connectString")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("connectionString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("retryPolicy")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("retryPolicy"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("connectionTimeoutMs")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("connectionTimeoutMs"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sessionTimeoutMs")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sessionTimeoutMs"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("namespace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("namespace"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 其他的创建选项")]),s._v("\n                "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("build")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br")])]),e("p",[s._v("需要注意的是 namespace 含有隔离命名空间，即客户端对 Zookeeper 上数据节点的任何操作都是相对 namespace ⽬录进行的，这有利于实现不同的 Zookeeper 的业务之间的隔离")]),s._v(" "),e("h2",{attrs:{id:"_1-3-crud-之-create-创建节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-crud-之-create-创建节点"}},[s._v("#")]),s._v(" 1.3. CRUD 之 Create 创建节点")]),s._v(" "),e("p",[s._v("使用 create()方法，最后使用 forPath 带上需要创建的节点路径。")]),s._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[s._v("client"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("create")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("creatingParentContainersIfNeeded")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("withMode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CreateMode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("EPHEMERAL")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("forPath")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"path"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"init"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBytes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[e("strong",[s._v("Zookeeper 的节点创建模式：")])]),s._v(" "),e("p",[s._v("使用 withMode（）方法，设置节点的类型。zookeeper 节点有四种类型：")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("（1）PERSISTENT 持久节点")])]),s._v(" "),e("li",[e("p",[s._v("（2）PERSISTENT_SEQUENTIAL 持久顺序节点")])]),s._v(" "),e("li",[e("p",[s._v("（3）PHEMERAL 临时节")])]),s._v(" "),e("li",[e("p",[s._v("（4）EPHEMERAL_SEQUENTIAL 临时顺序节点")])])]),s._v(" "),e("p",[s._v("下面详细介绍一下四种节点的区别和联系。")]),s._v(" "),e("p",[s._v("（1）持久节点（PERSISTENT）")]),s._v(" "),e("p",[s._v("所谓持久节点，是指在节点创建后，就一直存在，直到有删除操作来主动清除这个节点。持久节点的生命周期是永久有效，不会因为创建该节点的客户端会话失效而消失。")]),s._v(" "),e("p",[s._v("（2）持久顺序节点（PERSISTENT_SEQUENTIAL）")]),s._v(" "),e("p",[s._v("这类节点的生命周期和持久节点是一致的。额外的特性是，在 ZK 中，每个父节点会为他的第一级子节点维护一份次序，会记录每个子节点创建的先后顺序。如果在创建子节点的时候，可以设置这个属性，那么在创建节点过程中，ZK 会自动为给定节点名加上一个表示次序的数字后缀，作为新的节点名。这个次序后缀的范围是整型的最大值。")]),s._v(" "),e("p",[s._v("比如，在创建节点的时候只需要传入节点 “/test*”，这样之后，zookeeper 自动会给”test*”后面补充数字次序。")]),s._v(" "),e("p",[s._v("（3）临时节点（EPHEMERAL）")]),s._v(" "),e("p",[s._v("和持久节点不同的是，临时节点的生命周期和客户端会话绑定。也就是说，如果客户端会话失效，那么这个节点就会自动被清除掉。注意，这里提到的是会话失效，而非连接断开。这里还要注意一件事，就是当你客户端会话失效后，所产生的节点也不是一下子就消失了，也要过一段时间，大概是 10 秒以内，可以试一下，本机操作生成节点，在服务器端用命令来查看当前的节点数目，你会发现客户端已经 stop，但是产生的节点还在。")]),s._v(" "),e("p",[s._v("另外，在临时节点下面不能创建子节点。")]),s._v(" "),e("p",[s._v("（4）临时顺序节点（EPHEMERAL_SEQUENTIAL）")]),s._v(" "),e("p",[s._v("此节点是属于临时节点，不过带有顺序，客户端会话结束节点就消失。")]),s._v(" "),e("p",[e("strong",[s._v("创建一个节点，初始内容为空")])]),s._v(" "),e("div",{staticClass:"language-css line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-css"}},[e("code",[s._v("client."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("create")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("forPath")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"path"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("注意：如果没有设置节点属性，节点创建模式默认为持久化节点，内容默认为空")]),s._v(" "),e("p",[e("strong",[s._v("创建一个节点，附带初始化内容")])]),s._v(" "),e("div",{staticClass:"language-css line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-css"}},[e("code",[s._v("client."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("create")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("forPath")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"path"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"init"')]),s._v("."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBytes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("创建一个节点，指定创建模式（临时节点），内容为空")])]),s._v(" "),e("div",{staticClass:"language-css line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-css"}},[e("code",[s._v("client."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("create")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("withMode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("CreateMode.EPHEMERAL"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("forPath")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"path"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("创建一个节点，指定创建模式（临时节点），附带初始化内容")])]),s._v(" "),e("div",{staticClass:"language-css line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-css"}},[e("code",[s._v("client."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("create")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("withMode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("CreateMode.EPHEMERAL"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("forPath")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"path"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"init"')]),s._v("."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBytes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("创建一个节点，指定创建模式（临时节点），附带初始化内容，并且自动递归创建父节点")])]),s._v(" "),e("p",[s._v("这个 creatingParentContainersIfNeeded()接口非常有用，因为一般情况开发人员在创建一个子节点必须判断它的父节点是否存在，如果不存在直接创建会抛出 NoNodeException，使用 creatingParentContainersIfNeeded()之后 Curator 能够自动递归创建所有所需的父节点。")]),s._v(" "),e("h2",{attrs:{id:"_1-4-crud-之-read-获取节点数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-crud-之-read-获取节点数据"}},[s._v("#")]),s._v(" 1.4. CRUD 之 Read 获取节点数据")]),s._v(" "),e("p",[s._v("与节点读取的有关的方法，主要有三个：")]),s._v(" "),e("p",[s._v("（1）首先是判断节点是否存在，使用 checkExists 方法。")]),s._v(" "),e("p",[s._v("（2）其次是获取节点的数据，使用 getData 方法。")]),s._v(" "),e("p",[s._v("（3）最后是获取子节点列表，使用 getChildren 方法。")]),s._v(" "),e("p",[s._v("演示代码如下：")]),s._v(" "),e("p",[e("strong",[s._v("读取一个节点的数据内容")])]),s._v(" "),e("div",{staticClass:"language-css line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-css"}},[e("code",[s._v("client."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("getData")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("forPath")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"path"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("注意，此方法返的返回值是 byte[ ];")]),s._v(" "),e("p",[e("strong",[s._v("读取一个节点的数据内容，同时获取到该节点的 stat")])]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("Stat "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("stat")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" new Stat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nclient.getData"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(".storingStatIn"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("stat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(".forPath"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"path"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h2",{attrs:{id:"_1-5-crud-之-update-更新节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-crud-之-update-更新节点"}},[s._v("#")]),s._v(" 1.5. CRUD 之 update 更新节点")]),s._v(" "),e("p",[e("strong",[s._v("更新一个节点的数据内容")])]),s._v(" "),e("div",{staticClass:"language-css line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-css"}},[e("code",[s._v("client."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("setData")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("forPath")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"path"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"data"')]),s._v("."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBytes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("注意：该接口会返回一个 Stat 实例")]),s._v(" "),e("p",[e("strong",[s._v("更新一个节点的数据内容，强制指定版本进行更新")])]),s._v(" "),e("div",{staticClass:"language-css line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-css"}},[e("code",[s._v("client."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("setData")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("withVersion")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("10086"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("forPath")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"path"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"data"')]),s._v("."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBytes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("检查节点是否存在")])]),s._v(" "),e("div",{staticClass:"language-css line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-css"}},[e("code",[s._v("client."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("checkExists")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("forPath")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"path"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("注意：该方法返回一个 Stat 实例，用于检查 ZNode 是否存在的操作. 可以调用额外的方法(监控或者后台处理)并在最后调用 forPath( )指定要操作的 ZNode")]),s._v(" "),e("p",[e("strong",[s._v("获取某个节点的所有子节点路径")])]),s._v(" "),e("div",{staticClass:"language-css line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-css"}},[e("code",[s._v("client."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("getChildren")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("forPath")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"path"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("注意：该方法的返回值为 List"),e("String",[s._v(",获得 ZNode 的子节点 Path 列表。 可以调用额外的方法(监控、后台处理或者获取状态 watch, background or get stat) 并在最后调用 forPath()指定要操作的父 ZNode")])],1),s._v(" "),e("p",[s._v("异步更新的代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("client.setData().inBackground(callback)\n                .forPath(zkPath, payload);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h2",{attrs:{id:"_1-6-crud-之-delete-删除节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-crud-之-delete-删除节点"}},[s._v("#")]),s._v(" 1.6. CRUD 之 delete 删除节点")]),s._v(" "),e("p",[e("strong",[s._v("删除一个节点")])]),s._v(" "),e("div",{staticClass:"language-cpp line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[s._v("client"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("delete")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("forPath")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"path"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("注意，此方法只能删除"),e("strong",[s._v("叶子节点")]),s._v("，否则会抛出异常。")]),s._v(" "),e("p",[e("strong",[s._v("删除一个节点，并且递归删除其所有的子节点")])]),s._v(" "),e("div",{staticClass:"language-css line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-css"}},[e("code",[s._v("client."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("delete")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("deletingChildrenIfNeeded")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("forPath")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"path"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("删除一个节点，强制指定版本进行删除")])]),s._v(" "),e("div",{staticClass:"language-css line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-css"}},[e("code",[s._v("client."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("delete")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("withVersion")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("10086"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("forPath")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"path"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("删除一个节点，强制保证删除")])]),s._v(" "),e("div",{staticClass:"language-css line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-css"}},[e("code",[s._v("client."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("delete")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("guaranteed")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("forPath")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"path"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("guaranteed()接口是一个保障措施，只要客户端会话有效，那么 Curator 会在后台持续进行删除操作，直到删除节点成功。")]),s._v(" "),e("p",[s._v("**注意：**上面的多个流式接口是可以自由组合的，例如：")]),s._v(" "),e("div",{staticClass:"language-css line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-css"}},[e("code",[s._v("client."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("delete")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("guaranteed")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("deletingChildrenIfNeeded")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("withVersion")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("10086"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("."),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("forPath")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"path"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"_1-7-异步接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-异步接口"}},[s._v("#")]),s._v(" 1.7 异步接口")]),s._v(" "),e("p",[s._v("上面提到的创建、删除、更新、读取等方法都是同步的，Curator 提供异步接口，引入了"),e("strong",[s._v("BackgroundCallback")]),s._v("接口用于处理异步接口调用之后服务端返回的结果信息。"),e("strong",[s._v("BackgroundCallback")]),s._v("接口中一个重要的回调值为 CuratorEvent，里面包含事件类型、响应吗和节点的详细信息。")]),s._v(" "),e("p",[e("strong",[s._v("CuratorEventType")])]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[s._v("事件类型")]),s._v(" "),e("th",{staticStyle:{"text-align":"center"}},[s._v("对应 CuratorFramework 实例的方法")])])]),s._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[s._v("CREATE")]),s._v(" "),e("td",{staticStyle:{"text-align":"center"}},[s._v("#create()")])]),s._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[s._v("DELETE")]),s._v(" "),e("td",{staticStyle:{"text-align":"center"}},[s._v("#delete()")])]),s._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[s._v("EXISTS")]),s._v(" "),e("td",{staticStyle:{"text-align":"center"}},[s._v("#checkExists()")])]),s._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[s._v("GET_DATA")]),s._v(" "),e("td",{staticStyle:{"text-align":"center"}},[s._v("#getData()")])]),s._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[s._v("SET_DATA")]),s._v(" "),e("td",{staticStyle:{"text-align":"center"}},[s._v("#setData()")])]),s._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[s._v("CHILDREN")]),s._v(" "),e("td",{staticStyle:{"text-align":"center"}},[s._v("#getChildren()")])]),s._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[s._v("SYNC")]),s._v(" "),e("td",{staticStyle:{"text-align":"center"}},[s._v("#sync(String,Object)")])]),s._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[s._v("GET_ACL")]),s._v(" "),e("td",{staticStyle:{"text-align":"center"}},[s._v("#getACL()")])]),s._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[s._v("SET_ACL")]),s._v(" "),e("td",{staticStyle:{"text-align":"center"}},[s._v("#setACL()")])]),s._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[s._v("WATCHED")]),s._v(" "),e("td",{staticStyle:{"text-align":"center"}},[s._v("#Watcher(Watcher)")])]),s._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[s._v("CLOSING")]),s._v(" "),e("td",{staticStyle:{"text-align":"center"}},[s._v("#close()")])])])]),s._v(" "),e("p",[e("strong",[s._v("响应码(#getResultCode())")])]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[s._v("响应码")]),s._v(" "),e("th",{staticStyle:{"text-align":"center"}},[s._v("意义")])])]),s._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[s._v("0")]),s._v(" "),e("td",{staticStyle:{"text-align":"center"}},[s._v("OK，即调用成功")])]),s._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[s._v("-4")]),s._v(" "),e("td",{staticStyle:{"text-align":"center"}},[s._v("ConnectionLoss，即客户端与服务端断开连接")])]),s._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[s._v("-110")]),s._v(" "),e("td",{staticStyle:{"text-align":"center"}},[s._v("NodeExists，即节点已经存在")])]),s._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[s._v("-112")]),s._v(" "),e("td",{staticStyle:{"text-align":"center"}},[s._v("SessionExpired，即会话过期")])])])]),s._v(" "),e("p",[s._v("一个异步创建节点的例子如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('Executor executor = Executors.newFixedThreadPool(2);\nclient.create()\n     .creatingParentsIfNeeded()\n     .withMode(CreateMode.EPHEMERAL)\n     .inBackground((curatorFramework, curatorEvent) -> {\n     System.out.println(String.format("eventType:%s,resultCode:%s",curatorEvent.getType(),curatorEvent.getResultCode()));\n     },executor)\n     .forPath("path");\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("注意：如果#inBackground()方法不指定 executor，那么会默认使用 Curator 的 EventThread 去进行异步处理。")]),s._v(" "),e("h1",{attrs:{id:"_2-curator-食谱-高级特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-curator-食谱-高级特性"}},[s._v("#")]),s._v(" 2. Curator 食谱(高级特性)")]),s._v(" "),e("p",[e("strong",[s._v("提醒：首先你必须添加 curator-recipes 依赖，下文仅仅对 recipes 一些特性的使用进行解释和举例，不打算进行源码级别的探讨")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("  \t\t<dependency>\n            <groupId>org.apache.curator</groupId>\n            <artifactId>curator-recipes</artifactId>\n            <version>5.4.0</version>\n        </dependency>\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("重要提醒：强烈推荐使用 ConnectionStateListener 监控连接的状态，当连接状态为 LOST，curator-recipes 下的所有 Api 将会失效或者过期，尽管后面所有的例子都没有使用到 ConnectionStateListener。")]),s._v(" "),e("h2",{attrs:{id:"_2-1-缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-缓存"}},[s._v("#")]),s._v(" 2.1 缓存")]),s._v(" "),e("p",[s._v("Zookeeper 原生支持通过注册 Watcher 来进行事件监听，但是开发者需要反复注册(Watcher 只能单次注册单次使用)。Cache 是 Curator 中对事件监听的包装，"),e("strong",[s._v("可以看作是对事件监听的本地缓存视图")]),s._v("，能够自动为开发者"),e("strong",[s._v("处理反复注册监听")]),s._v("。Curator 提供了三种 Watcher(Cache)来监听结点的变化。")]),s._v(" "),e("h3",{attrs:{id:"_2-1-1-path-cache"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-path-cache"}},[s._v("#")]),s._v(" 2.1.1 Path Cache")]),s._v(" "),e("p",[s._v("Path Cache 用来监控一个"),e("strong",[s._v("ZNode 的子节点")]),s._v(". 当一个子节点增加， 更新，删除时， Path Cache 会改变它的状态， 会包含最新的子节点， 子节点的数据和状态，而状态的更变将通过 PathChildrenCacheListener 通知。")]),s._v(" "),e("p",[s._v("实际使用时会涉及到四个类：")]),s._v(" "),e("ul",[e("li",[s._v("PathChildrenCache")]),s._v(" "),e("li",[s._v("PathChildrenCacheEvent")]),s._v(" "),e("li",[s._v("PathChildrenCacheListener")]),s._v(" "),e("li",[s._v("ChildData")])]),s._v(" "),e("p",[s._v("通过下面的构造函数创建 Path Cache:")]),s._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PathChildrenCache")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CuratorFramework")]),s._v(" client"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" cacheData"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("想使用 cache，必须调用它的"),e("code",[s._v("start")]),s._v("方法，使用完后调用"),e("code",[s._v("close")]),s._v("方法。 可以设置 StartMode 来实现启动的模式")]),s._v(" "),e("p",[s._v("StartMode 有下面几种：")]),s._v(" "),e("ol",[e("li",[s._v("NORMAL：正常初始化。")]),s._v(" "),e("li",[s._v("BUILD_INITIAL_CACHE：在调用 "),e("code",[s._v("start()")]),s._v(" 之前会调用 "),e("code",[s._v("rebuild()")]),s._v("。")]),s._v(" "),e("li",[s._v("POST_INITIALIZED_EVENT： 当 Cache 初始化数据后发送一个 PathChildrenCacheEvent.Type#INITIALIZED 事件")])]),s._v(" "),e("p",[e("code",[s._v("public void addListener(PathChildrenCacheListener listener)")]),s._v(" 可以增加 listener 监听缓存的变化。")]),s._v(" "),e("p",[e("code",[s._v("getCurrentData()")]),s._v(" 方法返回一个 "),e("code",[s._v("List")]),s._v(" 对象，可以遍历所有的子节点。")]),s._v(" "),e("p",[e("strong",[s._v("设置/更新、移除其实是使用 client (CuratorFramework)来操作, 不通过 PathChildrenCache 操作：")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('\t@Test\n    public void testPathCache() throws Exception {\n\n\n        PathChildrenCache cache = new PathChildrenCache(client, PATH, true);\n        cache.start();\n        PathChildrenCacheListener cacheListener = (client1, event) -> {\n            System.out.println("事件类型：" + event.getType());\n            ChildData data = event.getData();\n            if (null != data) {\n                System.out.println("节点数据：" + data.getPath() + " = " + new String(data.getData()));\n            }\n        };\n        cache.getListenable().addListener(cacheListener);\n        client.create().creatingParentsIfNeeded().forPath(PATH + "/test01", "01".getBytes());\n        Thread.sleep(10);\n        client.create().creatingParentsIfNeeded().forPath(PATH + "/test02", "02".getBytes());\n        Thread.sleep(10);\n        client.setData().forPath(PATH + "/test01", "01_V2".getBytes());\n        Thread.sleep(10);\n        for (ChildData data : cache.getCurrentData()) {\n            System.out.println("getCurrentData:" + data.getPath() + " = " + new String(data.getData()));\n        }\n        client.delete().forPath(PATH + "/test01");\n        Thread.sleep(10);\n        client.delete().forPath(PATH + "/test02");\n        Thread.sleep(1000 * 5);\n        cache.close();\n        client.close();\n        System.out.println("OK!");\n    }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br")])]),e("p",[s._v("**注意：**如果 new PathChildrenCache(client, PATH, true)中的参数 cacheData 值设置为 false，则示例中的 event.getData().getData()、data.getData()将返回 null，cache 将不会缓存节点数据。")]),s._v(" "),e("p",[s._v("**注意：**示例中的 Thread.sleep(10)可以注释掉，但是注释后事件监听的触发次数会不全，这可能与 PathCache 的实现原理有关，不能太过频繁的触发事件！")]),s._v(" "),e("h3",{attrs:{id:"_2-1-2-node-cache"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-node-cache"}},[s._v("#")]),s._v(" 2.1.2 node Cache")]),s._v(" "),e("p",[s._v("Node Cache 与 Path Cache 类似，Node Cache 只是监听某一个特定的节点。它涉及到下面的三个类：")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("NodeCache")]),s._v(" - Node Cache 实现类")]),s._v(" "),e("li",[e("code",[s._v("NodeCacheListener")]),s._v(" - 节点监听器")]),s._v(" "),e("li",[e("code",[s._v("ChildData")]),s._v(" - 节点数据")])]),s._v(" "),e("p",[s._v("**注意：**使用 cache，依然要调用它的"),e("code",[s._v("start()")]),s._v("方法，使用完后调用"),e("code",[s._v("close()")]),s._v("方法。")]),s._v(" "),e("p",[s._v("getCurrentData()将得到节点当前的状态，通过它的状态可以得到当前的值。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('\t@Test\n    public void testNodeCache() throws Exception {\n\n        client.create().creatingParentsIfNeeded().forPath(PATH);\n        final NodeCache cache = new NodeCache(client, PATH);\n        NodeCacheListener listener = () -> {\n            ChildData data = cache.getCurrentData();\n            if (null != data) {\n                System.out.println("节点数据：" + new String(data.getData()));\n            } else {\n                System.out.println("节点被删除!");\n            }\n        };\n        cache.getListenable().addListener(listener);\n        cache.start();\n        client.setData().forPath(PATH, "01".getBytes());\n        Thread.sleep(100);\n        client.setData().forPath(PATH, "02".getBytes());\n        Thread.sleep(100);\n        client.delete().deletingChildrenIfNeeded().forPath(PATH);\n        Thread.sleep(1000 * 2);\n        cache.close();\n        client.close();\n        System.out.println("OK!");\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br")])]),e("p",[s._v("**注意：**示例中的 Thread.sleep(10)可以注释，但是注释后事件监听的触发次数会不全，这可能与 NodeCache 的实现原理有关，不能太过频繁的触发事件！")]),s._v(" "),e("p",[s._v("**注意：**NodeCache 只能监听一个节点的状态变化。")]),s._v(" "),e("h3",{attrs:{id:"_2-1-3-tree-cache"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-3-tree-cache"}},[s._v("#")]),s._v(" 2.1.3 Tree Cache")]),s._v(" "),e("p",[s._v("Tree Cache 可以监控整个树上的所有节点(本节点和子节点)，类似于 PathCache 和 NodeCache 的组合，主要涉及到下面四个类：")]),s._v(" "),e("ul",[e("li",[s._v("TreeCache - Tree Cache 实现类")]),s._v(" "),e("li",[s._v("TreeCacheListener - 监听器类")]),s._v(" "),e("li",[s._v("TreeCacheEvent - 触发的事件类")]),s._v(" "),e("li",[s._v("ChildData - 节点数据")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('\t@Test\n    public void testTreeCache() throws Exception {\n\n\n        client.create().creatingParentsIfNeeded().forPath(PATH);\n\n        TreeCache cache = new TreeCache(client, PATH);\n        TreeCacheListener listener = (client1, event) -> {\n            byte[] bytes = client.getData().forPath(PATH);\n            System.out.println("bytes = " + bytes);\n            System.out.println("事件类型：" + event.getType() +\n                    " | 路径：" + (null != event.getData() ? event.getData().getPath() : null));\n        };\n        cache.getListenable().addListener(listener);\n        cache.start();\n        client.setData().forPath(PATH, "01".getBytes());\n        Thread.sleep(100);\n        client.setData().forPath(PATH, "02".getBytes());\n        Thread.sleep(100);\n\n        client.create().forPath(PATH + "/SubTree", "SubTree".getBytes());\n        client.setData().forPath(PATH + "/SubTree", "00PATHSubTree".getBytes());\n        Thread.sleep(100);\n        client.delete().deletingChildrenIfNeeded().forPath(PATH);\n        Thread.sleep(1000 * 2);\n        cache.close();\n        client.close();\n        System.out.println("OK!");\n    }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br")])]),e("blockquote",[e("p",[s._v("**注意：**TreeCache 在初始化(调用"),e("code",[s._v("start()")]),s._v("方法)的时候会回调"),e("code",[s._v("TreeCacheListener")]),s._v("实例一个事 TreeCacheEvent，而回调的 TreeCacheEvent 对象的 Type 为 INITIALIZED，ChildData 为 null，此时"),e("code",[s._v("event.getData().getPath()")]),s._v("很有可能导致空指针异常，这里应该主动处理并避免这种情况。")])]),s._v(" "),e("h1",{attrs:{id:"_3-leader-选举"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-leader-选举"}},[s._v("#")]),s._v(" 3. Leader 选举")]),s._v(" "),e("p",[s._v("在分布式计算中， "),e("strong",[s._v("leader elections")]),s._v("是很重要的一个功能， 这个选举过程是这样子的： 指派一个进程作为组织者，将任务分发给各节点。 在任务开始前， 哪个节点都不知道谁是 leader(领导者)或者 coordinator(协调者). 当选举算法开始执行后， 每个节点最终会得到一个唯一的节点作为任务 leader. 除此之外， 选举还经常会发生在 leader 意外宕机的情况下，新的 leader 要被选举出来。")]),s._v(" "),e("p",[s._v("在 zookeeper 集群中，leader 负责写操作，然后通过 Zab 协议实现 follower 的同步，leader 或者 follower 都可以处理读操作。")]),s._v(" "),e("p",[s._v("Curator 有两种 leader 选举的 recipe,分别是"),e("strong",[s._v("LeaderSelector")]),s._v("和"),e("strong",[s._v("LeaderLatch")]),s._v("。")]),s._v(" "),e("p",[s._v("LeaderSelector 前者是所有存活的客户端不间断的轮流做 Leader，大同社会。")]),s._v(" "),e("p",[s._v("LeaderLatch 后者是一旦选举出 Leader，除非有客户端挂掉重新触发选举，否则不会交出领导权。")]),s._v(" "),e("h2",{attrs:{id:"_3-1leaderlatch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1leaderlatch"}},[s._v("#")]),s._v(" 3.1LeaderLatch")]),s._v(" "),e("p",[s._v("LeaderLatch 有两个构造函数：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public LeaderLatch(CuratorFramework client, String latchPath)\npublic LeaderLatch(CuratorFramework client, String latchPath,  String id)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("LeaderLatch 的启动：")]),s._v(" "),e("p",[e("code",[s._v("leaderLatch.start( );")])]),s._v(" "),e("p",[s._v("一旦启动，LeaderLatch 会和其它使用相同"),e("code",[s._v("latchPath")]),s._v("的其它 LeaderLatch 交涉，然后其中一个最终会被选举为 leader，可以通过"),e("code",[s._v("hasLeadership")]),s._v("方法查看 LeaderLatch 实例是否 leader：")]),s._v(" "),e("p",[e("code",[s._v("leaderLatch.hasLeadership( );//返回true说明当前实例是leader")])]),s._v(" "),e("p",[s._v("类似 JDK 的 CountDownLatch， LeaderLatch 在请求成为 leadership 会 block(阻塞)，一旦不使用 LeaderLatch 了，必须调用"),e("code",[s._v("close")]),s._v("方法。 如果它是 leader,会释放 leadership， 其它的参与者将会选举一个 leader。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(" public void await() throws InterruptedException,EOFException\n/*Causes the current thread to wait until this instance acquires leadership\nunless the thread is interrupted or closed.*/\npublic boolean await(long timeout,TimeUnit unit)throws InterruptedException\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[e("strong",[s._v("异常处理：")]),s._v(" LeaderLatch 实例可以增加 ConnectionStateListener 来监听网络连接问题。 当 SUSPENDED 或 LOST 时, leader 不再认为自己还是 leader。当 LOST 后连接重连后 RECONNECTED,LeaderLatch 会删除先前的 ZNode 然后重新创建一个。LeaderLatch 用户必须考虑导致 leadership 丢失的连接问题。 强烈推荐你使用 ConnectionStateListener。")]),s._v(" "),e("p",[s._v("一个 LeaderLatch 的使用例子：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(' \t@Test\n    public void testLeaderLatch() throws Exception {\n\n        List<CuratorFramework> clients = Lists.newArrayList();\n\n        List<LeaderLatch> examples = Lists.newArrayList();\n\n        try {\n            for (int i = 0; i < CLIENT_QTY; i++) {\n\n                CuratorFramework client = getClient();\n                clients.add(client);\n                LeaderLatch latch = new LeaderLatch(client, PATH, "Client #" + i);\n                latch.addListener(new LeaderLatchListener() {\n\n                    @Override\n                    public void isLeader() {\n                        // TODO Auto-generated method stub\n                        System.out.println("I am Leader");\n                    }\n\n                    @Override\n                    public void notLeader() {\n                        // TODO Auto-generated method stub\n                        System.out.println("I am not Leader");\n                    }\n                });\n                examples.add(latch);\n                client.start();\n                latch.start();\n            }\n            Thread.sleep(1000);\n            LeaderLatch currentLeader = null;\n            do {\n                for (LeaderLatch latch : examples) {\n                    if (latch.hasLeadership()) {\n                        currentLeader = latch;\n                        System.out.println("current leader is " + currentLeader.getId());\n                    }\n                }\n            } while (currentLeader == null);\n\n\n            System.out.println("release the leader " + currentLeader.getId());\n            currentLeader.close();\n            //currentLeader.start();\n\n            Thread.sleep(5000);\n\n            for (LeaderLatch latch : examples) {\n                if (latch.hasLeadership()) {\n                    currentLeader = latch;\n                }\n            }\n            System.out.println("current leader is " + currentLeader.getId());\n            System.out.println("release the leader " + currentLeader.getId());\n        } finally {\n            for (LeaderLatch latch : examples) {\n                if (null != latch.getState() && latch.getState() != LeaderLatch.State.CLOSED)\n                    CloseableUtils.closeQuietly(latch);\n            }\n            for (CuratorFramework client : clients) {\n                CloseableUtils.closeQuietly(client);\n            }\n        }\n    }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br")])]),e("p",[s._v("首先我们创建了 10 个 LeaderLatch，启动后它们中的一个会被选举为 leader。 因为选举会花费一些时间，start 后并不能马上就得到 leader。\n通过"),e("code",[s._v("hasLeadership")]),s._v("查看自己是否是 leader， 如果是的话返回 true。\n可以通过"),e("code",[s._v(".getLeader().getId()")]),s._v("可以得到当前的 leader 的 ID。\n只能通过"),e("code",[s._v("close")]),s._v("释放当前的领导权。\n"),e("code",[s._v("await")]),s._v("是一个阻塞方法， 尝试获取 leader 地位，但是未必能上位。")]),s._v(" "),e("h2",{attrs:{id:"_3-2-leaderselector"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-leaderselector"}},[s._v("#")]),s._v(" 3.2 LeaderSelector")]),s._v(" "),e("p",[s._v("LeaderSelector 使用的时候主要涉及下面几个类：")]),s._v(" "),e("ul",[e("li",[s._v("LeaderSelector")]),s._v(" "),e("li",[s._v("LeaderSelectorListener")]),s._v(" "),e("li",[s._v("LeaderSelectorListenerAdapter")]),s._v(" "),e("li",[s._v("CancelLeadershipException")])]),s._v(" "),e("p",[s._v("核心类是 LeaderSelector，它的构造函数如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public LeaderSelector(CuratorFramework client, String mutexPath,LeaderSelectorListener listener)\npublic LeaderSelector(CuratorFramework client, String mutexPath, ThreadFactory threadFactory, Executor executor, LeaderSelectorListener listener)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("类似 LeaderLatch,LeaderSelector 必须"),e("code",[s._v("start")]),s._v(": "),e("code",[s._v("leaderSelector.start();")]),s._v(" 一旦启动，当实例取得领导权时你的 listener 的"),e("code",[s._v("takeLeadership()")]),s._v("方法被调用。而 takeLeadership()方法只有领导权被释放时才返回。 当你不再使用 LeaderSelector 实例时，应该调用它的 close 方法。")]),s._v(" "),e("p",[e("strong",[s._v("异常处理")]),s._v(" LeaderSelectorListener 类继承 ConnectionStateListener。LeaderSelector 必须小心连接状态的改变。如果实例成为 leader, 它应该响应 SUSPENDED 或 LOST。 当 SUSPENDED 状态出现时， 实例必须假定在重新连接成功之前它可能不再是 leader 了。 如果 LOST 状态出现， 实例不再是 leader， takeLeadership 方法返回。")]),s._v(" "),e("p",[e("strong",[s._v("重要")]),s._v(": 推荐处理方式是当收到 SUSPENDED 或 LOST 时抛出 CancelLeadershipException 异常.。这会导致 LeaderSelector 实例中断并取消执行 takeLeadership 方法的异常.。这非常重要， 你必须考虑扩展 LeaderSelectorListenerAdapter. LeaderSelectorListenerAdapter 提供了推荐的处理逻辑。")]),s._v(" "),e("p",[s._v("下面的一个例子摘抄自官方：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(' public class LeaderSelectorAdapter extends LeaderSelectorListenerAdapter implements Closeable {\n    private final String name;\n    private final LeaderSelector leaderSelector;\n    private final AtomicInteger leaderCount = new AtomicInteger();\n\n    public LeaderSelectorAdapter(CuratorFramework client, String path, String name) {\n        this.name = name;\n        leaderSelector = new LeaderSelector(client, path, this);\n        leaderSelector.autoRequeue();\n    }\n\n    public void start() throws IOException {\n        leaderSelector.start();\n    }\n\n    @Override\n    public void close() throws IOException {\n        leaderSelector.close();\n    }\n\n    @Override\n    public void takeLeadership(CuratorFramework client) throws Exception {\n        final int waitSeconds = (int) (5 * Math.random()) + 1;\n        System.out.println(name + " is now the leader. Waiting " + waitSeconds + " seconds...");\n        System.out.println(name + " has been leader " + leaderCount.getAndIncrement() + " time(s) before.");\n        try {\n            Thread.sleep(TimeUnit.SECONDS.toMillis(waitSeconds));\n        } catch (InterruptedException e) {\n            System.err.println(name + " was interrupted.");\n            Thread.currentThread().interrupt();\n        } finally {\n            System.out.println(name + " relinquishing leadership.\\n");\n        }\n    }\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br")])]),e("blockquote",[e("p",[s._v("你可以在 takeLeadership 进行任务的分配等等，并且不要返回，如果你想要要此实例一直是 leader 的话可以加一个死循环。调用 "),e("code",[s._v("leaderSelector.autoRequeue();")]),s._v("保证在此实例释放领导权之后还可能获得领导权。 在这里我们使用 AtomicInteger 来记录此 client 获得领导权的次数， 它是”fair”， 每个 client 有平等的机会获得领导权。")])]),s._v(" "),e("p",[s._v("对比可知，LeaderLatch 必须调用"),e("code",[s._v("close()")]),s._v("方法才会释放领导权，而对于 LeaderSelector，通过"),e("code",[s._v("LeaderSelectorListener")]),s._v("可以对领导权进行控制， 在适当的时候释放领导权，这样每个节点都有可能获得领导权。从而，LeaderSelector 具有更好的灵活性和可控性，建议有 LeaderElection 应用场景下优先使用 LeaderSelector。")]),s._v(" "),e("h1",{attrs:{id:"_4-分布式锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-分布式锁"}},[s._v("#")]),s._v(" 4.分布式锁")]),s._v(" "),e("blockquote",[e("p",[e("strong",[s._v("提醒：")])]),s._v(" "),e("p",[s._v("1.推荐使用 ConnectionStateListener 监控连接的状态，因为当连接 LOST 时你不再拥有锁")]),s._v(" "),e("p",[s._v("2.分布式的锁全局同步， 这意味着任何一个时间点不会有两个客户端都拥有相同的锁。")])]),s._v(" "),e("h2",{attrs:{id:"_4-1-可重入共享锁-shared-reentrant-lock"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-可重入共享锁-shared-reentrant-lock"}},[s._v("#")]),s._v(" 4.1 可重入共享锁—Shared Reentrant Lock")]),s._v(" "),e("p",[e("strong",[s._v("Shared 意味着锁是全局可见的")]),s._v("， 客户端都可以请求锁。 Reentrant 和 JDK 的 ReentrantLock 类似，即可重入， 意味着同一个客户端在拥有锁的同时，可以多次获取，不会被阻塞。 它是由类"),e("code",[s._v("InterProcessMutex")]),s._v("来实现。 它的构造函数为：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public InterProcessMutex(CuratorFramework client, String path)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("通过"),e("code",[s._v("acquire()")]),s._v("获得锁，并提供超时机制：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("    /**\n     * Acquire the mutex - blocking until it's available. Note: the same thread\n     * can call acquire re-entrantly. Each call to acquire must be balanced by a call\n     * to {@link #release()}\n     *\n     * @throws Exception ZK errors, connection interruptions\n     */\n    @Override\n    public void acquire() throws Exception\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("通过"),e("code",[s._v("release()")]),s._v("方法释放锁。 InterProcessMutex 实例可以重用。"),e("strong",[s._v("Revoking")]),s._v(" ZooKeeper recipes wiki 定义了可协商的撤销机制。 为了撤销 mutex, 调用下面的方法：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("    /**\n     * Perform one release of the mutex if the calling thread is the same thread that acquired it. If the\n     * thread had made multiple calls to acquire, the mutex will still be held when this method returns.\n     *\n     * @throws Exception ZK errors, interruptions, current thread does not own the lock\n     */\n    @Override\n    public void release() throws Exception\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[e("strong",[s._v("Revoking")]),s._v(" ZooKeeper recipes wiki 定义了可协商的撤销机制。 为了撤销 mutex, 调用下面的方法：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("将锁设为可撤销的. 当别的进程或线程想让你释放锁时Listener会被调用。\npublic void makeRevocable(RevocationListener<T> listener)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("如果你请求撤销当前的锁， 调用"),e("code",[s._v("attemptRevoke()")]),s._v("方法,注意锁释放时"),e("code",[s._v("RevocationListener")]),s._v("将会回调。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public static void attemptRevoke(CuratorFramework client,String path) throws Exception\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("测试代码")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(' private InterProcessMutex createLock() {\n        return new InterProcessMutex(client, PATH);\n    }\n\n\n    @Test\n    public void testShareLock() throws InterruptedException {\n\n        CountDownLatch countDownLatch = new CountDownLatch(QTY);\n        ExecutorService service = Executors.newFixedThreadPool(QTY);\n        List<InterProcessMutex> locks = new ArrayList<>();\n        for (int i = 0; i < QTY; ++i) {\n            int finalI = i;\n            Runnable runnable = () -> {\n                InterProcessMutex lock = createLock();\n                locks.add(lock);\n\n                boolean acquire = false;\n                try {\n                    lock.acquire(10000, TimeUnit.SECONDS);\n                    System.out.println("acquire Lock and run  " + finalI + " time:" + System.currentTimeMillis());\n                    Thread.sleep(10000);\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                } finally {\n                    try {\n                        lock.release();\n                    } catch (Exception e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n\n                System.out.println("acquire Lock end : " + finalI + " time:" + System.currentTimeMillis());\n                countDownLatch.countDown();\n            };\n\n\n            service.execute(runnable);\n            //service.execute(runnable);\n        }\n\n        countDownLatch.await();\n    }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br")])]),e("h2",{attrs:{id:"_4-2-不可重入共享锁-shared-lock"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-不可重入共享锁-shared-lock"}},[s._v("#")]),s._v(" 4.2 不可重入共享锁—Shared Lock")]),s._v(" "),e("p",[s._v("这个锁和上面的"),e("code",[s._v("InterProcessMutex")]),s._v("相比，就是少了 Reentrant 的功能，也就意味着它不能在同一个线程中重入。这个类是"),e("code",[s._v("InterProcessSemaphoreMutex")]),s._v(",使用方法和"),e("code",[s._v("InterProcessMutex")]),s._v("类似")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('private InterProcessSemaphoreMutex createInterProcessSemaphoreMutexLock() {\n        return new InterProcessSemaphoreMutex(client, PATH);\n    }\n\n    @Test\n    public void testInterProcessSemaphoreMutex() throws InterruptedException {\n\n\n        CountDownLatch countDownLatch = new CountDownLatch(QTY);\n\n        ExecutorService service = Executors.newFixedThreadPool(QTY);\n        List<InterProcessSemaphoreMutex> locks = new ArrayList<>();\n        for (int i = 0; i < QTY; ++i) {\n            int finalI = i;\n            Runnable runnable = () -> {\n                InterProcessSemaphoreMutex lock = createInterProcessSemaphoreMutexLock();\n                locks.add(lock);\n\n                boolean acquire = false;\n                try {\n                    lock.acquire(10000, TimeUnit.SECONDS);\n                    //lock.acquire(10000, TimeUnit.SECONDS);\n                    System.out.println("acquire Lock and run  " + finalI + " time:" + System.currentTimeMillis());\n                    Thread.sleep(10000);\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                } finally {\n                    try {\n                        lock.release();\n                    } catch (Exception e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n\n                System.out.println("acquire Lock end : " + finalI + " time:" + System.currentTimeMillis());\n                countDownLatch.countDown();\n            };\n\n\t\t\tservice.execute(runnable);\n            service.execute(runnable);\n        }\n\n        countDownLatch.await();\n    }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br")])]),e("p",[s._v("运行后发现，有且只有一个 client 成功获取第一个锁(第一个"),e("code",[s._v("acquire()")]),s._v("方法返回 true)，然后它自己阻塞在第二个"),e("code",[s._v("acquire()")]),s._v("方法，获取第二个锁超时；其他所有的客户端都阻塞在第一个"),e("code",[s._v("acquire()")]),s._v("方法超时并且抛出异常。")]),s._v(" "),e("p",[s._v("这样也就验证了"),e("code",[s._v("InterProcessSemaphoreMutex")]),s._v("实现的锁是不可重入的。")]),s._v(" "),e("h2",{attrs:{id:"_4-3-可重入读写锁-shared-reentrant-read-write-lock"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-可重入读写锁-shared-reentrant-read-write-lock"}},[s._v("#")]),s._v(" 4.3 可重入读写锁—Shared Reentrant Read Write Lock")]),s._v(" "),e("p",[s._v("类似 JDK 的"),e("strong",[s._v("ReentrantReadWriteLock")]),s._v("。一个读写锁管理一对相关的锁。一个负责读操作，另外一个负责写操作。读操作在写锁没被使用时可同时由多个进程使用，而写锁在使用时不允许读(阻塞)。")]),s._v(" "),e("p",[s._v("此锁是可重入的。"),e("strong",[s._v("一个拥有写锁的线程可重入读锁，但是读锁却不能进入写锁")]),s._v("。这也意味着"),e("strong",[s._v("写锁可以降级成读锁， 比如请求写锁 ---\x3e请求读锁---\x3e释放读锁 ----\x3e释放写锁")]),s._v("。从读锁升级成写锁是不行的。")]),s._v(" "),e("p",[s._v("可重入读写锁主要由两个类实现："),e("code",[s._v("InterProcessReadWriteLock")]),s._v("、"),e("code",[s._v("InterProcessMutex")]),s._v("。使用时首先创建一个"),e("code",[s._v("InterProcessReadWriteLock")]),s._v("实例，然后再根据你的需求得到读锁或者写锁，读写锁的类型是"),e("code",[s._v("InterProcessMutex")]),s._v("。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('@Test\n    public void testReadWriteLock() throws InterruptedException {\n\n        CountDownLatch countDownLatch = new CountDownLatch(QTY);\n\n        ExecutorService service = Executors.newFixedThreadPool(QTY);\n        List<InterProcessReadWriteLock> locks = new ArrayList<>();\n        for (int i = 0; i < QTY; ++i) {\n            int finalI = i;\n            Runnable runnable = () -> {\n                InterProcessReadWriteLock lock = new InterProcessReadWriteLock(client, PATH);\n                InterProcessReadWriteLock.ReadLock readLock = lock.readLock();\n                InterProcessReadWriteLock.WriteLock writeLock = lock.writeLock();\n                locks.add(lock);\n\n                boolean acquire = false;\n                try {\n                    if (readLock.acquire(-1, TimeUnit.SECONDS)) {\n                        System.out.println("acquire readLock and run  " + finalI + " time:" + System.currentTimeMillis());\n                        readLock.release();\n                        Thread.sleep(1000);\n                        System.out.println("acquire readLock end  " + finalI + " time:" + System.currentTimeMillis());\n                    }\n                    if (finalI / 2 == 0 && writeLock.acquire(-1, TimeUnit.SECONDS)) {\n                        System.out.println("acquire writeLock and run  " + finalI + " time:" + System.currentTimeMillis());\n                        Thread.sleep(1000);\n                        System.out.println("acquire writeLock end  " + finalI + " time:" + System.currentTimeMillis());\n                    }\n                    System.out.println("acquire Lock and run  " + finalI + " time:" + System.currentTimeMillis());\n                    Thread.sleep(10000);\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n\n                System.out.println("acquire Lock end : " + finalI + " time:" + System.currentTimeMillis());\n                countDownLatch.countDown();\n            };\n\n\n            service.execute(runnable);\n            //service.execute(runnable);\n        }\n\n        countDownLatch.await();\n    }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br")])]),e("h2",{attrs:{id:"_4-4-信号量-shared-semaphore"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-信号量-shared-semaphore"}},[s._v("#")]),s._v(" 4.4 信号量—Shared Semaphore")]),s._v(" "),e("p",[s._v("一个计数的信号量类似 JDK 的 Semaphore。 JDK 中 Semaphore 维护的一组许可("),e("strong",[s._v("permits")]),s._v(")，而 Curator 中称之为租约("),e("strong",[s._v("Lease")]),s._v(")。 有两种方式可以决定 semaphore 的最大租约数。第一种方式是用户给定 path 并且指定最大 LeaseSize。第二种方式用户给定 path 并且使用"),e("code",[s._v("SharedCountReader")]),s._v("类。"),e("strong",[s._v("如果不使用 SharedCountReader, 必须保证所有实例在多进程中使用相同的(最大)租约数量,否则有可能出现 A 进程中的实例持有最大租约数量为 10，但是在 B 进程中持有的最大租约数量为 20，此时租约的意义就失效了。")])]),s._v(" "),e("p",[s._v("这次调用"),e("code",[s._v("acquire()")]),s._v("会返回一个租约对象。 客户端必须在 finally 中 close 这些租约对象，否则这些租约会丢失掉。 但是， 但是，如果客户端 session 由于某种原因比如 crash 丢掉， 那么这些客户端持有的租约会自动 close， 这样其它客户端可以继续使用这些租约。 租约还可以通过下面的方式返还：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public void returnAll(Collection<Lease> leases)\npublic void returnLease(Lease lease)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("注意你可以一次性请求多个租约，如果 Semaphore 当前的租约不够，则请求线程会被阻塞。 同时还提供了超时的重载方法。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public Lease acquire()\npublic Collection<Lease> acquire(int qty)\npublic Lease acquire(long time, TimeUnit unit)\npublic Collection<Lease> acquire(int qty, long time, TimeUnit unit)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("Shared Semaphore 使用的主要类包括下面几个：")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("InterProcessSemaphoreV2")])]),s._v(" "),e("li",[e("code",[s._v("Lease")])]),s._v(" "),e("li",[e("code",[s._v("SharedCountReader")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('@Test\n    public void testInterProcessSemaphore() throws Exception {\n        InterProcessSemaphoreV2 interProcessSemaphoreV2 = new InterProcessSemaphoreV2(client, PATH, QTY);\n\n        ExecutorService service = Executors.newFixedThreadPool(QTY);\n        CountDownLatch countDownLatch = new CountDownLatch(2);\n\n\n        Runnable runnable1 = () -> {\n            Collection<Lease> acquire = null;\n            try {\n                acquire = interProcessSemaphoreV2.acquire(2, 1000000, TimeUnit.SECONDS);\n                System.out.println("acquire = runnable1" + acquire);\n                Thread.sleep(10000);\n\n                interProcessSemaphoreV2.returnAll(acquire);\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n\n            countDownLatch.countDown();\n        };\n\n        Runnable runnable2 = () -> {\n            Collection<Lease> acquire = null;\n            try {\n                acquire = interProcessSemaphoreV2.acquire(1, 1000000, TimeUnit.SECONDS);\n                System.out.println("acquire = runnable2" + acquire);\n                Thread.sleep(10000);\n                interProcessSemaphoreV2.returnAll(acquire);\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n\n            countDownLatch.countDown();\n        };\n\n        Runnable runnable3 = () -> {\n            Collection<Lease> acquire = null;\n            try {\n                acquire = interProcessSemaphoreV2.acquire(QTY, 1000000, TimeUnit.SECONDS);\n                System.out.println("acquire = runnable3" + acquire);\n                Thread.sleep(10000);\n                interProcessSemaphoreV2.returnAll(acquire);\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n            countDownLatch.countDown();\n        };\n\n\n        service.execute(runnable1);\n        Thread.sleep(1000);\n        service.execute(runnable2);\n        Thread.sleep(1000);\n        service.execute(runnable3);\n\n        countDownLatch.await();\n    }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br")])]),e("p",[s._v("首先我们先获得了 2 个租约， 10s 后我们把它还给了 semaphore。 接着请求了一个租约，因为 semaphore 还有 3 个租约，所以请求可以满足，返回一个租约，还剩 2 个租约。 然后再请求 5 个租约，因为租约不够，"),e("strong",[s._v("阻塞到超时，还是没能满足，返回结果为 null(租约不足会阻塞到超时，然后返回 null，不会主动抛出异常；如果不设置超时时间，会一致阻塞)。")])]),s._v(" "),e("p",[s._v("上面说讲的锁都是公平锁(fair)。 总 ZooKeeper 的角度看， 每个客户端都按照请求的顺序获得锁，不存在非公平的抢占的情况。")]),s._v(" "),e("h2",{attrs:{id:"_4-5-多共享锁对象-multi-shared-lock"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-多共享锁对象-multi-shared-lock"}},[s._v("#")]),s._v(" 4.5 多共享锁对象 —Multi Shared Lock")]),s._v(" "),e("p",[s._v("Multi Shared Lock 是一个锁的容器。 当调用"),e("code",[s._v("acquire()")]),s._v("， 所有的锁都会被"),e("code",[s._v("acquire()")]),s._v("，如果请求失败，所有的锁都会被 release。 同样调用 release 时所有的锁都被 release("),e("strong",[s._v("失败被忽略")]),s._v(")。 基本上，它就是组锁的代表，在它上面的请求释放操作都会传递给它包含的所有的锁。")]),s._v(" "),e("p",[s._v("主要涉及两个类：")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("InterProcessMultiLock")])]),s._v(" "),e("li",[e("code",[s._v("InterProcessLock")])])]),s._v(" "),e("p",[s._v("它的构造函数需要包含的锁的集合，或者一组 ZooKeeper 的 path。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public InterProcessMultiLock(List<InterProcessLock> locks)\npublic InterProcessMultiLock(CuratorFramework client, List<String> paths)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('public class MultiSharedLockDemo {\n\n    private static final String PATH1 = "/examples/locks1";\n    private static final String PATH2 = "/examples/locks2";\n\n    private static final String PATH = "/curator-test";\n    static CuratorFramework client;\n\n    public static void main(String[] args) throws Exception {\n\n\n        before();\n\n        InterProcessLock lock1 = new InterProcessMutex(client, PATH1);\n        InterProcessLock lock2 = new InterProcessSemaphoreMutex(client, PATH2);\n\n        InterProcessMultiLock lock = new InterProcessMultiLock(Arrays.asList(lock1, lock2));\n\n        if (!lock.acquire(10, TimeUnit.SECONDS)) {\n            throw new IllegalStateException("could not acquire the lock");\n        }\n        System.out.println("has got all lock");\n\n        System.out.println("has got lock1: " + lock1.isAcquiredInThisProcess());\n        System.out.println("has got lock2: " + lock2.isAcquiredInThisProcess());\n\n        try {\n            //access resource exclusively\n            System.out.println("lock = " + lock);\n            Thread.sleep(1000);\n        } finally {\n            System.out.println("releasing the lock");\n            lock.release(); // always release the lock in a finally block\n        }\n        System.out.println("has got lock1: " + lock1.isAcquiredInThisProcess());\n        System.out.println("has got lock2: " + lock2.isAcquiredInThisProcess());\n    }\n\n    public static void before() {\n\n        ExponentialBackoffRetry retryPolicy =\n                new ExponentialBackoffRetry(100, 3);\n        client = ZkClientFactory.createWithOptions(\n                "192.168.1.13:2181", retryPolicy, null, 3000, 20000);\n\n        client.start();\n    }\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br")])]),e("p",[s._v("新建一个"),e("code",[s._v("InterProcessMultiLock")]),s._v("， 包含一个重入锁和一个非重入锁。 调用"),e("code",[s._v("acquire()")]),s._v("后可以看到线程同时拥有了这两个锁。 调用"),e("code",[s._v("release()")]),s._v("看到这两个锁都被释放了。")]),s._v(" "),e("h1",{attrs:{id:"_5-分布式计数器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-分布式计数器"}},[s._v("#")]),s._v(" 5.分布式计数器")]),s._v(" "),e("p",[s._v("顾名思义，计数器是用来计数的, 利用 ZooKeeper 可以实现一个集群共享的计数器。 只要使用相同的 path 就可以得到最新的计数器值， 这是由 ZooKeeper 的一致性保证的。Curator 有两个计数器， 一个是用 int 来计数("),e("code",[s._v("SharedCount")]),s._v(")，一个用 long 来计数("),e("code",[s._v("DistributedAtomicLong")]),s._v(")。")]),s._v(" "),e("h2",{attrs:{id:"_5-1-分布式-int-计数器-sharedcount"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-分布式-int-计数器-sharedcount"}},[s._v("#")]),s._v(" 5.1 分布式 int 计数器—SharedCount")]),s._v(" "),e("p",[s._v("这个类使用 int 类型来计数。 主要涉及三个类。")]),s._v(" "),e("ul",[e("li",[s._v("SharedCount")]),s._v(" "),e("li",[s._v("SharedCountReader")]),s._v(" "),e("li",[s._v("SharedCountListener")])]),s._v(" "),e("p",[e("code",[s._v("SharedCount")]),s._v("代表计数器， 可以为它增加一个"),e("code",[s._v("SharedCountListener")]),s._v("，当计数器改变时此 Listener 可以监听到改变的事件，而"),e("code",[s._v("SharedCountReader")]),s._v("可以读取到最新的值， 包括字面值和带版本信息的值 VersionedValue。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(' public class SharedCounterDemo implements SharedCountListener {\n\n    private static final int QTY = 5;\n    private static final String PATH = "/examples/counter";\n\n    public static void main(String[] args) throws IOException, Exception {\n        final Random rand = new Random();\n        SharedCounterDemo example = new SharedCounterDemo();\n        try (TestingServer server = new TestingServer()) {\n            CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new ExponentialBackoffRetry(1000, 3));\n            client.start();\n\n            SharedCount baseCount = new SharedCount(client, PATH, 0);\n            baseCount.addListener(example);\n            baseCount.start();\n\n            List<SharedCount> examples = Lists.newArrayList();\n            ExecutorService service = Executors.newFixedThreadPool(QTY);\n            for (int i = 0; i < QTY; ++i) {\n                final SharedCount count = new SharedCount(client, PATH, 0);\n                examples.add(count);\n                Callable<Void> task = () -> {\n                    count.start();\n                    Thread.sleep(rand.nextInt(10000));\n                    System.out.println("Increment:" + count.trySetCount(count.getVersionedValue(), count.getCount() + rand.nextInt(10)));\n                    return null;\n                };\n                service.submit(task);\n            }\n\n            service.shutdown();\n            service.awaitTermination(10, TimeUnit.MINUTES);\n\n            for (int i = 0; i < QTY; ++i) {\n                examples.get(i).close();\n            }\n            baseCount.close();\n        }\n        Thread.sleep(Integer.MAX_VALUE);\n    }\n\n    @Override\n    public void stateChanged(CuratorFramework arg0, ConnectionState arg1) {\n        System.out.println("State changed: " + arg1.toString());\n    }\n\n    @Override\n    public void countHasChanged(SharedCountReader sharedCount, int newCount) throws Exception {\n        System.out.println("Counter\'s value is changed to " + newCount);\n    }\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br")])]),e("p",[s._v("在这个例子中，我们使用"),e("code",[s._v("baseCount")]),s._v("来监听计数值("),e("code",[s._v("addListener")]),s._v("方法来添加 SharedCountListener )。 任意的 SharedCount， 只要使用相同的 path，都可以得到这个计数值。 然后我们使用 5 个线程为计数值增加一个 10 以内的随机数。相同的 path 的 SharedCount 对计数值进行更改，将会回调给"),e("code",[s._v("baseCount")]),s._v("的 SharedCountListener。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("count.trySetCount(count.getVersionedValue(), count.getCount() + rand.nextInt(10))\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("这里我们使用"),e("code",[s._v("trySetCount")]),s._v("去设置计数器。 "),e("strong",[s._v("第一个参数提供当前的 VersionedValue,如果期间其它 client 更新了此计数值， 你的更新可能不成功， 但是这时你的 client 更新了最新的值，所以失败了你可以尝试再更新一次。 而"),e("code",[s._v("setCount")]),s._v("是强制更新计数器的值")]),s._v("。")]),s._v(" "),e("blockquote",[e("p",[s._v("注意计数器必须"),e("code",[s._v("start")]),s._v(",使用完之后必须调用"),e("code",[s._v("close")]),s._v("关闭它。")])]),s._v(" "),e("h2",{attrs:{id:"_5-2-分布式-long-计数器-distributedatomiclong"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-分布式-long-计数器-distributedatomiclong"}},[s._v("#")]),s._v(" 5.2 分布式 long 计数器—DistributedAtomicLong")]),s._v(" "),e("p",[s._v("再看一个 Long 类型的计数器。 除了计数的范围比"),e("code",[s._v("SharedCount")]),s._v("大了之外， 它首先尝试使用乐观锁的方式设置计数器， 如果不成功(比如期间计数器已经被其它 client 更新了)， 它使用"),e("code",[s._v("InterProcessMutex")]),s._v("方式来更新计数值。")]),s._v(" "),e("p",[s._v("可以从它的内部实现"),e("code",[s._v("DistributedAtomicValue.trySet()")]),s._v("中看出：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("   AtomicValue<byte[]>   trySet(MakeValue makeValue) throws Exception\n    {\n        MutableAtomicValue<byte[]>  result = new MutableAtomicValue<byte[]>(null, null, false);\n\n        tryOptimistic(result, makeValue);\n        if ( !result.succeeded() && (mutex != null) )\n        {\n            tryWithMutex(result, makeValue);\n        }\n\n        return result;\n    }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("p",[s._v("计数器有一系列的操作：")]),s._v(" "),e("ul",[e("li",[s._v("get(): 获取当前值")]),s._v(" "),e("li",[s._v("increment()： 加一")]),s._v(" "),e("li",[s._v("decrement(): 减一")]),s._v(" "),e("li",[s._v("add()： 增加特定的值")]),s._v(" "),e("li",[s._v("subtract(): 减去特定的值")]),s._v(" "),e("li",[s._v("trySet(): 尝试设置计数值")]),s._v(" "),e("li",[s._v("forceSet(): 强制设置计数值")])]),s._v(" "),e("p",[s._v("你"),e("strong",[s._v("必须")]),s._v("检查返回结果的"),e("code",[s._v("succeeded()")]),s._v("， 它代表此操作是否成功。 如果操作成功， "),e("code",[s._v("preValue()")]),s._v("代表操作前的值， "),e("code",[s._v("postValue()")]),s._v("代表操作后的值。")]),s._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DistributedAtomicLongDemo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("QTY")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("PATH")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/examples/counter"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DistributedAtomicLong")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" examples "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Lists")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("newArrayList")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TestingServer")]),s._v(" server "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TestingServer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CuratorFramework")]),s._v(" client "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CuratorFrameworkFactory")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("newClient")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("server"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("getConnectString")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExponentialBackoffRetry")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            client"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExecutorService")]),s._v(" service "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Executors")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("newFixedThreadPool")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("QTY")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("QTY")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DistributedAtomicLong")]),s._v(" count "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DistributedAtomicLong")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("client"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("PATH")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RetryNTimes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n                examples"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("count"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Callable")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Void")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" task "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                        "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AtomicValue")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Long")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" value "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" count"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("increment")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                        "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"succeed: "')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("succeeded")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("succeeded")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                            "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Increment: from "')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("preValue")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('" to "')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("postValue")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                        e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("printStackTrace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                service"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("submit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("task"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n            service"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("shutdown")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            service"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("awaitTermination")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TimeUnit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MINUTES")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MAX_VALUE")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br")])]),e("h1",{attrs:{id:"_6-分布式队列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-分布式队列"}},[s._v("#")]),s._v(" 6. 分布式队列")]),s._v(" "),e("p",[s._v("使用 Curator 也可以简化 Ephemeral Node ("),e("strong",[s._v("临时节点")]),s._v(")的操作。Curator 也提供 ZK Recipe 的分布式队列实现。 利用 ZK 的 PERSISTENTS_EQUENTIAL 节点， 可以保证放入到队列中的项目是按照顺序排队的。 如果单一的消费者从队列中取数据， 那么它是先入先出的，这也是队列的特点。 如果你严格要求顺序，你就的使用单一的消费者，可以使用 Leader 选举只让 Leader 作为唯一的消费者。")]),s._v(" "),e("p",[s._v("但是， 根据 Netflix 的 Curator 作者所说， ZooKeeper 真心不适合做 Queue，或者说 ZK 没有实现一个好的 Queue，详细内容可以看 "),e("a",{attrs:{href:"https://link.jianshu.com/?t=https%3A%2F%2Fcwiki.apache.org%2Fconfluence%2Fdisplay%2FCURATOR%2FTN4",target:"_blank",rel:"noopener noreferrer"}},[s._v("Tech Note 4"),e("OutboundLink")],1),s._v("， 原因有五：")]),s._v(" "),e("ol",[e("li",[s._v("ZK 有 1MB 的传输限制。 实践中 ZNode 必须相对较小，而队列包含成千上万的消息，非常的大。")]),s._v(" "),e("li",[s._v("如果有很多节点，ZK 启动时相当的慢。 而使用 queue 会导致好多 ZNode. 你需要显著增大 initLimit 和 syncLimit.")]),s._v(" "),e("li",[s._v("ZNode 很大的时候很难清理。Netflix 不得不创建了一个专门的程序做这事。")]),s._v(" "),e("li",[s._v("当很大量的包含成千上万的子节点的 ZNode 时， ZK 的性能变得不好")]),s._v(" "),e("li",[s._v("ZK 的数据库完全放在内存中。 大量的 Queue 意味着会占用很多的内存空间。")])]),s._v(" "),e("p",[s._v("尽管如此， Curator 还是创建了各种 Queue 的实现。 如果 Queue 的数据量不太多，数据量不太大的情况下，酌情考虑，还是可以使用的。")]),s._v(" "),e("h2",{attrs:{id:"_6-1-分布式队列-distributedqueue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-分布式队列-distributedqueue"}},[s._v("#")]),s._v(" 6.1 分布式队列—DistributedQueue")]),s._v(" "),e("p",[s._v("DistributedQueue 是最普通的一种队列。 它设计以下四个类：")]),s._v(" "),e("ul",[e("li",[s._v("QueueBuilder - 创建队列使用 QueueBuilder,它也是其它队列的创建类")]),s._v(" "),e("li",[s._v("QueueConsumer - 队列中的消息消费者接口")]),s._v(" "),e("li",[s._v("QueueSerializer - 队列消息序列化和反序列化接口，提供了对队列中的对象的序列化和反序列化")]),s._v(" "),e("li",[s._v("DistributedQueue - 队列实现类")])]),s._v(" "),e("p",[s._v("QueueConsumer 是消费者，它可以接收队列的数据。处理队列中的数据的代码逻辑可以放在 QueueConsumer.consumeMessage()中。")]),s._v(" "),e("p",[s._v("正常情况下先将消息从队列中移除，再交给消费者消费。但这是两个步骤，不是原子的。可以调用 Builder 的 lockPath()消费者加锁，当消费者消费数据时持有锁，这样其它消费者不能消费此消息。如果消费失败或者进程死掉，消息可以交给其它进程。这会带来一点性能的损失。最好还是单消费者模式使用队列。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(' public class DistributedQueueDemo {\n\n    private static final String PATH = "/example/queue";\n\n    public static void main(String[] args) throws Exception {\n        TestingServer server = new TestingServer();\n        CuratorFramework clientA = CuratorFrameworkFactory.newClient(server.getConnectString(), new ExponentialBackoffRetry(1000, 3));\n        clientA.start();\n        CuratorFramework clientB = CuratorFrameworkFactory.newClient(server.getConnectString(), new ExponentialBackoffRetry(1000, 3));\n        clientB.start();\n        DistributedQueue<String> queueA;\n        QueueBuilder<String> builderA = QueueBuilder.builder(clientA, createQueueConsumer("A"), createQueueSerializer(), PATH);\n        queueA = builderA.buildQueue();\n        queueA.start();\n\n        DistributedQueue<String> queueB;\n        QueueBuilder<String> builderB = QueueBuilder.builder(clientB, createQueueConsumer("B"), createQueueSerializer(), PATH);\n        queueB = builderB.buildQueue();\n        queueB.start();\n        for (int i = 0; i < 100; i++) {\n            queueA.put(" test-A-" + i);\n            Thread.sleep(10);\n            queueB.put(" test-B-" + i);\n        }\n        Thread.sleep(1000 * 10);// 等待消息消费完成\n        queueB.close();\n        queueA.close();\n        clientB.close();\n        clientA.close();\n        System.out.println("OK!");\n    }\n\n    /**\n     * 队列消息序列化实现类\n     */\n    private static QueueSerializer<String> createQueueSerializer() {\n        return new QueueSerializer<String>() {\n            @Override\n            public byte[] serialize(String item) {\n                return item.getBytes();\n            }\n\n            @Override\n            public String deserialize(byte[] bytes) {\n                return new String(bytes);\n            }\n        };\n    }\n\n    /**\n     * 定义队列消费者\n     */\n    private static QueueConsumer<String> createQueueConsumer(final String name) {\n        return new QueueConsumer<String>() {\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState) {\n                System.out.println("连接状态改变: " + newState.name());\n            }\n\n            @Override\n            public void consumeMessage(String message) throws Exception {\n                System.out.println("消费消息(" + name + "): " + message);\n            }\n        };\n    }\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br")])]),e("p",[s._v("例子中定义了两个分布式队列和两个消费者，因为 PATH 是相同的，会存在消费者抢占消费消息的情况。")]),s._v(" "),e("h2",{attrs:{id:"_6-2-带-id-的分布式队列-distributedidqueue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-带-id-的分布式队列-distributedidqueue"}},[s._v("#")]),s._v(" 6.2 带 Id 的分布式队列—DistributedIdQueue")]),s._v(" "),e("p",[s._v("DistributedIdQueue 和上面的队列类似，"),e("strong",[s._v("但是可以为队列中的每一个元素设置一个 ID")]),s._v("。 可以通过 ID 把队列中任意的元素移除。 它涉及几个类：")]),s._v(" "),e("ul",[e("li",[s._v("QueueBuilder")]),s._v(" "),e("li",[s._v("QueueConsumer")]),s._v(" "),e("li",[s._v("QueueSerializer")]),s._v(" "),e("li",[s._v("DistributedQueue")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("//创建\nbuilder.buildIdQueue()\n//放入元素\nqueue.put(aMessage, messageId);\n//移除元素时\nint numberRemoved = queue.remove(messageId);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("h2",{attrs:{id:"_6-3-优先级分布式队列-distributedpriorityqueue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-优先级分布式队列-distributedpriorityqueue"}},[s._v("#")]),s._v(" 6.3 优先级分布式队列—DistributedPriorityQueue")]),s._v(" "),e("p",[s._v("优先级队列对队列中的元素按照优先级进行排序。 "),e("strong",[s._v("Priority 越小， 元素越靠前， 越先被消费掉")]),s._v("。")]),s._v(" "),e("p",[s._v("通过 builder.buildPriorityQueue(minItemsBeforeRefresh)方法创建。 当优先级队列得到元素增删消息时，它会暂停处理当前的元素队列，然后刷新队列。minItemsBeforeRefresh 指定刷新前当前活动的队列的最小数量。 主要设置你的程序可以容忍的不排序的最小值。")]),s._v(" "),e("p",[s._v("放入队列时需要指定优先级：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("queue.put(aMessage, priority);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("列子")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(' public class DistributedPriorityQueueDemo {\n\n    private static final String PATH = "/example/queue";\n\n    public static void main(String[] args) throws Exception {\n        TestingServer server = new TestingServer();\n        CuratorFramework client = null;\n        DistributedPriorityQueue<String> queue = null;\n        try {\n            client = CuratorFrameworkFactory.newClient(server.getConnectString(), new ExponentialBackoffRetry(1000, 3));\n            client.getCuratorListenable().addListener((client1, event) -> System.out.println("CuratorEvent: " + event.getType().name()));\n\n            client.start();\n            QueueConsumer<String> consumer = createQueueConsumer();\n            QueueBuilder<String> builder = QueueBuilder.builder(client, consumer, createQueueSerializer(), PATH);\n            queue = builder.buildPriorityQueue(0);\n            queue.start();\n\n            for (int i = 0; i < 10; i++) {\n                int priority = (int) (Math.random() * 100);\n                System.out.println("test-" + i + " priority:" + priority);\n                queue.put("test-" + i, priority);\n                Thread.sleep((long) (50 * Math.random()));\n            }\n\n            Thread.sleep(20000);\n\n        } catch (Exception ex) {\n\n        } finally {\n            CloseableUtils.closeQuietly(queue);\n            CloseableUtils.closeQuietly(client);\n            CloseableUtils.closeQuietly(server);\n        }\n    }\n\n    private static QueueSerializer<String> createQueueSerializer() {\n        return new QueueSerializer<String>() {\n\n            @Override\n            public byte[] serialize(String item) {\n                return item.getBytes();\n            }\n\n            @Override\n            public String deserialize(byte[] bytes) {\n                return new String(bytes);\n            }\n\n        };\n    }\n\n    private static QueueConsumer<String> createQueueConsumer() {\n\n        return new QueueConsumer<String>() {\n\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState) {\n                System.out.println("connection new state: " + newState.name());\n            }\n\n            @Override\n            public void consumeMessage(String message) throws Exception {\n                Thread.sleep(1000);\n                System.out.println("consume one message: " + message);\n            }\n\n        };\n    }\n\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br"),e("span",{staticClass:"line-number"},[s._v("67")]),e("br"),e("span",{staticClass:"line-number"},[s._v("68")]),e("br"),e("span",{staticClass:"line-number"},[s._v("69")]),e("br"),e("span",{staticClass:"line-number"},[s._v("70")]),e("br"),e("span",{staticClass:"line-number"},[s._v("71")]),e("br")])]),e("p",[s._v("有时候你可能会有错觉，优先级设置并没有起效。那是因为优先级是对于队列积压的元素而言，如果消费速度过快有可能出现在后一个元素入队操作之前前一个元素已经被消费，这种情况下 DistributedPriorityQueue 会退化为 DistributedQueue。")]),s._v(" "),e("h2",{attrs:{id:"_6-4-分布式延迟队列-distributeddelayqueue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-分布式延迟队列-distributeddelayqueue"}},[s._v("#")]),s._v(" 6.4 分布式延迟队列—DistributedDelayQueue")]),s._v(" "),e("p",[s._v("JDK 中也有 DelayQueue，不知道你是否熟悉。 DistributedDelayQueue 也提供了类似的功能， 元素有个 delay 值， 消费者隔一段时间才能收到元素。")]),s._v(" "),e("p",[s._v("通过下面的语句创建：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("QueueBuilder<MessageType>    builder = QueueBuilder.builder(client, consumer, serializer, path);\n... more builder method calls as needed ...\nDistributedDelayQueue<MessageType> queue = builder.buildDelayQueue();\n//放入元素时可以指定delayUntilEpoch：\n\nqueue.put(aMessage, delayUntilEpoch);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("注意"),e("code",[s._v("delayUntilEpoch")]),s._v("不是离现在的一个时间间隔， 比如 20 毫秒，而是未来的一个时间戳，如 System.currentTimeMillis() + 10 秒。 如果 delayUntilEpoch 的时间已经过去，消息会立刻被消费者接收。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(' public class DistributedDelayQueueDemo {\n\n    private static final String PATH = "/example/queue";\n\n    public static void main(String[] args) throws Exception {\n        TestingServer server = new TestingServer();\n        CuratorFramework client = null;\n        DistributedDelayQueue<String> queue = null;\n        try {\n            client = CuratorFrameworkFactory.newClient(server.getConnectString(), new ExponentialBackoffRetry(1000, 3));\n            client.getCuratorListenable().addListener((client1, event) -> System.out.println("CuratorEvent: " + event.getType().name()));\n\n            client.start();\n            QueueConsumer<String> consumer = createQueueConsumer();\n            QueueBuilder<String> builder = QueueBuilder.builder(client, consumer, createQueueSerializer(), PATH);\n            queue = builder.buildDelayQueue();\n            queue.start();\n\n            for (int i = 0; i < 10; i++) {\n                queue.put("test-" + i, System.currentTimeMillis() + 10000);\n            }\n            System.out.println(new Date().getTime() + ": already put all items");\n\n\n            Thread.sleep(20000);\n\n        } catch (Exception ex) {\n\n        } finally {\n            CloseableUtils.closeQuietly(queue);\n            CloseableUtils.closeQuietly(client);\n            CloseableUtils.closeQuietly(server);\n        }\n    }\n\n    private static QueueSerializer<String> createQueueSerializer() {\n        return new QueueSerializer<String>() {\n\n            @Override\n            public byte[] serialize(String item) {\n                return item.getBytes();\n            }\n\n            @Override\n            public String deserialize(byte[] bytes) {\n                return new String(bytes);\n            }\n\n        };\n    }\n\n    private static QueueConsumer<String> createQueueConsumer() {\n\n        return new QueueConsumer<String>() {\n\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState) {\n                System.out.println("connection new state: " + newState.name());\n            }\n\n            @Override\n            public void consumeMessage(String message) throws Exception {\n                System.out.println(new Date().getTime() + ": consume one message: " + message);\n            }\n\n        };\n    }\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br"),e("span",{staticClass:"line-number"},[s._v("67")]),e("br"),e("span",{staticClass:"line-number"},[s._v("68")]),e("br")])]),e("h1",{attrs:{id:"_7-分布式屏障-barrier"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-分布式屏障-barrier"}},[s._v("#")]),s._v(" 7. 分布式屏障—Barrier")]),s._v(" "),e("p",[s._v("分布式 Barrier 是这样一个类： 它会阻塞所有节点上的等待进程，直到某一个被满足， 然后所有的节点继续进行。")]),s._v(" "),e("p",[s._v("比如赛马比赛中， 等赛马陆续来到起跑线前。 一声令下，所有的赛马都飞奔而出。")]),s._v(" "),e("h2",{attrs:{id:"_7-1-distributedbarrier"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-distributedbarrier"}},[s._v("#")]),s._v(" 7.1 DistributedBarrier")]),s._v(" "),e("p",[e("code",[s._v("DistributedBarrier")]),s._v("类实现了栅栏的功能。 它的构造函数如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public DistributedBarrier(CuratorFramework client, String barrierPath)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("首先你需要设置栅栏，它将阻塞在它上面等待的线程:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("setBarrier();\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("然后需要阻塞的线程调用方法等待放行条件:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public void waitOnBarrier()\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("当条件满足时，移除栅栏，所有等待的线程将继续执行：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("removeBarrier();\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("异常处理")]),s._v(" DistributedBarrier 会监控连接状态，当连接断掉时"),e("code",[s._v("waitOnBarrier()")]),s._v("方法会抛出异常。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(' public class DistributedBarrierDemo {\n\n    private static final int QTY = 5;\n    private static final String PATH = "/examples/barrier";\n\n    public static void main(String[] args) throws Exception {\n        try (TestingServer server = new TestingServer()) {\n            CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new ExponentialBackoffRetry(1000, 3));\n            client.start();\n            ExecutorService service = Executors.newFixedThreadPool(QTY);\n            DistributedBarrier controlBarrier = new DistributedBarrier(client, PATH);\n            controlBarrier.setBarrier();\n\n            for (int i = 0; i < QTY; ++i) {\n                final DistributedBarrier barrier = new DistributedBarrier(client, PATH);\n                final int index = i;\n                Callable<Void> task = () -> {\n                    Thread.sleep((long) (3 * Math.random()));\n                    System.out.println("Client #" + index + " waits on Barrier");\n                    barrier.waitOnBarrier();\n                    System.out.println("Client #" + index + " begins");\n                    return null;\n                };\n                service.submit(task);\n            }\n            Thread.sleep(10000);\n            System.out.println("all Barrier instances should wait the condition");\n            controlBarrier.removeBarrier();\n            service.shutdown();\n            service.awaitTermination(10, TimeUnit.MINUTES);\n\n            Thread.sleep(20000);\n        }\n    }\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br")])]),e("p",[s._v("这个例子创建了"),e("code",[s._v("controlBarrier")]),s._v("来设置栅栏和移除栅栏。 我们创建了 5 个线程，在此 Barrier 上等待。 最后移除栅栏后所有的线程才继续执行。")]),s._v(" "),e("h2",{attrs:{id:"_7-2-双栅栏-distributeddoublebarrier"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-双栅栏-distributeddoublebarrier"}},[s._v("#")]),s._v(" 7.2 双栅栏—DistributedDoubleBarrier")]),s._v(" "),e("p",[s._v("双栅栏允许客户端在计算的开始和结束时同步。当足够的进程加入到双栅栏时，进程开始计算， 当计算完成时，离开栅栏。 双栅栏类是"),e("code",[s._v("DistributedDoubleBarrier")]),s._v("。 构造函数为:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public DistributedDoubleBarrier(CuratorFramework client,\n                                String barrierPath,\n                                int memberQty)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("code",[s._v("memberQty")]),s._v("是成员数量，当"),e("code",[s._v("enter()")]),s._v("方法被调用时，成员被阻塞，直到所有的成员都调用了"),e("code",[s._v("enter()")]),s._v("。 当"),e("code",[s._v("leave()")]),s._v("方法被调用时，它也阻塞调用线程，直到所有的成员都调用了"),e("code",[s._v("leave()")]),s._v("。 就像百米赛跑比赛， 发令枪响， 所有的运动员开始跑，等所有的运动员跑过终点线，比赛才结束。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('\npublic class DistributedDoubleBarrierDemo {\n\n    private static final int QTY = 5;\n    private static final String PATH = "/examples/barrier";\n\n    public static void main(String[] args) throws Exception {\n        try (TestingServer server = new TestingServer()) {\n            CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new ExponentialBackoffRetry(1000, 3));\n            client.start();\n            ExecutorService service = Executors.newFixedThreadPool(QTY);\n            for (int i = 0; i < QTY; ++i) {\n                final DistributedDoubleBarrier barrier = new DistributedDoubleBarrier(client, PATH, QTY);\n                final int index = i;\n                Callable<Void> task = () -> {\n\n                    Thread.sleep((long) (3 * Math.random()));\n                    System.out.println("Client #" + index + " enters");\n                    barrier.enter();\n                    System.out.println("Client #" + index + " begins");\n                    Thread.sleep((long) (3000 * Math.random()));\n                    barrier.leave();\n                    System.out.println("Client #" + index + " left");\n                    return null;\n                };\n                service.submit(task);\n            }\n\n            service.shutdown();\n            service.awaitTermination(10, TimeUnit.MINUTES);\n            Thread.sleep(Integer.MAX_VALUE);\n        }\n    }\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br")])]),e("h1",{attrs:{id:"代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[s._v("#")]),s._v(" 代码")]),s._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/andanyoung/springboot/tree/master/zookeeper",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://github.com/andanyoung/springboot/tree/master/zookeeper"),e("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=a.exports}}]);