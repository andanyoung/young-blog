(window.webpackJsonp=window.webpackJsonp||[]).push([[201],{1528:function(s,a,n){"use strict";n.r(a);var t=n(4),e=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"scala-option-类型详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scala-option-类型详解"}},[s._v("#")]),s._v(" scala Option 类型详解")]),s._v(" "),a("blockquote",[a("p",[s._v("Scala 中提供 null 值，但尽量避免使用，除非要与 Java 交互。（在 Java 里，null 是一个关键字，不是一个对象，所以对它调用任何方法都是非法的，这与函数式编程的 scala 不符合）。Scala 试图通过摆脱 null 来解决这个问题，并提供自己的类型用来表示一个值是可选的（有值或无值）， 这就是 Option[A] 特质。")])]),s._v(" "),a("h2",{attrs:{id:"_1-option-some-none"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-option-some-none"}},[s._v("#")]),s._v(" 1. Option，Some，None")]),s._v(" "),a("p",[a("code",[s._v("Option[A]")]),s._v(" 是一个类型为 A 的可选值的容器： 如果值存在， "),a("code",[s._v("Option[A]")]),s._v(" 就是一个 "),a("code",[s._v("Some[A]")]),s._v(" ，如果不存在， "),a("code",[s._v("Option[A]")]),s._v(" 就是对象 "),a("code",[s._v("None")]),s._v("。"),a("strong",[s._v("Some 与 None 是 Option 的两个子类！")])]),s._v(" "),a("h1",{attrs:{id:"_2-使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用场景"}},[s._v("#")]),s._v(" 2. 使用场景")]),s._v(" "),a("p",[s._v("scala 鼓励你在变量和函数返回值可能不会引用任何值的时候使用 Option 类型。例如集合 Map 的 get 方法：")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" map "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Japan"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Tokyo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"China"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Beijing"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nprintln"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"China"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nprintln"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"France"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nprintln"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Japan"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("在 模式匹配 中也可以使用 Option 类型")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('val nameMaybe:Option[String] = Some("tom")\nnameMaybe match {\n  case Some(_) => println("yes")\n  case None => println("No name")\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h1",{attrs:{id:"_3-创建-option"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-创建-option"}},[s._v("#")]),s._v(" 3. 创建 Option")]),s._v(" "),a("p",[s._v("通常，你可以直接实例化some样例类来创建一个Option。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('val greeting:Option[String]Some("Hello world")\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("或者，在知道值缺失的情况下，直接使用None对象：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("val greeting:Option[String]None\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("然而，在实际工作中，你不可避免的要去操作一些Java库，或者是其他将nu11作为缺失值的JVM语言的代码。为此，Option\n伴生对象提供了一个工厂方法，可以根据给定的参数创建相应的Option:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('val absentGreeting:Option[String]Option(null)//absentGreeting will be None\nval presentGreeting:Option[String]Option("Hello!")//presentGreeting will be Some("Hello!")\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h1",{attrs:{id:"_4-使用-option"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-使用-option"}},[s._v("#")]),s._v(" 4. 使用 Option")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('case class User(\n    id: Int,\n    firstName: String,\n    lastName: String,\n    age: Int,\n    gender: Option[String]\n  )\n\n  object UserRepository {\n    private val users = Map(1 -> User(1, "John", "Doe", 32, Some("male")),\n                            2 -> User(2, "Johanna", "Doe", 30, None))\n    def findById(id: Int): Option[User] = users.get(id)\n    def findAll = users.values\n  }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("h3",{attrs:{id:"_4-1-默认值-getorelse"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-默认值-getorelse"}},[s._v("#")]),s._v(" 4.1 默认值 getOrElse")]),s._v(" "),a("p",[s._v("很多时候，在值不存在时，需要进行回退，或者提供一个默认值。 Scala 为 Option 提供了 getOrElse 方法，以应对这种情况")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('val user = User(2, "Johanna", "Doe", 30, None)\nprintln("Gender: " + user.gender.getOrElse("not specified")) // will print "not specified"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"_4-2-模式匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-模式匹配"}},[s._v("#")]),s._v(" 4.2 模式匹配")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('val user = User(2, "Johanna", "Doe", 30, None)\n  user.gender match {\n    case Some(gender) => println("Gender: " + gender)\n    case None => println("Gender: not specified")\n  }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"_4-3-作为集合的-option"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-作为集合的-option"}},[s._v("#")]),s._v(" 4.3 作为集合的 Option")]),s._v(" "),a("blockquote",[a("p",[s._v("Option 是类型 A 的容器，更确切地说，你可以把它看作是某种集合， 这个特殊的集合要么只包含一个元素，要么就什么元素都没有。虽然在类型层次上， Option 并不是 Scala 的集合类型， 但，凡是你觉得 Scala 集合好用的方法， Option 也有， 你甚至可以将其转换成一个集合，比如说 List 。")])]),s._v(" "),a("h3",{attrs:{id:"_4-4-for-语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-for-语句"}},[s._v("#")]),s._v(" 4.4 for 语句")]),s._v(" "),a("blockquote",[a("p",[s._v("现在，你已经知道 Option 可以被当作集合来看待，并且有 map 、 flatMap 、 filter 这样的方法。 可能你也在想 Option 是否能够用在 for 语句中，答案是肯定的。 而且，用 for 语句来处理 Option 是可读性最好的方式，尤其是当你有多个 map 、flatMap 、filter 调用的时候。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("for {\n  a <- Set(1)\n  b <- Option(41)\n} yield (a + b)\n// : Set[Int] = Set(42)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])])}),[],!1,null,null,null);a.default=e.exports}}]);