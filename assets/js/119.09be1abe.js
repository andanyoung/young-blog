(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{1066:function(t,v,_){"use strict";_.r(v);var s=_(4),e=Object(s.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("blockquote",[v("p",[t._v("数据库通过 JOIN 连接两张或多张表返回记录时，都会生成一张中间的临时表，再将这张临时表返给用户。\n对主表的筛选条件，应放在 where 条件后，如果在 on 之后，则对主表筛选来说，没有任何意义。")])]),t._v(" "),v("h1",{attrs:{id:"on、where-执行顺序"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#on、where-执行顺序"}},[t._v("#")]),t._v(" on、where 执行顺序")]),t._v(" "),v("blockquote",[v("p",[v("code",[t._v("on")]),t._v("的优先级，高于"),v("code",[t._v("where")]),t._v("。\n两者后面放置相同条件，可能会导致结果集不同，就是因为优先级所致。")])]),t._v(" "),v("h1",{attrs:{id:"_1-mysql-left-join-执行原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-mysql-left-join-执行原理"}},[t._v("#")]),t._v(" 1. mysql left join 执行原理")]),t._v(" "),v("p",[t._v("MySQL 中的 LEFT JOIN 是一种表连接操作,它返回左表中所有的记录,以及符合连接条件的右表中的记录,如果右表中没有符合条件的记录,则对应的列返回 NULL 值.")]),t._v(" "),v("p",[t._v("LEFT JOIN 的执行过程如下:")]),t._v(" "),v("ol",[v("li",[t._v("从左表中取出所有的记录.")]),t._v(" "),v("li",[t._v("对于左表中的每条记录,都在右表中查找符合连接条件的记录,并将左表和右表中符合条件的记录进行连接.")]),t._v(" "),v("li",[t._v("如果右表中没有符合条件的记录,则返回 NULL 值.")]),t._v(" "),v("li",[t._v("返回连接结果,其中包含左表和右表中符合条件的记录.")])]),t._v(" "),v("p",[t._v("总的来说,LEFT JOIN 是通过将左表的所有记录和右表中符合条件的记录进行连接来实现的,如果右表中没有符合条件的记录,则对应的列返回 NULL 值")]),t._v(" "),v("h1",{attrs:{id:"使用示例"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#使用示例"}},[t._v("#")]),t._v(" 使用示例")]),t._v(" "),v("p",[t._v("table1:")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("id")]),t._v(" "),v("th",[t._v("num")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("1")]),t._v(" "),v("td",[t._v("111")])]),t._v(" "),v("tr",[v("td",[t._v("2")]),t._v(" "),v("td",[t._v("222")])])])]),t._v(" "),v("p",[t._v("table2:")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("num")]),t._v(" "),v("th",[t._v("name")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("111")]),t._v(" "),v("td",[t._v("first")])]),t._v(" "),v("tr",[v("td",[t._v("222")]),t._v(" "),v("td",[t._v("second")])])])]),t._v(" "),v("p",[t._v("执行如下两条查询：")]),t._v(" "),v("p",[t._v("sql1:")]),t._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("SELECT\n\ta.id,\n\ta.num,\n\tb.NAME\nFROM\n\ttable1 a\n\tLEFT JOIN table2 b ON ( a.num = b.num AND b.NAME = 'first' );\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br"),v("span",{staticClass:"line-number"},[t._v("6")]),v("br"),v("span",{staticClass:"line-number"},[t._v("7")]),v("br")])]),v("p",[t._v("sql2:")]),t._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("SELECT\n\ta.id,\n\ta.num,\n\tb.NAME\nFROM\n\ttable1 a\n\tLEFT JOIN table2 b ON ( a.num = b.num )\nWHERE\n\tb.NAME = 'first';\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br"),v("span",{staticClass:"line-number"},[t._v("6")]),v("br"),v("span",{staticClass:"line-number"},[t._v("7")]),v("br"),v("span",{staticClass:"line-number"},[t._v("8")]),v("br"),v("span",{staticClass:"line-number"},[t._v("9")]),v("br")])]),v("p",[t._v("则，第 1 条 SQL 返回：")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("id")]),t._v(" "),v("th",[t._v("num")]),t._v(" "),v("th",[t._v("name")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("1")]),t._v(" "),v("td",[t._v("111")]),t._v(" "),v("td",[t._v("first")])]),t._v(" "),v("tr",[v("td",[t._v("2")]),t._v(" "),v("td",[t._v("222")]),t._v(" "),v("td",[t._v("(Null)")])])])]),t._v(" "),v("p",[t._v("第 2 条 SQL 返回：")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("id")]),t._v(" "),v("th",[t._v("num")]),t._v(" "),v("th",[t._v("name")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("1")]),t._v(" "),v("td",[t._v("111")]),t._v(" "),v("td",[t._v("first")])])])]),t._v(" "),v("p",[t._v("第一条 sql 的执行流程：")]),t._v(" "),v("blockquote",[v("p",[t._v("首先找到 b 表的 name 为 first 的记录行"),v("code",[t._v("on (a.num = b.num and b.name='first')")]),t._v("，然后找到 a 的全部数据（left join），生成临时表返回数据。")])]),t._v(" "),v("p",[t._v("第二个 sql 的执行流程：")]),t._v(" "),v("blockquote",[v("p",[t._v("先生成临时表（全量），然后执行 where 过滤"),v("code",[t._v("b.name=’first’")]),t._v("不为真的结果，最后返回数据。")])]),t._v(" "),v("p",[t._v("因为 on 会首先过滤掉不符合条件的行，然后才会进行其它运算。\n执行顺序： "),v("code",[t._v("on > where > having")]),t._v("， 因此理论上 on 是最快的。")]),t._v(" "),v("p",[t._v("多表查询时，on 比 where 更早起作用。系统首先根据各个表之间的联接条件，把多个表整合成一个临时表，再由 where 进行过滤，之后再进行计算，计算完后再由 having 过滤。")]),t._v(" "),v("p",[v("strong",[t._v("对于 JOIN 参与的表的关联操作，如果需要不满足连接条件的行也被返回，就必需把连接条件放在 ON 后，不能放在 WHERE 后面，")]),t._v(" 如果把连接条件放在了 WHERE 后面，那么所有的 LEFT、RIGHT 等操作将不起任何作用，对于这种情况，它的效果就完全等同于 INNER 连接。")]),t._v(" "),v("h1",{attrs:{id:"结论"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#结论"}},[t._v("#")]),t._v(" 结论")]),t._v(" "),v("p",[v("code",[t._v("on")]),t._v("是在生成临时表的时候使用的条件，不管 on 的条件是否起到作用，都会返回左表 (主表) 的行。\n"),v("code",[t._v("where")]),t._v("则是在生成临时表之后使用的条件，此时已经不管是否使用了"),v("code",[t._v("left join")]),t._v("了，只要条件不为真的行，全部过滤。")]),t._v(" "),v("h4",{attrs:{id:"tips"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tips"}},[t._v("#")]),t._v(" Tips：")]),t._v(" "),v("blockquote",[v("p",[t._v("所有的 join 条件必需放在 ON 后面。\n否则前面的 LEFT、RIGHT 关联将作为摆设，不起任何作用。")])]),t._v(" "),v("h1",{attrs:{id:"mysql-中-where-和-on-不同点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mysql-中-where-和-on-不同点"}},[t._v("#")]),t._v(" mysql 中 where 和 on 不同点")]),t._v(" "),v("p",[t._v("在 MySQL 中，WHERE 和 ON 都可以用来过滤查询结果，但它们的使用场景有所不同。")]),t._v(" "),v("ul",[v("li",[t._v("WHERE 用于过滤行级别的数据，其条件是在表连接之后进行过滤的，也就是说，WHERE 后的条件会应用到连接后的所有数据中，包括主表和从表的数据。WHERE 语句一般放在 SQL 语句的末尾，用于筛选查询结果。")]),t._v(" "),v("li",[t._v("ON 用于指定两个表之间的连接条件，其条件是在表连接之前进行过滤的，也就是说，ON 后的条件只会应用到连接的两个表之间，而不会影响其他数据。ON 语句一般放在 SQL 语句的中间，用于指定表之间的连接条件。")])]),t._v(" "),v("p",[v("strong",[t._v("对于主表的筛选条件，应该放在 WHERE 后面，而不是放在 ON 后面")]),t._v("。因为主表的筛选条件是在连接之后进行的，如果把主表的筛选条件放在 ON 后面，那么会先进行表连接，再进行筛选，这样会导致查询的效率变低。而把主表的筛选条件放在 WHERE 后面，可以先进行筛选，再进行表连接，这样可以提高查询的效率。所以，一般情况下，我们建议把主表的筛选条件放在 WHERE 后面。")]),t._v(" "),v("p",[t._v("ON 与 where 的使用一定要注意场所：\n"),v("strong",[t._v("（1）：ON 后面的筛选条件主要是针对的是关联表【而对于主表刷选条件不适用】。")])]),t._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("select  A.ID as AID, B.ID as BID from A left join B on A.ID = B.ID and A.ID = 3\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br")])]),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/fcee990108fde031c276fedf8957e5b1.png",alt:""}})]),t._v(" "),v("p",[t._v("挺诧异的吧和我们期望的结果不一样，筛选出 AID 不为 3 的数据。")]),t._v(" "),v("p",[t._v("但是我们也发现 AID 与 中 AID 1 于 2 对应的值为 NULL，关联表只取了满足 A 表筛刷选条件的值。")]),t._v(" "),v("p",[v("strong",[t._v("即主表条件在 on 后面时附表只取满足主表帅选条件的值、而主表还是取整表。")])]),t._v(" "),v("p",[v("strong",[t._v("（2）：对于主表的筛选条件应放在 where 后面，不应该放在 ON 后面")])]),t._v(" "),v("p",[v("strong",[t._v("（3）：对于关联表我们要区分对待。如果是要条件查询后才连接应该把查询条件放置于 ON 后。")])]),t._v(" "),v("p",[v("strong",[t._v("如果是想再连接完毕后才筛选就应把条件放置于 where 后面")])]),t._v(" "),v("p",[v("strong",[t._v("（4）： 对于关联表我们其实可以先做子查询再做 join")])])])}),[],!1,null,null,null);v.default=e.exports}}]);