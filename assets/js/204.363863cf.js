(window.webpackJsonp=window.webpackJsonp||[]).push([[204],{1532:function(s,a,n){"use strict";n.r(a);var t=n(4),e=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"第-11-章-泛-型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-11-章-泛-型"}},[s._v("#")]),s._v(" 第 11 章 泛 型")]),s._v(" "),a("p",[s._v("Java 中使用 "),a("code",[s._v("<>")]),s._v(" 符号来包含定义的类型参数，Scala 则使用 "),a("code",[s._v("[]")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('class Pair[T, S](val first: T, val second: S) {\n  override def toString: String = first + ":" + second\n}\n\nobject ScalaApp extends App {\n\n  // 使用时候你直接指定参数类型，也可以不指定，由程序自动推断\n  val pair01 = new Pair("heibai01", 22)\n  val pair02 = new Pair[String,Int]("heibai02", 33)\n\n  println(pair01)\n  println(pair02)\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("函数和方法也支持类型参数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("object Utils {\n  def getHalf[T](a: Array[T]): Int = a.length / 2\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"_11-1-协变和逆变"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-1-协变和逆变"}},[s._v("#")]),s._v(" 11.1 协变和逆变")]),s._v(" "),a("p",[a("strong",[s._v("1）语法")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class MyList[+T]{ //协变\n}\nclass MyList[-T]{ //逆变\n}\nclass MyList[T] //不变\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("2）说明")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("协变：Son 是 Father 的子类，则 MyList[Son] 也作为 MyList[Father]的“子类”。")])]),s._v(" "),a("li",[a("p",[s._v("逆变：Son 是 Father 的子类，则 MyList[Son]作为 MyList[Father]的“父类”。")])]),s._v(" "),a("li",[a("p",[s._v("不变：Son 是 Father 的子类，则 MyList[Father]与 MyList[Son]“无父子关系”。")])])]),s._v(" "),a("p",[a("strong",[s._v("3）实操")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//泛型模板\n//class MyList<T>{}\n//不变\n//class MyList[T]{}\n//协变\n//class MyList[+T]{}\n//逆变\n//class MyList[-T]{}\n\nclass Parent{}\n\nclass Child extends Parent{} \n\nclass SubChild extends Child{}\n\nobject Scala_TestGeneric {\n    def main(args: Array[String]): Unit = {\n    //var s:MyList[Child] = new MyList[SubChild]\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("h2",{attrs:{id:"_11-2-泛型上下限"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-2-泛型上下限"}},[s._v("#")]),s._v(" 11.2 泛型上下限")]),s._v(" "),a("p",[s._v("Scala 和 Java 一样，对于对象之间进行大小比较，要求被比较的对象实现 "),a("code",[s._v("java.lang.Comparable")]),s._v(" 接口。所以如果想对泛型进行比较，需要限定类型上界为 "),a("code",[s._v("java.lang.Comparable")]),s._v("，语法为 "),a("code",[s._v("S <: T")]),s._v("，代表类型 S 是类型 T 的子类或其本身。示例如下：")]),s._v(" "),a("p",[s._v("1） 语法")]),s._v(" "),a("p",[s._v("Class PersonList["),a("strong",[s._v("T")]),s._v(" "),a("strong",[s._v("<:")]),s._v(" "),a("strong",[s._v("Person]")]),s._v("{ //泛型上限")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("Class PersonList["),a("strong",[s._v("T")]),s._v(" "),a("strong",[s._v(">:")]),s._v(" "),a("strong",[s._v("Person")]),s._v("]{ //泛型下限")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("2）说明")]),s._v(" "),a("p",[s._v("泛型的上下限的作用是对传入的泛型进行限定。")]),s._v(" "),a("p",[s._v("3）实操")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Parent{}\nclass Child extends Parent{} \nclass SubChild extends Child{}\n\nobject Scala_TestGeneric {\n    def main(args: Array[String]): Unit = {\n\n    //test(classOf[SubChild])\n    //test[Child](new SubChild)\n    }\n\n    //泛型通配符之上限\n    //def test[A <: Child](a:Class[A]): Unit ={\n    //\tprintln(a)\n    //}\n\n    //泛型通配符之下限\n    //def test[A >: Child](a:Class[A]): Unit ={\n    //\tprintln(a)\n    //}\n\n    //泛型通配符之下限 形式扩展\n    def test[A >: Child](a:A): Unit ={ \n    \tprintln(a.getClass.getName)\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("h2",{attrs:{id:"_11-3-上下文限定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-3-上下文限定"}},[s._v("#")]),s._v(" 11.3 上下文限定")]),s._v(" "),a("p",[a("strong",[s._v("1）语法")]),s._v(" "),a("code",[s._v("def f[A : B](a: A) = println(a) //等同于 def f[A](a:A)(implicit arg:B[A])=println(a)")])]),s._v(" "),a("p",[a("strong",[s._v("2）说明")])]),s._v(" "),a("p",[s._v("上下文限定是将泛型和隐式转换的结合产物，以下两者功能相同，使用上下文限定[A : Ordering]之后，方法内无法使用隐式参数名调用隐式参数，需要通过 "),a("strong",[s._v("implicitly[Ordering[A]]")]),s._v(" 获取隐式变量，如果此时无法查找到对应类型的隐式变量，会发生出错误。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("implicit val x = 1\nval y = implicitly[Int]\nval z = implicitly[Double]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("3）实操")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("def f[A:Ordering](a:A,b:A) =implicitly[Ordering[A]].compare(a,b)\ndef f[A](a: A, b: A)(implicit ord: Ordering[A]) = ord.compare(a, b)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])])}),[],!1,null,null,null);a.default=e.exports}}]);