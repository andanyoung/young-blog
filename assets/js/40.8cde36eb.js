(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{1233:function(s,a,n){s.exports=n.p+"assets/img/image-20231213215547662.7ef32c2f.png"},1234:function(s,a,n){s.exports=n.p+"assets/img/image-20231213215657412.f8401a2e.png"},1235:function(s,a,n){s.exports=n.p+"assets/img/image-20231213215815963.d0df1058.png"},1236:function(s,a,n){s.exports=n.p+"assets/img/image-20231213215858372.92afc178.png"},1237:function(s,a,n){s.exports=n.p+"assets/img/image-20231213220048304.c5b1ed6f.png"},1238:function(s,a,n){s.exports=n.p+"assets/img/image-20231213220110723.e612c46c.png"},1239:function(s,a,n){s.exports=n.p+"assets/img/image-20231213220901942.ddb44eb8.png"},1240:function(s,a,n){s.exports=n.p+"assets/img/image-20231213220923644.bd785fea.png"},1241:function(s,a,n){s.exports=n.p+"assets/img/image-20231213220944673.24e69a0d.png"},1242:function(s,a,n){s.exports=n.p+"assets/img/image-20231213223044392.54114f3e.png"},1243:function(s,a,n){s.exports=n.p+"assets/img/image-20231213224604658.a92cd87a.png"},1541:function(s,a,n){"use strict";n.r(a);var t=n(4),e=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"第1章-sparkstreaming-概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第1章-sparkstreaming-概述"}},[s._v("#")]),s._v(" 第1章 SparkStreaming 概述")]),s._v(" "),a("h2",{attrs:{id:"_1-1-spark-streaming-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-spark-streaming-是什么"}},[s._v("#")]),s._v(" 1.1 Spark Streaming 是什么")]),s._v(" "),a("p",[s._v("https://spark.apache.org/streaming/")]),s._v(" "),a("p",[s._v("Spark 流使得构建可扩展的容错流应用程序变得更加容易。")]),s._v(" "),a("p",[s._v("Spark Streaming 用于流式数据的处理。Spark Streaming 支持的数据输入源很多，例如：Kafka、 Flume、Twitter、ZeroMQ 和简单的 TCP 套接字等等。数据输入后可以用 Spark 的高度抽象原语 如：map、reduce、join、window 等进行运算。而结果也能保存在很多地方，如 HDFS，数据库等。")]),s._v(" "),a("p",[a("img",{attrs:{src:n(1233),alt:"image-20231213215547662"}})]),s._v(" "),a("p",[s._v("和 Spark 基于 RDD 的概念很相似，Spark Streaming 使用离散化流(discretized stream)作为抽 象表示，叫作 DStream。DStream 是随时间推移而收到的数据的序列。在内部，每个时间区间收 到的数据都作为 RDD 存在，而 DStream 是由这些 RDD 所组成的序列(因此得名“离散化”)。所以 简单来将，DStream 就是对 RDD 在实时数据处理场景的一种封装。")]),s._v(" "),a("h2",{attrs:{id:"_1-2-spark-streaming-的特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-spark-streaming-的特点"}},[s._v("#")]),s._v(" 1.2 Spark Streaming 的特点")]),s._v(" "),a("h5",{attrs:{id:"易用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#易用"}},[s._v("#")]),s._v(" 易用")]),s._v(" "),a("p",[a("img",{attrs:{src:n(1234),alt:"image-20231213215657412"}})]),s._v(" "),a("h5",{attrs:{id:"统一的批处理和流api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#统一的批处理和流api"}},[s._v("#")]),s._v(" 统一的批处理和流api")]),s._v(" "),a("p",[a("img",{attrs:{src:n(1235),alt:"image-20231213215815963"}})]),s._v(" "),a("h5",{attrs:{id:"低延迟和成本效益"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#低延迟和成本效益"}},[s._v("#")]),s._v(" 低延迟和成本效益")]),s._v(" "),a("p",[a("img",{attrs:{src:n(1236),alt:"image-20231213215858372"}})]),s._v(" "),a("h2",{attrs:{id:"_1-3-spark-streaming-架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-spark-streaming-架构"}},[s._v("#")]),s._v(" 1.3 Spark Streaming 架构")]),s._v(" "),a("h3",{attrs:{id:"_1-3-1-架构图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-架构图"}},[s._v("#")]),s._v(" 1.3.1 架构图")]),s._v(" "),a("h5",{attrs:{id:"整体架构图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整体架构图"}},[s._v("#")]),s._v(" 整体架构图")]),s._v(" "),a("p",[a("img",{attrs:{src:n(1237),alt:"image-20231213220048304"}})]),s._v(" "),a("h5",{attrs:{id:"sparkstreaming-架构图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sparkstreaming-架构图"}},[s._v("#")]),s._v(" SparkStreaming 架构图")]),s._v(" "),a("p",[a("img",{attrs:{src:n(1238),alt:"image-20231213220110723"}})]),s._v(" "),a("h3",{attrs:{id:"_1-3-2-背压机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-背压机制"}},[s._v("#")]),s._v(" 1.3.2 背压机制")]),s._v(" "),a("p",[s._v("Spark 1.5 以前版本，用户如果要限制 Receiver 的数据接收速率，可以通过设置静态配制参数“spark.streaming.receiver.maxRate”的值来实现，此举虽然可以通过限制接收速率，来适配当前的处理能力，防止内存溢出，但也会引入其它问题。比如：producer 数据生产高于 maxRate，当前集群处理能力也高于 maxRate，这就会造成资源利用率下降等问题。 为了更好的协调数据接收速率与资源处理能力，1.5 版本开始 Spark Streaming 可以动态控制数据接收速率来适配集群数据处理能力。"),a("strong",[s._v("背压机制（即 Spark Streaming Backpressure）")]),s._v(": 根据 JobScheduler 反馈作业的执行信息来动态调整 Receiver 数据接收率。 通过属性“spark.streaming.backpressure.enabled”来控制是否启用 backpressure 机制，默认值 false，即不启用。")]),s._v(" "),a("h1",{attrs:{id:"第-2-章-dstream-入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-2-章-dstream-入门"}},[s._v("#")]),s._v(" 第 2 章 Dstream 入门")]),s._v(" "),a("h2",{attrs:{id:"_2-1-wordcount-案例实操"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-wordcount-案例实操"}},[s._v("#")]),s._v(" 2.1 WordCount 案例实操")]),s._v(" "),a("p",[s._v("➢ 需求：使用 netcat 工具向 9999 端口不断的发送数据，通过 SparkStreaming 读取端口数据并统计不同单词出现的次数")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("添加依赖")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<dependency>\n <groupId>org.apache.spark</groupId>\n <artifactId>spark-streaming_2.12</artifactId>\n <version>3.0.0</version>\n</dependency>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])])]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[s._v("编写代码")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('object SparkStreaming01_WordCount {\n\n    def main(args: Array[String]): Unit = {\n\n        // 初始化 Spark 配置信息\n        // StreamingContext创建时，需要传递两个参数\n        // 第一个参数表示环境配置\n        val sparkConf = new SparkConf().setMaster("local[*]").setAppName("SparkStreaming")\n        // 第二个参数表示批量处理的周期（采集周期）\n        val ssc = new StreamingContext(sparkConf, Seconds(3))\n\n \n        // 通过监控端口创建 DStream，读进来的数据为一行行\n        val lines: ReceiverInputDStream[String] = ssc.socketTextStream("localhost", 9999)\n\t\t// 将每一行数据做切分，形成一个个单词\n        val words = lines.flatMap(_.split(" "))\n\n\t\t// 将单词映射成元组（word,1）\n        val wordToOne = words.map((_,1))\n\n        // 将相同的单词次数做统计\n        val wordToCount: DStream[(String, Int)] = wordToOne.reduceByKey(_+_)\n\n\t\t// 打印\n        wordToCount.print()\n\n        // 由于SparkStreaming采集器是长期执行的任务，所以不能直接关闭\n        // 如果main方法执行完毕，应用程序也会自动结束。所以不能让main执行完毕\n        //ssc.stop()\n        // 1. 启动采集器\n        ssc.start()\n        // 2. 等待采集器的关闭\n        ssc.awaitTermination()\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br")])])])]),s._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("p",[s._v("启动程序并通过 netcat 发送数据：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("nc -lk 9999\nhello spark\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])])]),s._v(" "),a("h2",{attrs:{id:"_2-2-wordcount-解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-wordcount-解析"}},[s._v("#")]),s._v(" 2.2 WordCount 解析")]),s._v(" "),a("p",[s._v("Discretized Stream 是 Spark Streaming 的基础抽象，代表持续性的数据流和经过各种 Spark 原语操作后的结果数据流。在内部实现上，DStream 是一系列连续的 RDD 来表示。每个 RDD 含有 一段时间间隔内的数据。")]),s._v(" "),a("p",[a("img",{attrs:{src:n(1239),alt:"image-20231213220901942"}})]),s._v(" "),a("p",[s._v("对数据的操作也是按照 RDD 为单位来进行的")]),s._v(" "),a("p",[a("img",{attrs:{src:n(1240),alt:"image-20231213220923644"}})]),s._v(" "),a("p",[s._v("计算过程由 Spark Engine 来完成")]),s._v(" "),a("p",[a("img",{attrs:{src:n(1241),alt:"image-20231213220944673"}})]),s._v(" "),a("h1",{attrs:{id:"第-3-章-dstream-创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-3-章-dstream-创建"}},[s._v("#")]),s._v(" 第 3 章 DStream 创建")]),s._v(" "),a("h2",{attrs:{id:"_3-1-rdd-队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-rdd-队列"}},[s._v("#")]),s._v(" 3.1 RDD 队列")]),s._v(" "),a("h3",{attrs:{id:"_3-1-1-用法及说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-用法及说明"}},[s._v("#")]),s._v(" 3.1.1 用法及说明")]),s._v(" "),a("p",[a("strong",[s._v("测试过程中")]),s._v("，可以通过使用 ssc.queueStream(queueOfRDDs)来创建 DStream，每一个推送到这个队列中的 RDD，都会作为一个 DStream 处理。")]),s._v(" "),a("h3",{attrs:{id:"_3-1-2-案例实操"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-案例实操"}},[s._v("#")]),s._v(" 3.1.2 案例实操")]),s._v(" "),a("p",[s._v("需求：循环创建几个 RDD，将 RDD 放入队列。通过 SparkStream 创建 Dstream，计算WordCount")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("编写代码")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('object RDDStream {\n  def main(args: Array[String]) {\n    //1.初始化 Spark 配置信息\n    val conf = new SparkConf().setMaster("local[*]").setAppName("RDDStream")\n    \n    //2.初始化 SparkStreamingContext\n    val ssc = new StreamingContext(conf, Seconds(4))\n    \n    //3.创建 RDD 队列\n    val rddQueue = new mutable.Queue[RDD[Int]]()\n    \n    //4.创建 QueueInputDStream\n    val inputStream = ssc.queueStream(rddQueue, oneAtATime = false)\n    \n    //5.处理队列中的 RDD 数据\n    val mappedStream = inputStream.map((_, 1))\n    val reducedStream = mappedStream.reduceByKey(_ + _)\n    \n    //6.打印结果\n    reducedStream.print()\n    \n    //7.启动任务\n    ssc.start()\n    \n    //8.循环创建并向 RDD 队列中放入 RDD\n    for (i <- 1 to 5) {\n      rddQueue += ssc.sparkContext.makeRDD(1 to 300, 10)\n      Thread.sleep(2000)\n    }\n    ssc.awaitTermination()\n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br")])])])]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[s._v("结果展示")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("-------------------------------------------\nTime: 1539075280000 ms\n-------------------------------------------\n(4,60)\n(0,60)\n(6,60)\n(8,60)\n(2,60)\n(1,60)\n(3,60)\n(7,60)\n(9,60)\n(5,60)\n-------------------------------------------\nTime: 1539075284000 ms\n-------------------------------------------\n(4,60)\n(0,60)\n(6,60)\n(8,60)\n(2,60)\n(1,60)\n(3,60)\n(7,60)\n(9,60)\n(5,60)\n-------------------------------------------\nTime: 1539075288000 ms\n-------------------------------------------\n(4,30)\n(0,30)\n(6,30)\n(8,30)\n(2,30)\n(1,30)\n(3,30)\n(7,30)\n(9,30)\n(5,30)\n-------------------------------------------\nTime: 1539075292000 ms\n-------------------------------------------\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br")])])])]),s._v(" "),a("h2",{attrs:{id:"_3-2-自定义数据源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-自定义数据源"}},[s._v("#")]),s._v(" 3.2 自定义数据源")]),s._v(" "),a("h3",{attrs:{id:"_3-2-1-用法及说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-用法及说明"}},[s._v("#")]),s._v(" 3.2.1 用法及说明")]),s._v(" "),a("p",[s._v("需要继承 Receiver，并实现 onStart、onStop 方法来自定义数据源采集。")]),s._v(" "),a("h3",{attrs:{id:"_3-2-2-案例实操"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-案例实操"}},[s._v("#")]),s._v(" 3.2.2 案例实操")]),s._v(" "),a("p",[s._v("需求：自定义数据源，实现监控某个端口号，获取该端口号内容。")]),s._v(" "),a("ol",[a("li",[s._v("自定义数据源")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('import org.apache.spark.SparkConf\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.storage.StorageLevel\nimport org.apache.spark.streaming.dstream.ReceiverInputDStream\nimport org.apache.spark.streaming.receiver.Receiver\nimport org.apache.spark.streaming.{Seconds, StreamingContext}\n\nimport scala.collection.mutable\n\nobject CustomerReceiver {\n\n    def main(args: Array[String]): Unit = {\n\n        val sparkConf = new SparkConf().setMaster("local[*]").setAppName("SparkStreaming")\n        val ssc = new StreamingContext(sparkConf, Seconds(3))\n\n        val messageDS: ReceiverInputDStream[String] = ssc.receiverStream(new MyReceiver())\n        messageDS.print()\n\n        ssc.start()\n        ssc.awaitTermination()\n    }\n    /*\n    自定义数据采集器\n    1. 继承Receiver，定义泛型, 传递参数\n    2. 重写方法\n     */\n    class MyReceiver extends Receiver[String](StorageLevel.MEMORY_ONLY) {\n        private var flg = true\n        override def onStart(): Unit = {\n            new Thread(new Runnable {\n                override def run(): Unit = {\n                    while ( flg ) {\n                        val message = "采集的数据为：" + new Random().nextInt(10).toString\n                        store(message)\n                        Thread.sleep(500)\n                    }\n                }\n            }).start()\n        }\n\n        override def onStop(): Unit = {\n            flg = false;\n        }\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br")])]),a("h2",{attrs:{id:"_3-3-kafka-数据源-面试、开发重点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-kafka-数据源-面试、开发重点"}},[s._v("#")]),s._v(" 3.3 Kafka 数据源（面试、开发重点）")]),s._v(" "),a("h3",{attrs:{id:"_3-3-1-版本选型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-版本选型"}},[s._v("#")]),s._v(" 3.3.1 版本选型")]),s._v(" "),a("p",[a("strong",[s._v("ReceiverAPI")]),s._v("：需要一个专门的 Executor 去接收数据，然后发送给其他的 Executor 做计算。存在\n的问题，接收数据的 Executor 和计算的 Executor 速度会有所不同，特别在接收数据的 Executor\n速度大于计算的 Executor 速度，会导致计算数据的节点内存溢出。早期版本中提供此方式，当\n前版本不适用\n"),a("strong",[s._v("DirectAPI")]),s._v("：是由计算的 Executor 来主动消费 Kafka 的数据，速度由自身控制。")]),s._v(" "),a("h3",{attrs:{id:"_3-3-2-kafka-0-8-receiver-模式-当前版本不适用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-kafka-0-8-receiver-模式-当前版本不适用"}},[s._v("#")]),s._v(" 3.3.2 Kafka 0-8 Receiver 模式（当前版本不适用）")]),s._v(" "),a("p",[s._v("1） 需求：通过 SparkStreaming 从 Kafka 读取数据，并将读取过来的数据做简单计算，最终打印到控制台。")]),s._v(" "),a("p",[s._v("2）导入依赖")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<dependency>\n <groupId>org.apache.spark</groupId>\n <artifactId>spark-streaming-kafka-0-8_2.11</artifactId>\n <version>2.4.5</version>\n</dependency>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("3）编写代码（自动维护 offset）")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('object DirectAPIAuto02 {\n  val getSSC1: () => StreamingContext = () => {\n    val sparkConf: SparkConf = new\n        SparkConf().setAppName("ReceiverWordCount").setMaster("local[*]")\n    val ssc = new StreamingContext(sparkConf, Seconds(3))\n    ssc\n  }\n\n  def main(args: Array[String]): Unit = {\n    //获取 SSC\n    val ssc: StreamingContext = StreamingContext.getActiveOrCreate("./ck2", () =>\n      getSSC)\n    //开启任务\n    ssc.start()\n    ssc.awaitTermination()\n  }\n\n  def getSSC: StreamingContext = {\n    \n    //1.创建 SparkConf\n    val sparkConf: SparkConf = new SparkConf().setAppName("ReceiverWordCount").setMaster("local[*]")\n    \n    //2.创建 StreamingContext\n    val ssc = new StreamingContext(sparkConf, Seconds(3))\n    //设置 CK\n    ssc.checkpoint("./ck2")\n    \n    //3.定义 Kafka 参数\n    val kafkaPara: Map[String, String] = Map[String, String](\n      ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG ->\n        "linux1:9092,linux2:9092,linux3:9092",\n      ConsumerConfig.GROUP_ID_CONFIG -> "atguigu"\n    )\n    \n    //4.读取 Kafka 数据\n    val kafkaDStream: InputDStream[(String, String)] =\n      KafkaUtils.createDirectStream[String, String, StringDecoder, StringDecoder](ssc,\n        kafkaPara,\n        Set("atguigu"))\n        \n    //5.计算 WordCount\n    kafkaDStream.map(_._2)\n      .flatMap(_.split(" "))\n      .map((_, 1))\n      .reduceByKey(_ + _)\n      .print()\n    //6.返回数据\n    ssc\n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br")])]),a("p",[s._v("4）编写代码（手动维护 offset）")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('object DirectAPIHandler {\n  def main(args: Array[String]): Unit = {\n    \n    //1.创建 SparkConf\n    val sparkConf: SparkConf = new SparkConf().setAppName("ReceiverWordCount").setMaster("local[*]")\n    //2.创建 StreamingContext\n    val ssc = new StreamingContext(sparkConf, Seconds(3))\n    \n    //3.Kafka 参数\n    val kafkaPara: Map[String, String] = Map[String, String](\n      ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG ->\n        "hadoop102:9092,hadoop103:9092,hadoop104:9092",\n      ConsumerConfig.GROUP_ID_CONFIG -> "atguigu"\n    )\n    \n    //4.获取上一次启动最后保留的 Offset=>getOffset(MySQL)\n    val fromOffsets: Map[TopicAndPartition, Long] = Map[TopicAndPartition,\n      Long](TopicAndPartition("atguigu", 0) -> 20)\n    \n    //5.读取 Kafka 数据创建 DStream\n    val kafkaDStream: InputDStream[String] = KafkaUtils.createDirectStream[String,\n      String, StringDecoder, StringDecoder, String](ssc,\n      kafkaPara,\n      fromOffsets,\n      (m: MessageAndMetadata[String, String]) => m.message())\n    \n    //6.创建一个数组用于存放当前消费数据的 offset 信息\n    var offsetRanges = Array.empty[OffsetRange]\n    \n    //7.获取当前消费数据的 offset 信息\n    val wordToCountDStream: DStream[(String, Int)] = kafkaDStream.transform { rdd\n      =>\n        offsetRanges = rdd.asInstanceOf[HasOffsetRanges].offsetRanges\n        rdd\n      }.flatMap(_.split(" "))\n      .map((_, 1))\n      .reduceByKey(_ + _)\n    //8.打印 Offset 信息\n    wordToCountDStream.foreachRDD(rdd => {\n      for (o <- offsetRanges) {\n        println(s"${o.topic}:${o.partition}:${o.fromOffset}:${o.untilOffset}")\n      }\n      rdd.foreach(println)\n    })\n    \n    //9.开启任务\n    ssc.start()\n    ssc.awaitTermination()\n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br")])]),a("h3",{attrs:{id:"_3-3-4-kafka-0-10-direct-模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-4-kafka-0-10-direct-模式"}},[s._v("#")]),s._v(" 3.3.4 Kafka 0-10 Direct 模式")]),s._v(" "),a("p",[s._v("1）需求：通过 SparkStreaming 从 Kafka 读取数据，并将读取过来的数据做简单计算，最终打印 到控制台。")]),s._v(" "),a("p",[s._v("2）导入依赖")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<dependency>\n <groupId>org.apache.spark</groupId>\n <artifactId>spark-streaming-kafka-0-10_2.12</artifactId>\n <version>3.0.0</version>\n</dependency>\n<dependency>\n <groupId>com.fasterxml.jackson.core</groupId>\n <artifactId>jackson-core</artifactId>\n <version>2.10.1</version>\n</dependency>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("3）编写代码")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('object DirectAPI {\n  def main(args: Array[String]): Unit = {\n    //1.创建 SparkConf\n    val sparkConf: SparkConf = new SparkConf().setAppName("ReceiverWordCount").setMaster("local[*]")\n\n    //2.创建 StreamingContext\n    val ssc = new StreamingContext(sparkConf, Seconds(3))\n    //3.定义 Kafka 参数\n    val kafkaPara: Map[String, Object] = Map[String, Object](\n      ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG ->\n        "linux1:9092,linux2:9092,linux3:9092",\n      ConsumerConfig.GROUP_ID_CONFIG -> "atguigu",\n      "key.deserializer" ->\n        "org.apache.kafka.common.serialization.StringDeserializer",\n      "value.deserializer" ->\n        "org.apache.kafka.common.serialization.StringDeserializer"\n    )\n    \n    //4.读取 Kafka 数据创建 DStream\n    val kafkaDStream: InputDStream[ConsumerRecord[String, String]] =\n      KafkaUtils.createDirectStream[String, String](ssc,\n        LocationStrategies.PreferConsistent,\n        ConsumerStrategies.Subscribe[String, String](Set("atguigu"), kafkaPara))\n        \n    //5.将每条消息的 KV 取出\n    val valueDStream: DStream[String] = kafkaDStream.map(record => record.value())\n    \n    //6.计算 WordCount\n    valueDStream.flatMap(_.split(" "))\n      .map((_, 1))\n      .reduceByKey(_ + _)\n      .print()\n    //7.开启任务\n    ssc.start()\n    ssc.awaitTermination()\n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br")])]),a("h1",{attrs:{id:"第-4-章-dstream-转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-4-章-dstream-转换"}},[s._v("#")]),s._v(" 第 4 章 DStream 转换")]),s._v(" "),a("p",[s._v("DStream 上的操作与 RDD 的类似，分为 Transformations（转换）和 Output Operations（输\n出）两种，此外转换操作中还有一些比较特殊的原语，如：updateStateByKey()、transform()以及\n各种 Window 相关的原语。")]),s._v(" "),a("h2",{attrs:{id:"_4-1-无状态转化操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-无状态转化操作"}},[s._v("#")]),s._v(" 4.1 无状态转化操作")]),s._v(" "),a("p",[a("strong",[s._v("无状态转化")]),s._v("操作就是把简单的 RDD 转化操作应用到每个批次上，也就是转化 DStream 中的每\n一个 RDD。部分无状态转化操作列在了下表中。注意，针对键值对的 DStream 转化操作(比如\nreduceByKey())要添加 import StreamingContext._才能在 Scala 中使用。")]),s._v(" "),a("p",[a("img",{attrs:{src:n(1242),alt:"image-20231213223044392"}})]),s._v(" "),a("p",[s._v("需要记住的是，尽管这些函数看起来像作用在整个流上一样，但事实上每个 DStream 在内部是由许多 RDD（批次）组成，且无状态转化操作是分别应用到每个 RDD 上的。\n例如：reduceByKey()会归约每个时间区间中的数据，但不会归约不同区间之间的数据。")]),s._v(" "),a("h3",{attrs:{id:"_4-1-1-transform"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-transform"}},[s._v("#")]),s._v(" 4.1.1 Transform")]),s._v(" "),a("p",[s._v("Transform 允许 DStream 上执行任意的 RDD-to-RDD 函数。即使这些函数并没有在 DStream 的 API 中暴露出来，通过该函数可以方便的扩展 Spark API。该函数每一批次调度一次。其实也就是对 DStream 中的 RDD 应用转换。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('object Transform {\n  def main(args: Array[String]): Unit = {\n    //创建 SparkConf\n    val sparkConf: SparkConf = new SparkConf().setMaster("local[*]").setAppName("WordCount")\n    \n    //创建 StreamingContext\n    val ssc = new StreamingContext(sparkConf, Seconds(3))\n    \n    //创建 DStream\n    val lineDStream: ReceiverInputDStream[String] = ssc.socketTextStream("linux1",\n      9999)\n    \n    //转换为 RDD 操作\n    val wordAndCountDStream: DStream[(String, Int)] = lineDStream.transform(rdd => {\n      val words: RDD[String] = rdd.flatMap(_.split(" "))\n      val wordAndOne: RDD[(String, Int)] = words.map((_, 1))\n      val value: RDD[(String, Int)] = wordAndOne.reduceByKey(_ + _)\n      value\n    })\n    \n    //打印\n    wordAndCountDStream.print\n    \n    //启动\n    ssc.start()\n    ssc.awaitTermination()\n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])]),a("h3",{attrs:{id:"_4-1-2-join"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-join"}},[s._v("#")]),s._v(" 4.1.2 join")]),s._v(" "),a("p",[s._v("两个流之间的 join 需要两个流的批次大小一致，这样才能做到同时触发计算。计算过程就是对当前批次的两个流中各自的 RDD 进行 join，与两个 RDD 的 join 效果相同。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('object JoinTest {\n  def main(args: Array[String]): Unit = {\n    \n    //1.创建 SparkConf\n    val sparkConf: SparkConf = new\n        SparkConf().setMaster("local[*]").setAppName("JoinTest")\n   \n    //2.创建 StreamingContext\n    val ssc = new StreamingContext(sparkConf, Seconds(5))\n    \n    //3.从端口获取数据创建流\n    val lineDStream1: ReceiverInputDStream[String] =\n      ssc.socketTextStream("linux1", 9999)\n    val lineDStream2: ReceiverInputDStream[String] =\n      ssc.socketTextStream("linux2", 8888)\n   \n    //4.将两个流转换为 KV 类型\n    val wordToOneDStream: DStream[(String, Int)] = lineDStream1.flatMap(_.split(" ")).map((_, 1))\n    val wordToADStream: DStream[(String, String)] = lineDStream2.flatMap(_.split(" ")).map((_, "a"))\n   \n    //5.流的 JOIN\n    val joinDStream: DStream[(String, (Int, String))] =\n      wordToOneDStream.join(wordToADStream)\n      \n    //6.打印\n    joinDStream.print()\n    \n    //7.启动任务\n    ssc.start()\n    ssc.awaitTermination()\n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br")])]),a("h2",{attrs:{id:"_4-2-有状态转化操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-有状态转化操作"}},[s._v("#")]),s._v(" 4.2 有状态转化操作")]),s._v(" "),a("h3",{attrs:{id:"_4-2-1-updatestatebykey"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-updatestatebykey"}},[s._v("#")]),s._v(" 4.2.1 UpdateStateByKey")]),s._v(" "),a("p",[s._v("UpdateStateByKey 原语用于记录历史记录，有时，我们需要在 DStream 中跨批次维护状态(例如流计算中累加 wordcount)。针对这种情况，updateStateByKey()为我们提供了对一个状态变量的访问，用于键值对形式的 DStream。给定一个由(键，事件)对构成的 DStream，并传递一个指定如何根据新的事件更新每个键对应状态的函数，它可以构建出一个新的 DStream，其内部数据为(键，状态) 对。")]),s._v(" "),a("p",[s._v("updateStateByKey() 的结果会是一个新的 DStream，其内部的 RDD 序列是由每个时间区间对应的(键，状态)对组成的。")]),s._v(" "),a("p",[s._v("updateStateByKey 操作使得我们可以在用新信息进行更新时保持任意的状态。为使用这个功能，需要做下面两步：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("定义状态，状态可以是一个任意的数据类型。")])]),s._v(" "),a("li",[a("p",[s._v("定义状态更新函数，用此函数阐明如何使用之前的状态和来自输入流的新值对状态进行更新。")]),s._v(" "),a("p",[s._v("使用 updateStateByKey 需要对检查点目录进行配置，会使用检查点来保存状态。")]),s._v(" "),a("p",[s._v("更新版的 wordcount")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('object WorldCount {\n  def main(args: Array[String]) {\n\n    // 定义更新状态方法，参数 values 为当前批次单词频度，state 为以往批次单词频度\n    val updateFunc = (values: Seq[Int], state: Option[Int]) => {\n      val currentCount = values.foldLeft(0)(_ + _)\n      val previousCount = state.getOrElse(0)\n      Some(currentCount + previousCount)\n    }\n    val conf = new SparkConf().setMaster("local[*]").setAppName("NetworkWordCount")\n    val ssc = new StreamingContext(conf, Seconds(3))\n    ssc.checkpoint("./ck")\n\n    // Create a DStream that will connect to hostname:port, like hadoop102:9999\n    val lines = ssc.socketTextStream("linux1", 9999)\n\n    // Split each line into words\n    val words = lines.flatMap(_.split(" "))\n\n    //import org.apache.spark.streaming.StreamingContext._ // not necessary since Spark 1.3\n    // Count each word in each batch\n    val pairs = words.map(word => (word, 1))\n\n    // 使用 updateStateByKey 来更新状态，统计从运行开始以来单词总的次数\n    val stateDstream = pairs.updateStateByKey[Int](updateFunc)\n    stateDstream.print()\n    ssc.start() // Start the computation\n    ssc.awaitTermination() // Wait for the computation to terminate\n    //ssc.stop()\n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("启动程序并向 9999 端口发送数据")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("nc -lk 9999\nHello World\nHello Scala\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("结果展示")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("-------------------------------------------\nTime: 1504685175000 ms\n-------------------------------------------\n-------------------------------------------\nTime: 1504685181000 ms\n-------------------------------------------\n(shi,1)\n(shui,1)\n(ni,1)\n-------------------------------------------\nTime: 1504685187000 ms\n-------------------------------------------\n(shi,1)\n(ma,1)\n(hao,1)\n(shui,1)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"_4-2-2-windowoperations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2-windowoperations"}},[s._v("#")]),s._v(" 4.2.2 WindowOperations")]),s._v(" "),a("p",[s._v("Window Operations 可以设置窗口的大小和滑动窗口的间隔来动态的获取当前 Steaming 的允许状态。所有基于窗口的操作都需要两个参数，分别为窗口时长以及滑动步长。")]),s._v(" "),a("p",[s._v("➢  窗口时长：计算内容的时间范围；")]),s._v(" "),a("p",[s._v("➢ 滑动步长：隔多久触发一次计算。")]),s._v(" "),a("blockquote",[a("p",[s._v("注意：这两者都必须为采集周期大小的整数倍。")])]),s._v(" "),a("p",[s._v("WordCount 第三版：3 秒一个批次，窗口 12 秒，滑步 6 秒。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('object WorldCount {\n  def main(args: Array[String]) {\n    val conf = new  SparkConf().setMaster("local[2]").setAppName("NetworkWordCount")\n    val ssc = new StreamingContext(conf, Seconds(3))\n    ssc.checkpoint("./ck")\n    \n    // Create a DStream that will connect to hostname:port, like localhost:9999\n    val lines = ssc.socketTextStream("linux1", 9999)\n    \n    // Split each line into words\n    val words = lines.flatMap(_.split(" "))\n    \n    // Count each word in each batch\n    val pairs = words.map(word => (word, 1))\n    val wordCounts = pairs.reduceByKeyAndWindow((a: Int, b: Int) => (a + b), Seconds(12), Seconds(6))\n    \n    // Print the first ten elements of each RDD generated in this DStream to the console\n    wordCounts.print()\n    ssc.start() // Start the computation\n    ssc.awaitTermination() // Wait for the computation to terminate\n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("p",[s._v("关于 Window 的操作还有如下方法：")]),s._v(" "),a("p",[s._v("（1）window(windowLength, slideInterval): 基于对源 DStream 窗化的批次进行计算返回一个 新的 Dstream；")]),s._v(" "),a("p",[s._v("（2）countByWindow(windowLength, slideInterval): 返回一个滑动窗口计数流中的元素个数；")]),s._v(" "),a("p",[s._v("（3）reduceByWindow(func, windowLength, slideInterval): 通过使用自定义函数整合滑动区间流元素来创建一个新的单元素流；")]),s._v(" "),a("p",[s._v("（4）reduceByKeyAndWindow(func, windowLength, slideInterval, [numTasks]): 当在一个(K,V) 对的 DStream 上调用此函数，会返回一个新(K,V)对的 DStream，此处通过对滑动窗口中批次数 据使用 reduce 函数来整合每个 key 的 value 值。")]),s._v(" "),a("p",[s._v("（5）reduceByKeyAndWindow(func, invFunc, windowLength, slideInterval, [numTasks]): 这个函数是上述函数的变化版本，每个窗口的 reduce 值都是通过用前一个窗的 reduce 值来递增计算。 通过 reduce 进入到滑动窗口数据并”反向 reduce”离开窗口的旧数据来实现这个操作。一个例子是随着窗口滑动对 keys 的“加”“减”计数。通过前边介绍可以想到，这个函数只适用于可逆的 reduce 函数”，也就是这些 reduce 函数有相应的”反 reduce”函数(以参数 invFunc 形式 传入)。如前述函数，reduce 任务的数量通过可选参数来配置。")]),s._v(" "),a("p",[a("img",{attrs:{src:n(1243),alt:"image-20231213224604658"}})]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("val ipDStream = accessLogsDStream.map(logEntry => (logEntry.getIpAddress(), 1))\nval ipCountDStream = ipDStream.reduceByKeyAndWindow(\n {(x, y) => x + y},\n {(x, y) => x - y},\n Seconds(30),\n Seconds(10))\n //加上新进入窗口的批次中的元素 //移除离开窗口的老批次中的元素 //窗口时长// 滑动步长\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("countByWindow()和 countByValueAndWindow()作为对数据进行计数操作的简写。 countByWindow()返回一个表示每个窗口中元素个数的 DStream，而 countByValueAndWindow() 返回的 DStream 则包含窗口中每个值的个数。")]),s._v(" "),a("h1",{attrs:{id:"第-5-章-dstream-输出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-5-章-dstream-输出"}},[s._v("#")]),s._v(" 第 5 章 DStream 输出")]),s._v(" "),a("p",[s._v("输出操作指定了对流数据经转化操作得到的数据所要执行的操作(例如把结果推入外部数据库或输出到屏幕上)。与 RDD 中的惰性求值类似，如果一个 DStream 及其派生出的 DStream 都没有被执行输出操作，那么这些 DStream 就都不会被求值。如果 StreamingContext 中没有设定输出操作，整个 context 就都不会启动。")]),s._v(" "),a("p",[s._v("输出操作如下：")]),s._v(" "),a("p",[s._v("➢ print()：在运行流程序的"),a("strong",[s._v("驱动结点")]),s._v("上打印 DStream 中每一批次数据的最开始 10 个元素。这用于开发和调试。在 Python API 中，同样的操作叫 print()。")]),s._v(" "),a("p",[s._v("➢ saveAsTextFiles(prefix, [suffix])：以 text 文件形式存储这个 DStream 的内容。每一批次的存储文件名基于参数中的 prefix 和 suffix。”prefix-Time_IN_MS[.suffix]”。")]),s._v(" "),a("p",[s._v('➢ saveAsObjectFiles(prefix, [suffix])：以 Java 对象序列化的方式将 Stream 中的数据保存为 SequenceFiles . 每一批次的存储文件名基于参数中的为"prefix-TIME_IN_MS[.suffix]". Python 中目前不可用。')]),s._v(" "),a("p",[s._v('➢ saveAsHadoopFiles(prefix, [suffix])：将 Stream 中的数据保存为 Hadoop files. 每一批次的存储文件名基于参数中的为"prefix-TIME_IN_MS[.suffix]"。Python API 中目前不可用。')]),s._v(" "),a("p",[s._v("➢ foreachRDD(func)：这是最通用的输出操作，即将函数 func 用于产生于 stream 的每一个 RDD。其中参数传入的函数 func 应该实现将每一个 RDD 中数据推送到外部系统，如将 RDD 存入文件或者通过网络将其写入数据库。")]),s._v(" "),a("p",[s._v("通用的输出操作 foreachRDD()，它用来对 DStream 中的 RDD 运行任意计算。这和 transform() 有些类似，都可以让我们访问任意 RDD。在 foreachRDD()中，可以重用我们在 Spark 中实现的所有行动操作。比如，常见的用例之一是把数据写到诸如 MySQL 的外部数据库中。")]),s._v(" "),a("p",[s._v("注意：")]),s._v(" "),a("ol",[a("li",[s._v("连接不能写在 driver 层面（序列化）")]),s._v(" "),a("li",[s._v("如果写在 foreach 则每个 RDD 中的每一条数据都创建，得不偿失；")]),s._v(" "),a("li",[s._v("增加 foreachPartition，在分区创建（获取）。")])]),s._v(" "),a("blockquote",[a("p",[s._v("（1）、foreachRdd运行在driver节点，因为它是操作dstream的。foreachPartition和foreach运行在worker节点，因为它是操作rdd的。foreachRdd开启对任务的启动，当执行到执行算子的时候开始任务的执行。\n（2）、对rdd进行操作的就运行在worker节点，对dstream进行操作的就运行在driver节点。")]),s._v(" "),a("p",[s._v("（3）、以下代码将rdd转成了set，所以在driver端执行。")])]),s._v(" "),a("h1",{attrs:{id:"第-6-章-优雅关闭"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-6-章-优雅关闭"}},[s._v("#")]),s._v(" 第 6 章 优雅关闭")]),s._v(" "),a("p",[s._v("流式任务需要 7*24 小时执行，但是有时涉及到升级代码需要主动停止程序，但是分布式程序，没办法做到一个个进程去杀死，所有配置优雅的关闭就显得至关重要了。\n使用外部文件系统来控制内部程序关闭。")]),s._v(" "),a("p",[s._v("➢ MonitorStop")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('class MonitorStop(ssc: StreamingContext) extends Runnable {\n  override def run(): Unit = {\n    val fs: FileSystem = FileSystem.get(new URI("hdfs://linux1:9000"), new Configuration(), "atguigu")\n    while (true) {\n      try\n        Thread.sleep(5000)\n      catch {\n        case e: InterruptedException =>\n          e.printStackTrace()\n      }\n      val state: StreamingContextState = ssc.getState\n      val bool: Boolean = fs.exists(new Path("hdfs://linux1:9000/stopSpark"))\n      if (bool) {\n        if (state == StreamingContextState.ACTIVE) {\n          ssc.stop(stopSparkContext = true, stopGracefully = true)\n          System.exit(0)\n        }\n      }\n    }\n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("p",[s._v("➢ SparkTest")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('object SparkTest {\n  def main(args: Array[String]): Unit = {\n\n    val ssc: StreamingContext = StreamingContext.getActiveOrCreate("./ck", () =>\n      createSSC())\n    new Thread(new MonitorStop(ssc)).start()\n    ssc.start()\n    ssc.awaitTermination()\n  }\n\n  def createSSC(): _root_.org.apache.spark.streaming.StreamingContext = {\n\n    val update: (Seq[Int], Option[Int]) => Some[Int] = (values: Seq[Int], status: Option[Int]) => {\n      //当前批次内容的计算\n      val sum: Int = values.sum\n      //取出状态信息中上一次状态\n      val lastStatu: Int = status.getOrElse(0)\n      Some(sum + lastStatu)\n    }\n    val sparkConf: SparkConf = new\n        SparkConf().setMaster("local[4]").setAppName("SparkTest")\n\n    //设置优雅的关闭\n    sparkConf.set("spark.streaming.stopGracefullyOnShutdown", "true")\n    val ssc = new StreamingContext(sparkConf, Seconds(5))\n    ssc.checkpoint("./ck")\n    val line: ReceiverInputDStream[String] = ssc.socketTextStream("linux1", 9999)\n    val word: DStream[String] = line.flatMap(_.split(" "))\n    val wordAndOne: DStream[(String, Int)] = word.map((_, 1))\n    val wordAndCount: DStream[(String, Int)] = wordAndOne.updateStateByKey(update)\n    wordAndCount.print()\n    ssc\n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br")])]),a("h1",{attrs:{id:"案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#案例"}},[s._v("#")]),s._v(" 案例")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('package com.atguigu.bigdata.spark.streaming\n\nimport java.sql.ResultSet\nimport java.text.SimpleDateFormat\n\nimport com.atguigu.bigdata.spark.util.JDBCUtil\nimport org.apache.kafka.clients.consumer.{ConsumerConfig, ConsumerRecord}\nimport org.apache.spark.SparkConf\nimport org.apache.spark.streaming.dstream.InputDStream\nimport org.apache.spark.streaming.kafka010.{ConsumerStrategies, KafkaUtils, LocationStrategies}\nimport org.apache.spark.streaming.{Seconds, StreamingContext}\n\nimport scala.collection.mutable.ListBuffer\n\nobject SparkStreaming11_Req1_BlackList {\n\n    def main(args: Array[String]): Unit = {\n\n        val sparkConf = new SparkConf().setMaster("local[*]").setAppName("SparkStreaming")\n        val ssc = new StreamingContext(sparkConf, Seconds(3))\n\n        val kafkaPara: Map[String, Object] = Map[String, Object](\n            ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG -> "linux1:9092,linux2:9092,linux3:9092",\n            ConsumerConfig.GROUP_ID_CONFIG -> "atguigu",\n            "key.deserializer" -> "org.apache.kafka.common.serialization.StringDeserializer",\n            "value.deserializer" -> "org.apache.kafka.common.serialization.StringDeserializer"\n        )\n\n        val kafkaDataDS: InputDStream[ConsumerRecord[String, String]] = KafkaUtils.createDirectStream[String, String](\n            ssc,\n            LocationStrategies.PreferConsistent,\n            ConsumerStrategies.Subscribe[String, String](Set("atguiguNew"), kafkaPara)\n        )\n        val adClickData = kafkaDataDS.map(\n            kafkaData => {\n                val data = kafkaData.value()\n                val datas = data.split(" ")\n                AdClickData(datas(0),datas(1),datas(2),datas(3),datas(4))\n            }\n        )\n\n        val ds = adClickData.transform(\n            rdd => {\n                // TODO 通过JDBC周期性获取黑名单数据\n                val blackList = ListBuffer[String]()\n\n                val conn = JDBCUtil.getConnection\n                val pstat = conn.prepareStatement("select userid from black_list")\n\n                val rs: ResultSet = pstat.executeQuery()\n                while ( rs.next() ) {\n                    blackList.append(rs.getString(1))\n                }\n\n                rs.close()\n                pstat.close()\n                conn.close()\n\n                // TODO 判断点击用户是否在黑名单中\n                val filterRDD = rdd.filter(\n                    data => {\n                        !blackList.contains(data.user)\n                    }\n                )\n\n                // TODO 如果用户不在黑名单中，那么进行统计数量（每个采集周期）\n                filterRDD.map(\n                    data => {\n                        val sdf = new SimpleDateFormat("yyyy-MM-dd")\n                        val day = sdf.format(new java.util.Date( data.ts.toLong ))\n                        val user = data.user\n                        val ad = data.ad\n\n                        (( day, user, ad ), 1) // (word, count)\n                    }\n                ).reduceByKey(_+_)\n            }\n        )\n\n        ds.foreachRDD(\n            rdd => {\n                rdd.foreach{\n                    case ( ( day, user, ad ), count ) => {\n                        println(s"${day} ${user} ${ad} ${count}")\n                        if ( count >= 30 ) {\n                            // TODO 如果统计数量超过点击阈值(30)，那么将用户拉入到黑名单\n                            val conn = JDBCUtil.getConnection\n                            val pstat = conn.prepareStatement(\n                                """\n                                  |insert into black_list (userid) values (?)\n                                  |on DUPLICATE KEY\n                                  |UPDATE userid = ?\n                                """.stripMargin)\n                            pstat.setString(1, user)\n                            pstat.setString(2, user)\n                            pstat.executeUpdate()\n                            pstat.close()\n                            conn.close()\n                        } else {\n                            // TODO 如果没有超过阈值，那么需要将当天的广告点击数量进行更新。\n                            val conn = JDBCUtil.getConnection\n                            val pstat = conn.prepareStatement(\n                                """\n                                  | select\n                                  |     *\n                                  | from user_ad_count\n                                  | where dt = ? and userid = ? and adid = ?\n                                """.stripMargin)\n\n                            pstat.setString(1, day)\n                            pstat.setString(2, user)\n                            pstat.setString(3, ad)\n                            val rs = pstat.executeQuery()\n                            // 查询统计表数据\n                            if ( rs.next() ) {\n                                // 如果存在数据，那么更新\n                                val pstat1 = conn.prepareStatement(\n                                    """\n                                      | update user_ad_count\n                                      | set count = count + ?\n                                      | where dt = ? and userid = ? and adid = ?\n                                    """.stripMargin)\n                                pstat1.setInt(1, count)\n                                pstat1.setString(2, day)\n                                pstat1.setString(3, user)\n                                pstat1.setString(4, ad)\n                                pstat1.executeUpdate()\n                                pstat1.close()\n                                // TODO 判断更新后的点击数据是否超过阈值，如果超过，那么将用户拉入到黑名单。\n                                val pstat2 = conn.prepareStatement(\n                                    """\n                                      |select\n                                      |    *\n                                      |from user_ad_count\n                                      |where dt = ? and userid = ? and adid = ? and count >= 30\n                                    """.stripMargin)\n                                pstat2.setString(1, day)\n                                pstat2.setString(2, user)\n                                pstat2.setString(3, ad)\n                                val rs2 = pstat2.executeQuery()\n                                if ( rs2.next() ) {\n                                    val pstat3 = conn.prepareStatement(\n                                        """\n                                          |insert into black_list (userid) values (?)\n                                          |on DUPLICATE KEY\n                                          |UPDATE userid = ?\n                                        """.stripMargin)\n                                    pstat3.setString(1, user)\n                                    pstat3.setString(2, user)\n                                    pstat3.executeUpdate()\n                                    pstat3.close()\n                                }\n\n                                rs2.close()\n                                pstat2.close()\n                            } else {\n                                // 如果不存在数据，那么新增\n                                val pstat1 = conn.prepareStatement(\n                                    """\n                                      | insert into user_ad_count ( dt, userid, adid, count ) values ( ?, ?, ?, ? )\n                                    """.stripMargin)\n\n                                pstat1.setString(1, day)\n                                pstat1.setString(2, user)\n                                pstat1.setString(3, ad)\n                                pstat1.setInt(4, count)\n                                pstat1.executeUpdate()\n                                pstat1.close()\n                            }\n\n                            rs.close()\n                            pstat.close()\n                            conn.close()\n                        }\n                    }\n                }\n            }\n        )\n\n        ssc.start()\n        ssc.awaitTermination()\n    }\n    // 广告点击数据\n    case class AdClickData( ts:String, area:String, city:String, user:String, ad:String )\n\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br"),a("span",{staticClass:"line-number"},[s._v("93")]),a("br"),a("span",{staticClass:"line-number"},[s._v("94")]),a("br"),a("span",{staticClass:"line-number"},[s._v("95")]),a("br"),a("span",{staticClass:"line-number"},[s._v("96")]),a("br"),a("span",{staticClass:"line-number"},[s._v("97")]),a("br"),a("span",{staticClass:"line-number"},[s._v("98")]),a("br"),a("span",{staticClass:"line-number"},[s._v("99")]),a("br"),a("span",{staticClass:"line-number"},[s._v("100")]),a("br"),a("span",{staticClass:"line-number"},[s._v("101")]),a("br"),a("span",{staticClass:"line-number"},[s._v("102")]),a("br"),a("span",{staticClass:"line-number"},[s._v("103")]),a("br"),a("span",{staticClass:"line-number"},[s._v("104")]),a("br"),a("span",{staticClass:"line-number"},[s._v("105")]),a("br"),a("span",{staticClass:"line-number"},[s._v("106")]),a("br"),a("span",{staticClass:"line-number"},[s._v("107")]),a("br"),a("span",{staticClass:"line-number"},[s._v("108")]),a("br"),a("span",{staticClass:"line-number"},[s._v("109")]),a("br"),a("span",{staticClass:"line-number"},[s._v("110")]),a("br"),a("span",{staticClass:"line-number"},[s._v("111")]),a("br"),a("span",{staticClass:"line-number"},[s._v("112")]),a("br"),a("span",{staticClass:"line-number"},[s._v("113")]),a("br"),a("span",{staticClass:"line-number"},[s._v("114")]),a("br"),a("span",{staticClass:"line-number"},[s._v("115")]),a("br"),a("span",{staticClass:"line-number"},[s._v("116")]),a("br"),a("span",{staticClass:"line-number"},[s._v("117")]),a("br"),a("span",{staticClass:"line-number"},[s._v("118")]),a("br"),a("span",{staticClass:"line-number"},[s._v("119")]),a("br"),a("span",{staticClass:"line-number"},[s._v("120")]),a("br"),a("span",{staticClass:"line-number"},[s._v("121")]),a("br"),a("span",{staticClass:"line-number"},[s._v("122")]),a("br"),a("span",{staticClass:"line-number"},[s._v("123")]),a("br"),a("span",{staticClass:"line-number"},[s._v("124")]),a("br"),a("span",{staticClass:"line-number"},[s._v("125")]),a("br"),a("span",{staticClass:"line-number"},[s._v("126")]),a("br"),a("span",{staticClass:"line-number"},[s._v("127")]),a("br"),a("span",{staticClass:"line-number"},[s._v("128")]),a("br"),a("span",{staticClass:"line-number"},[s._v("129")]),a("br"),a("span",{staticClass:"line-number"},[s._v("130")]),a("br"),a("span",{staticClass:"line-number"},[s._v("131")]),a("br"),a("span",{staticClass:"line-number"},[s._v("132")]),a("br"),a("span",{staticClass:"line-number"},[s._v("133")]),a("br"),a("span",{staticClass:"line-number"},[s._v("134")]),a("br"),a("span",{staticClass:"line-number"},[s._v("135")]),a("br"),a("span",{staticClass:"line-number"},[s._v("136")]),a("br"),a("span",{staticClass:"line-number"},[s._v("137")]),a("br"),a("span",{staticClass:"line-number"},[s._v("138")]),a("br"),a("span",{staticClass:"line-number"},[s._v("139")]),a("br"),a("span",{staticClass:"line-number"},[s._v("140")]),a("br"),a("span",{staticClass:"line-number"},[s._v("141")]),a("br"),a("span",{staticClass:"line-number"},[s._v("142")]),a("br"),a("span",{staticClass:"line-number"},[s._v("143")]),a("br"),a("span",{staticClass:"line-number"},[s._v("144")]),a("br"),a("span",{staticClass:"line-number"},[s._v("145")]),a("br"),a("span",{staticClass:"line-number"},[s._v("146")]),a("br"),a("span",{staticClass:"line-number"},[s._v("147")]),a("br"),a("span",{staticClass:"line-number"},[s._v("148")]),a("br"),a("span",{staticClass:"line-number"},[s._v("149")]),a("br"),a("span",{staticClass:"line-number"},[s._v("150")]),a("br"),a("span",{staticClass:"line-number"},[s._v("151")]),a("br"),a("span",{staticClass:"line-number"},[s._v("152")]),a("br"),a("span",{staticClass:"line-number"},[s._v("153")]),a("br"),a("span",{staticClass:"line-number"},[s._v("154")]),a("br"),a("span",{staticClass:"line-number"},[s._v("155")]),a("br"),a("span",{staticClass:"line-number"},[s._v("156")]),a("br"),a("span",{staticClass:"line-number"},[s._v("157")]),a("br"),a("span",{staticClass:"line-number"},[s._v("158")]),a("br"),a("span",{staticClass:"line-number"},[s._v("159")]),a("br"),a("span",{staticClass:"line-number"},[s._v("160")]),a("br"),a("span",{staticClass:"line-number"},[s._v("161")]),a("br"),a("span",{staticClass:"line-number"},[s._v("162")]),a("br"),a("span",{staticClass:"line-number"},[s._v("163")]),a("br"),a("span",{staticClass:"line-number"},[s._v("164")]),a("br"),a("span",{staticClass:"line-number"},[s._v("165")]),a("br"),a("span",{staticClass:"line-number"},[s._v("166")]),a("br"),a("span",{staticClass:"line-number"},[s._v("167")]),a("br"),a("span",{staticClass:"line-number"},[s._v("168")]),a("br"),a("span",{staticClass:"line-number"},[s._v("169")]),a("br"),a("span",{staticClass:"line-number"},[s._v("170")]),a("br"),a("span",{staticClass:"line-number"},[s._v("171")]),a("br"),a("span",{staticClass:"line-number"},[s._v("172")]),a("br"),a("span",{staticClass:"line-number"},[s._v("173")]),a("br"),a("span",{staticClass:"line-number"},[s._v("174")]),a("br"),a("span",{staticClass:"line-number"},[s._v("175")]),a("br"),a("span",{staticClass:"line-number"},[s._v("176")]),a("br"),a("span",{staticClass:"line-number"},[s._v("177")]),a("br"),a("span",{staticClass:"line-number"},[s._v("178")]),a("br"),a("span",{staticClass:"line-number"},[s._v("179")]),a("br"),a("span",{staticClass:"line-number"},[s._v("180")]),a("br"),a("span",{staticClass:"line-number"},[s._v("181")]),a("br"),a("span",{staticClass:"line-number"},[s._v("182")]),a("br"),a("span",{staticClass:"line-number"},[s._v("183")]),a("br"),a("span",{staticClass:"line-number"},[s._v("184")]),a("br"),a("span",{staticClass:"line-number"},[s._v("185")]),a("br"),a("span",{staticClass:"line-number"},[s._v("186")]),a("br")])])])}),[],!1,null,null,null);a.default=e.exports}}]);