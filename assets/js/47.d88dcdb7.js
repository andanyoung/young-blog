(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{639:function(s,a,n){"use strict";n.r(a);var e=n(4),t=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"一、前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、前言"}},[s._v("#")]),s._v(" 一、前言")]),s._v(" "),a("p",[s._v("插件化开发模式正在很多编程语言或技术框架中得以广泛的应用实践，比如大家熟悉的 jenkins，docker 可视化管理平台 rancher，以及日常编码使用的编辑器 idea，vscode 等，随处可见的带有热插拔功能的插件，让系统像插了翅膀一样，大大提升了系统的扩展性和伸缩性，也拓展了系统整体的使用价值，那么为什么要使用插件呢？")]),s._v(" "),a("h2",{attrs:{id:"_1-1-使用插件的好处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-使用插件的好处"}},[s._v("#")]),s._v(" 1.1 使用插件的好处")]),s._v(" "),a("h3",{attrs:{id:"_1-1-1-模块解耦"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-模块解耦"}},[s._v("#")]),s._v(" 1.1.1 模块解耦")]),s._v(" "),a("p",[s._v("实现服务模块之间解耦的方式有很多，但是插件来说，其解耦的程度似乎更高，而且更灵活，可定制化、个性化更好。")]),s._v(" "),a("blockquote",[a("p",[s._v("举例来说，代码中可以使用设计模式来选择使用哪种方式发送短信给下单完成的客户，问题是各个短信服务商并不一定能保证在任何情况下都能发送成功，怎么办呢？这时候设计模式也没法帮你解决这个问题，如果使用定制化插件的方式，结合外部配置参数，假设系统中某种短信发送不出去了，这时候就可以利用插件动态植入，切换为不同的厂商发短信了。")])]),s._v(" "),a("h3",{attrs:{id:"_1-1-2-提升扩展性和开放性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2-提升扩展性和开放性"}},[s._v("#")]),s._v(" 1.1.2 提升扩展性和开放性")]),s._v(" "),a("p",[s._v("以 spring 来说，之所以具备如此广泛的生态，与其自身内置的各种可扩展的插件机制是分不开的，试想为什么使用了 spring 框架之后可以很方便的对接其他中间件，那就是 spring 框架提供了很多基于插件化的扩展点。")]),s._v(" "),a("blockquote",[a("p",[s._v("插件化机制让系统的扩展性得以提升，从而可以丰富系统的周边应用生态。")])]),s._v(" "),a("h3",{attrs:{id:"_1-1-3-方便第三方接入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-3-方便第三方接入"}},[s._v("#")]),s._v(" 1.1.3 方便第三方接入")]),s._v(" "),a("p",[s._v("有了插件之后，第三方应用或系统如果要对接自身的系统，直接基于系统预留的插件接口完成一套适合自己业务的实现即可，而且对自身系统的侵入性很小，甚至可以实现基于配置参数的热加载，方便灵活，开箱即用。")]),s._v(" "),a("h2",{attrs:{id:"_1-2-插件化常用实现思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-插件化常用实现思路"}},[s._v("#")]),s._v(" 1.2 插件化常用实现思路")]),s._v(" "),a("p",[s._v("以 java 为例，这里结合实际经验，整理一些常用的插件化实现思路：")]),s._v(" "),a("ul",[a("li",[s._v("spi 机制；")]),s._v(" "),a("li",[s._v("约定配置和目录，利用反射配合实现；")]),s._v(" "),a("li",[s._v("springboot 中的 Factories 机制；")]),s._v(" "),a("li",[s._v("java agent（探针）技术；")]),s._v(" "),a("li",[s._v("spring 内置扩展点；")]),s._v(" "),a("li",[s._v("第三方插件包，例如：spring-plugin-core；")]),s._v(" "),a("li",[s._v("spring aop 技术；")]),s._v(" "),a("li",[s._v("...")])]),s._v(" "),a("h1",{attrs:{id:"二、java-常用插件实现方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、java-常用插件实现方案"}},[s._v("#")]),s._v(" 二、Java 常用插件实现方案")]),s._v(" "),a("h2",{attrs:{id:"_2-1-serviceloader-方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-serviceloader-方式"}},[s._v("#")]),s._v(" 2.1 serviceloader 方式")]),s._v(" "),a("p",[s._v("serviceloader 是 java 提供的 spi 模式的实现。按照接口开发实现类，而后配置，java 通过 ServiceLoader 来实现统一接口不同实现的依次调用。而 java 中最经典的 serviceloader 的使用就是 Java 的 spi 机制。")]),s._v(" "),a("h3",{attrs:{id:"_2-1-1-java-spi"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-java-spi"}},[s._v("#")]),s._v(" 2.1.1 java spi")]),s._v(" "),a("p",[s._v("SPI 全称 Service Provider Interface ，是 JDK 内置的一种服务发现机制，SPI 是一种动态替换扩展机制，比如有个接口，你想在运行时动态给他添加实现，你只需按照规范给他添加一个实现类即可。比如大家熟悉的 jdbc 中的 Driver 接口，不同的厂商可以提供不同的实现，有 mysql 的，也有 oracle 的，而 Java 的 SPI 机制就可以为某个接口寻找服务的实现。")]),s._v(" "),a("p",[s._v("下面用一张简图说明下 SPI 机制的原理")]),s._v(" "),a("p",[s._v("![](../.vuepress/public/Spring boot/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bCP56CB5Yac5Y-U5Y-U,size_20,color_FFFFFF,t_70,g_se,x_16.png)")]),s._v(" "),a("h3",{attrs:{id:"_2-1-2-java-spi-简单案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-java-spi-简单案例"}},[s._v("#")]),s._v(" 2.1.2 java spi 简单案例")]),s._v(" "),a("p",[s._v("如下工程目录，在某个应用工程中定义一个插件接口，而其他应用工程为了实现这个接口，只需要引入当前工程的 jar 包依赖进行实现即可，这里为了演示我就将不同的实现直接放在同一个工程下；")]),s._v(" "),a("p",[s._v("![](../.vuepress/public/Spring boot/4834856be3c246fcbf3b8e49535cdd8f.png)")]),s._v(" "),a("p",[a("strong",[s._v("定义接口")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public interface MessagePlugin {\n \n    public String sendMsg(Map msgMap);\n \n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("定义两个不同的实现")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class AliyunMsg implements MessagePlugin {\n \n    @Override\n    public String sendMsg(Map msgMap) {\n        System.out.println("aliyun sendMsg");\n        return "aliyun sendMsg";\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class TencentMsg implements MessagePlugin {\n \n    @Override\n    public String sendMsg(Map msgMap) {\n        System.out.println("tencent sendMsg");\n        return "tencent sendMsg";\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("在 resources 目录按照规范要求创建文件目录，并填写实现类的全类名")]),s._v(" "),a("p",[s._v("![](../.vuepress/public/Spring boot/097195c15e8c4eab851d7bd2fd884c94.png)")]),s._v(" "),a("p",[a("strong",[s._v("自定义服务加载类")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public static void main(String[] args) {\n        ServiceLoader<MessagePlugin> serviceLoader = ServiceLoader.load(MessagePlugin.class);\n        Iterator<MessagePlugin> iterator = serviceLoader.iterator();\n        Map map = new HashMap();\n        while (iterator.hasNext()){\n            MessagePlugin messagePlugin = iterator.next();\n            messagePlugin.sendMsg(map);\n        }\n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("运行上面的程序后，可以看到下面的效果，这就是说，使用 ServiceLoader 的方式可以加载到不同接口的实现，业务中只需要根据自身的需求，结合配置参数的方式就可以灵活的控制具体使用哪一个实现。")]),s._v(" "),a("p",[s._v("![](../.vuepress/public/Spring boot/294a31728d7b4de89cc70cfce7876816.png)")]),s._v(" "),a("h2",{attrs:{id:"_2-2-自定义配置约定方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-自定义配置约定方式"}},[s._v("#")]),s._v(" 2.2 自定义配置约定方式")]),s._v(" "),a("p",[s._v("serviceloader 其实是有缺陷的，在使用中必须在 META-INF 里定义接口名称的文件，在文件中才能写上实现类的类名，如果一个项目里插件化的东西比较多，那很可能会出现越来越多配置文件的情况。所以在结合实际项目使用时，可以考虑下面这种实现思路：")]),s._v(" "),a("ul",[a("li",[s._v("A 应用定义接口；")]),s._v(" "),a("li",[s._v("B,C,D 等其他应用定义服务实现；")]),s._v(" "),a("li",[s._v("B,C,D 应用实现后达成 SDK 的 jar；")]),s._v(" "),a("li",[s._v("A 应用引用 SDK 或者将 SDK 放到某个可以读取到的目录下；")]),s._v(" "),a("li",[s._v("A 应用读取并解析 SDK 中的实现类；")])]),s._v(" "),a("p",[s._v("在上文中案例基础上，我们做如下调整；")]),s._v(" "),a("h3",{attrs:{id:"_2-2-1-添加配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-添加配置文件"}},[s._v("#")]),s._v(" 2.2.1 添加配置文件")]),s._v(" "),a("p",[s._v("在配置文件中，将具体的实现类配置进去")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("server :\n  port : 8081\nimpl:\n  name : com.congge.plugins.spi.MessagePlugin\n  clazz :\n    - com.congge.plugins.impl.TencentMsg\n    - com.congge.plugins.impl.AliyunMsg\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"_2-2-2-自定义配置文件加载类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-自定义配置文件加载类"}},[s._v("#")]),s._v(" 2.2.2 自定义配置文件加载类")]),s._v(" "),a("p",[s._v("通过这个类，将上述配置文件中的实现类封装到类对象中，方便后续使用；")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('import lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\n@ConfigurationProperties("impl")\n@ToString\npublic class ClassImpl {\n    @Getter\n    @Setter\n    String name;\n \n    @Getter\n    @Setter\n    String[] clazz;\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("h3",{attrs:{id:"_2-2-3-自定义测试接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-自定义测试接口"}},[s._v("#")]),s._v(" 2.2.3 自定义测试接口")]),s._v(" "),a("p",[s._v("使用上述的封装对象通过类加载的方式动态的在程序中引入")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('import com.congge.config.ClassImpl;\nimport com.congge.plugins.spi.MessagePlugin;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n \nimport java.util.HashMap;\n \n@RestController\npublic class SendMsgController {\n \n    @Autowired\n    ClassImpl classImpl;\n \n    //localhost:8081/sendMsg\n    @GetMapping("/sendMsg")\n    public String sendMsg() throws Exception{\n        for (int i=0;i<classImpl.getClazz().length;i++) {\n            Class pluginClass= Class.forName(classImpl.getClazz()[i]);\n            MessagePlugin messagePlugin = (MessagePlugin) pluginClass.newInstance();\n            messagePlugin.sendMsg(new HashMap());\n        }\n        return "success";\n    }\n \n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("h3",{attrs:{id:"_2-2-4-启动类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-4-启动类"}},[s._v("#")]),s._v(" 2.2.4 启动类")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("@EnableConfigurationProperties({ClassImpl.class})\n@SpringBootApplication\npublic class PluginApp {\n \n    public static void main(String[] args) {\n        SpringApplication.run(PluginApp.class,args);\n    }\n \n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("启动工程代码后，调用接口："),a("a",{attrs:{href:"http://localhost:8081/sendMsg",title:"localhost:8081/sendMsg",target:"_blank",rel:"noopener noreferrer"}},[s._v("localhost:8081/sendMsg"),a("OutboundLink")],1),s._v("，在控制台中可以看到下面的输出信息，即通过这种方式也可以实现类似 serviceloader 的方式，不过在实际使用时，可以结合配置参数进行灵活的控制；")]),s._v(" "),a("p",[s._v("![](../.vuepress/public/Spring boot/d4a980edddab428d85006e5b6f1c7e2f.png)")]),s._v(" "),a("h2",{attrs:{id:"_2-3-自定义配置读取依赖-jar-的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-自定义配置读取依赖-jar-的方式"}},[s._v("#")]),s._v(" 2.3 自定义配置读取依赖 jar 的方式")]),s._v(" "),a("p",[s._v("更进一步，在很多场景下，可能我们并不想直接在工程中引入接口实现的依赖包，这时候可以考虑通过读取指定目录下的依赖 jar 的方式，利用反射的方式进行动态加载，这也是生产中一种比较常用的实践经验。")]),s._v(" "),a("p",[s._v("具体实践来说，主要为下面的步骤：")]),s._v(" "),a("ul",[a("li",[s._v("应用 A 定义服务接口；")]),s._v(" "),a("li",[s._v("应用 B,C,D 等实现接口（或者在应用内部实现相同的接口）；")]),s._v(" "),a("li",[s._v("应用 B,C,D 打成 jar，放到应用 A 约定的读取目录下；")]),s._v(" "),a("li",[s._v("应用 A 加载约定目录下的 jar，通过反射加载目标方法；")])]),s._v(" "),a("p",[s._v("在上述的基础上，按照上面的实现思路来实现一下；")]),s._v(" "),a("h3",{attrs:{id:"_2-3-1-创建约定目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-创建约定目录"}},[s._v("#")]),s._v(" 2.3.1 创建约定目录")]),s._v(" "),a("p",[s._v("在当前工程下创建一个 lib 目录，并将依赖的 jar 放进去")]),s._v(" "),a("p",[s._v("![](../.vuepress/public/Spring boot/11f9a16baded47e9a6d2ae7afe96ebd5.png)")]),s._v(" "),a("h3",{attrs:{id:"_2-3-2-新增读取-jar-的工具类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-新增读取-jar-的工具类"}},[s._v("#")]),s._v(" 2.3.2 新增读取 jar 的工具类")]),s._v(" "),a("p",[s._v("添加一个工具类，用于读取指定目录下的 jar，并通过反射的方式，结合配置文件中的约定配置进行反射方法的执行；")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@Component\npublic class ServiceLoaderUtils {\n \n    @Autowired\n    ClassImpl classImpl;\n \n \n    public static void loadJarsFromAppFolder() throws Exception {\n        String path = "E:\\\\code-self\\\\bitzpp\\\\lib";\n        File f = new File(path);\n        if (f.isDirectory()) {\n            for (File subf : f.listFiles()) {\n                if (subf.isFile()) {\n                    loadJarFile(subf);\n                }\n            }\n        } else {\n            loadJarFile(f);\n        }\n    }\n \n    public static void loadJarFile(File path) throws Exception {\n        URL url = path.toURI().toURL();\n        // 可以获取到AppClassLoader，可以提到前面，不用每次都获取一次\n        URLClassLoader classLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();\n        // 加载\n        //Method method = URLClassLoader.class.getDeclaredMethod("sendMsg", Map.class);\n        Method method = URLClassLoader.class.getMethod("sendMsg", Map.class);\n \n        method.setAccessible(true);\n        method.invoke(classLoader, url);\n    }\n \n    public  void main(String[] args) throws Exception{\n        System.out.println(invokeMethod("hello"));;\n    }\n \n    public String doExecuteMethod() throws Exception{\n        String path = "E:\\\\code-self\\\\bitzpp\\\\lib";\n        File f1 = new File(path);\n        Object result = null;\n        if (f1.isDirectory()) {\n            for (File subf : f1.listFiles()) {\n                //获取文件名称\n                String name = subf.getName();\n                String fullPath = path + "\\\\" + name;\n                //执行反射相关的方法\n                //ServiceLoaderUtils serviceLoaderUtils = new ServiceLoaderUtils();\n                //result = serviceLoaderUtils.loadMethod(fullPath);\n                File f = new File(fullPath);\n                URL urlB = f.toURI().toURL();\n                URLClassLoader classLoaderA = new URLClassLoader(new URL[]{urlB}, Thread.currentThread()\n                        .getContextClassLoader());\n                String[] clazz = classImpl.getClazz();\n                for(String claName : clazz){\n                    if(name.equals("biz-pt-1.0-SNAPSHOT.jar")){\n                        if(!claName.equals("com.congge.spi.BitptImpl")){\n                            continue;\n                        }\n                        Class<?> loadClass = classLoaderA.loadClass(claName);\n                        if(Objects.isNull(loadClass)){\n                            continue;\n                        }\n                        //获取实例\n                        Object obj = loadClass.newInstance();\n                        Map map = new HashMap();\n                        //获取方法\n                        Method method=loadClass.getDeclaredMethod("sendMsg",Map.class);\n                        result = method.invoke(obj,map);\n                        if(Objects.nonNull(result)){\n                            break;\n                        }\n                    }else if(name.equals("miz-pt-1.0-SNAPSHOT.jar")){\n                        if(!claName.equals("com.congge.spi.MizptImpl")){\n                            continue;\n                        }\n                        Class<?> loadClass = classLoaderA.loadClass(claName);\n                        if(Objects.isNull(loadClass)){\n                            continue;\n                        }\n                        //获取实例\n                        Object obj = loadClass.newInstance();\n                        Map map = new HashMap();\n                        //获取方法\n                        Method method=loadClass.getDeclaredMethod("sendMsg",Map.class);\n                        result = method.invoke(obj,map);\n                        if(Objects.nonNull(result)){\n                            break;\n                        }\n                    }\n                }\n                if(Objects.nonNull(result)){\n                    break;\n                }\n            }\n        }\n        return result.toString();\n    }\n \n    public Object loadMethod(String fullPath) throws Exception{\n        File f = new File(fullPath);\n        URL urlB = f.toURI().toURL();\n        URLClassLoader classLoaderA = new URLClassLoader(new URL[]{urlB}, Thread.currentThread()\n                .getContextClassLoader());\n        Object result = null;\n        String[] clazz = classImpl.getClazz();\n        for(String claName : clazz){\n            Class<?> loadClass = classLoaderA.loadClass(claName);\n            if(Objects.isNull(loadClass)){\n                continue;\n            }\n            //获取实例\n            Object obj = loadClass.newInstance();\n            Map map = new HashMap();\n            //获取方法\n            Method method=loadClass.getDeclaredMethod("sendMsg",Map.class);\n            result = method.invoke(obj,map);\n            if(Objects.nonNull(result)){\n                break;\n            }\n        }\n        return result;\n    }\n \n \n    public static String invokeMethod(String text) throws Exception{\n        String path = "E:\\\\code-self\\\\bitzpp\\\\lib\\\\miz-pt-1.0-SNAPSHOT.jar";\n        File f = new File(path);\n        URL urlB = f.toURI().toURL();\n        URLClassLoader classLoaderA = new URLClassLoader(new URL[]{urlB}, Thread.currentThread()\n                .getContextClassLoader());\n        Class<?> product = classLoaderA.loadClass("com.congge.spi.MizptImpl");\n        //获取实例\n        Object obj = product.newInstance();\n        Map map = new HashMap();\n        //获取方法\n        Method method=product.getDeclaredMethod("sendMsg",Map.class);\n        //执行方法\n        Object result1 = method.invoke(obj,map);\n        // TODO According to the requirements , write the implementation code.\n        return result1.toString();\n    }\n \n    public static String getApplicationFolder() {\n        String path = ServiceLoaderUtils.class.getProtectionDomain().getCodeSource().getLocation().getPath();\n        return new File(path).getParent();\n    }\n \n \n \n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br"),a("span",{staticClass:"line-number"},[s._v("93")]),a("br"),a("span",{staticClass:"line-number"},[s._v("94")]),a("br"),a("span",{staticClass:"line-number"},[s._v("95")]),a("br"),a("span",{staticClass:"line-number"},[s._v("96")]),a("br"),a("span",{staticClass:"line-number"},[s._v("97")]),a("br"),a("span",{staticClass:"line-number"},[s._v("98")]),a("br"),a("span",{staticClass:"line-number"},[s._v("99")]),a("br"),a("span",{staticClass:"line-number"},[s._v("100")]),a("br"),a("span",{staticClass:"line-number"},[s._v("101")]),a("br"),a("span",{staticClass:"line-number"},[s._v("102")]),a("br"),a("span",{staticClass:"line-number"},[s._v("103")]),a("br"),a("span",{staticClass:"line-number"},[s._v("104")]),a("br"),a("span",{staticClass:"line-number"},[s._v("105")]),a("br"),a("span",{staticClass:"line-number"},[s._v("106")]),a("br"),a("span",{staticClass:"line-number"},[s._v("107")]),a("br"),a("span",{staticClass:"line-number"},[s._v("108")]),a("br"),a("span",{staticClass:"line-number"},[s._v("109")]),a("br"),a("span",{staticClass:"line-number"},[s._v("110")]),a("br"),a("span",{staticClass:"line-number"},[s._v("111")]),a("br"),a("span",{staticClass:"line-number"},[s._v("112")]),a("br"),a("span",{staticClass:"line-number"},[s._v("113")]),a("br"),a("span",{staticClass:"line-number"},[s._v("114")]),a("br"),a("span",{staticClass:"line-number"},[s._v("115")]),a("br"),a("span",{staticClass:"line-number"},[s._v("116")]),a("br"),a("span",{staticClass:"line-number"},[s._v("117")]),a("br"),a("span",{staticClass:"line-number"},[s._v("118")]),a("br"),a("span",{staticClass:"line-number"},[s._v("119")]),a("br"),a("span",{staticClass:"line-number"},[s._v("120")]),a("br"),a("span",{staticClass:"line-number"},[s._v("121")]),a("br"),a("span",{staticClass:"line-number"},[s._v("122")]),a("br"),a("span",{staticClass:"line-number"},[s._v("123")]),a("br"),a("span",{staticClass:"line-number"},[s._v("124")]),a("br"),a("span",{staticClass:"line-number"},[s._v("125")]),a("br"),a("span",{staticClass:"line-number"},[s._v("126")]),a("br"),a("span",{staticClass:"line-number"},[s._v("127")]),a("br"),a("span",{staticClass:"line-number"},[s._v("128")]),a("br"),a("span",{staticClass:"line-number"},[s._v("129")]),a("br"),a("span",{staticClass:"line-number"},[s._v("130")]),a("br"),a("span",{staticClass:"line-number"},[s._v("131")]),a("br"),a("span",{staticClass:"line-number"},[s._v("132")]),a("br"),a("span",{staticClass:"line-number"},[s._v("133")]),a("br"),a("span",{staticClass:"line-number"},[s._v("134")]),a("br"),a("span",{staticClass:"line-number"},[s._v("135")]),a("br"),a("span",{staticClass:"line-number"},[s._v("136")]),a("br"),a("span",{staticClass:"line-number"},[s._v("137")]),a("br"),a("span",{staticClass:"line-number"},[s._v("138")]),a("br"),a("span",{staticClass:"line-number"},[s._v("139")]),a("br"),a("span",{staticClass:"line-number"},[s._v("140")]),a("br"),a("span",{staticClass:"line-number"},[s._v("141")]),a("br"),a("span",{staticClass:"line-number"},[s._v("142")]),a("br"),a("span",{staticClass:"line-number"},[s._v("143")]),a("br"),a("span",{staticClass:"line-number"},[s._v("144")]),a("br"),a("span",{staticClass:"line-number"},[s._v("145")]),a("br"),a("span",{staticClass:"line-number"},[s._v("146")]),a("br"),a("span",{staticClass:"line-number"},[s._v("147")]),a("br"),a("span",{staticClass:"line-number"},[s._v("148")]),a("br"),a("span",{staticClass:"line-number"},[s._v("149")]),a("br"),a("span",{staticClass:"line-number"},[s._v("150")]),a("br"),a("span",{staticClass:"line-number"},[s._v("151")]),a("br")])]),a("h3",{attrs:{id:"_2-3-3-添加测试接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-3-添加测试接口"}},[s._v("#")]),s._v(" 2.3.3 添加测试接口")]),s._v(" "),a("p",[s._v("添加如下测试接口")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@GetMapping("/sendMsgV2")\n    public String index() throws Exception {\n        String result = serviceLoaderUtils.doExecuteMethod();\n        return result;\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("以上全部完成之后，启动工程，测试一下该接口，仍然可以得到预期结果；")]),s._v(" "),a("p",[s._v("![](../.vuepress/public/Spring boot/ebb5c28a5a1142eda3f3faa5c287c02b.png)")]),s._v(" "),a("blockquote",[a("p",[s._v("在上述的实现中还是比较粗糙的，实际运用时，还需要做较多的优化改进以满足实际的业务需要，比如接口传入类型参数用于控制具体使用哪个依赖包的方法进行执行等；")])]),s._v(" "),a("h1",{attrs:{id:"三、springboot-中的插件化实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、springboot-中的插件化实现"}},[s._v("#")]),s._v(" 三、SpringBoot 中的插件化实现")]),s._v(" "),a("p",[s._v("在大家使用较多的 springboot 框架中，其实框架自身提供了非常多的扩展点，其中最适合做插件扩展的莫过于 spring.factories 的实现；")]),s._v(" "),a("h2",{attrs:{id:"_3-1-spring-boot-中的-spi-机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-spring-boot-中的-spi-机制"}},[s._v("#")]),s._v(" 3.1 Spring Boot 中的 SPI 机制")]),s._v(" "),a("p",[s._v("在 Spring 中也有一种类似与 Java SPI 的加载机制。它在 META-INF/spring.factories 文件中配置接口的实现类名称，然后在程序中读取这些配置文件并实例化，这种自定义的 SPI 机制是 Spring Boot Starter 实现的基础。")]),s._v(" "),a("h2",{attrs:{id:"_3-2-spring-factories-实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-spring-factories-实现原理"}},[s._v("#")]),s._v(" 3.2 Spring Factories 实现原理")]),s._v(" "),a("p",[s._v("spring-core 包里定义了 SpringFactoriesLoader 类，这个类实现了检索 META-INF/spring.factories 文件，并获取指定接口的配置的功能。在这个类中定义了两个对外的方法：")]),s._v(" "),a("ul",[a("li",[s._v("loadFactories 根据接口类获取其实现类的实例，这个方法返回的是对象列表；")]),s._v(" "),a("li",[s._v("loadFactoryNames 根据接口获取其接口类的名称，这个方法返回的是类名的列表；")])]),s._v(" "),a("p",[s._v("上面的两个方法的关键都是从指定的 ClassLoader 中获取 spring.factories 文件，并解析得到类名列表，具体代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public static List<String> loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader) {\n    String factoryClassName = factoryClass.getName();\n    try {\n        Enumeration<URL> urls = (classLoader != null ? classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :\n                ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));\n        List<String> result = new ArrayList<String>();\n        while (urls.hasMoreElements()) {\n            URL url = urls.nextElement();\n            Properties properties = PropertiesLoaderUtils.loadProperties(new UrlResource(url));\n            String factoryClassNames = properties.getProperty(factoryClassName);\n            result.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(factoryClassNames)));\n        }\n        return result;\n    }\n    catch (IOException ex) {\n        throw new IllegalArgumentException("Unable to load [" + factoryClass.getName() +\n                "] factories from location [" + FACTORIES_RESOURCE_LOCATION + "]", ex);\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("从代码中我们可以知道，在这个方法中会遍历整个 ClassLoader 中所有 jar 包下的 spring.factories 文件，就是说我们可以在自己的 jar 中配置 spring.factories 文件，不会影响到其它地方的配置，也不会被别人的配置覆盖。")]),s._v(" "),a("p",[s._v("spring.factories 的是通过 Properties 解析得到的，所以我们在写文件中的内容都是安装下面这种方式配置的：")]),s._v(" "),a("blockquote",[a("p",[s._v("com.xxx.interface=com.xxx.classname")]),s._v(" "),a("p",[s._v("如果一个接口希望配置多个实现类，可以使用’,’进行分割")])]),s._v(" "),a("h2",{attrs:{id:"_3-3-spring-factories-案例实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-spring-factories-案例实现"}},[s._v("#")]),s._v(" 3.3 Spring Factories 案例实现")]),s._v(" "),a("p",[s._v("接下来看一个具体的案例实现来体验下 Spring Factories 的使用；")]),s._v(" "),a("h3",{attrs:{id:"_3-3-1-定义一个服务接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-定义一个服务接口"}},[s._v("#")]),s._v(" 3.3.1 定义一个服务接口")]),s._v(" "),a("p",[s._v("自定义一个接口，里面添加一个方法；")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public interface SmsPlugin {\n \n    public void sendMessage(String message);\n \n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"_3-3-2-定义-2-个服务实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-定义-2-个服务实现"}},[s._v("#")]),s._v(" 3.3.2 定义 2 个服务实现")]),s._v(" "),a("p",[s._v("实现类 1")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class BizSmsImpl implements SmsPlugin {\n \n    @Override\n    public void sendMessage(String message) {\n        System.out.println("this is BizSmsImpl sendMessage..." + message);\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("实现类 2")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class SystemSmsImpl implements SmsPlugin {\n \n    @Override\n    public void sendMessage(String message) {\n        System.out.println("this is SystemSmsImpl sendMessage..." + message);\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"_3-3-3-添加-spring-factories-文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-3-添加-spring-factories-文件"}},[s._v("#")]),s._v(" 3.3.3 添加 spring.factories 文件")]),s._v(" "),a("p",[s._v("在 resources 目录下，创建一个名叫：META-INF 的目录，然后在该目录下定义一个 spring.factories 的配置文件，内容如下，其实就是配置了服务接口，以及两个实现类的全类名的路径；")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("com.congge.plugin.spi.SmsPlugin=\\\ncom.congge.plugin.impl.SystemSmsImpl,\\\ncom.congge.plugin.impl.BizSmsImpl\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"_3-3-4-添加自定义接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-4-添加自定义接口"}},[s._v("#")]),s._v(" 3.3.4 添加自定义接口")]),s._v(" "),a("p",[s._v("添加一个自定义的接口，有没有发现，这里和 java 的 spi 有点类似，只不过是这里换成了 SpringFactoriesLoader 去加载服务；")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@GetMapping("/sendMsgV3")\n    public String sendMsgV3(String msg) throws Exception{\n        List<SmsPlugin> smsServices= SpringFactoriesLoader.loadFactories(SmsPlugin.class, null);\n        for(SmsPlugin smsService : smsServices){\n            smsService.sendMessage(msg);\n        }\n        return "success";\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("启动工程之后，调用一下该接口进行测试，"),a("a",{attrs:{href:"http://localhost:8087/sendMsgV3?msg=hello",title:"localhost:8087/sendMsgV3?msg=hello",target:"_blank",rel:"noopener noreferrer"}},[s._v("localhost:8087/sendMsgV3?msg=hello"),a("OutboundLink")],1),s._v("，通过控制台，可以看到，这种方式能够正确获取到系统中可用的服务实现；")]),s._v(" "),a("p",[s._v("![](../.vuepress/public/Spring boot/5fc3599106904f3d8299e6ff75bc2df1.png)")]),s._v(" "),a("blockquote",[a("p",[s._v("利用 spring 的这种机制，可以很好的对系统中的某些业务逻辑通过插件化接口的方式进行扩展实现；")])]),s._v(" "),a("h1",{attrs:{id:"四、插件化机制案例实战"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、插件化机制案例实战"}},[s._v("#")]),s._v(" 四、插件化机制案例实战")]),s._v(" "),a("p",[s._v("结合上面掌握的理论知识，下面基于 Java SPI 机制进行一个接近真实使用场景的完整的操作步骤；")]),s._v(" "),a("h2",{attrs:{id:"_4-1-案例背景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-案例背景"}},[s._v("#")]),s._v(" 4.1 案例背景")]),s._v(" "),a("ul",[a("li",[s._v("3 个微服务模块，在 A 模块中有个插件化的接口；")]),s._v(" "),a("li",[s._v("在 A 模块中的某个接口，需要调用插件化的服务实现进行短信发送；")]),s._v(" "),a("li",[s._v("可以通过配置文件配置参数指定具体的哪一种方式发送短信；")]),s._v(" "),a("li",[s._v("如果没有加载到任何插件，将走 A 模块在默认的发短信实现；")])]),s._v(" "),a("h3",{attrs:{id:"_4-1-1-模块结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-模块结构"}},[s._v("#")]),s._v(" 4.1.1 模块结构")]),s._v(" "),a("blockquote",[a("p",[s._v("1、biz-pp，插件化接口工程；")]),s._v(" "),a("p",[s._v("2、bitpt，aliyun 短信发送实现；")]),s._v(" "),a("p",[s._v("3、miz-pt，tencent 短信发送实现；")])]),s._v(" "),a("h3",{attrs:{id:"_4-1-2-整体实现思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-整体实现思路"}},[s._v("#")]),s._v(" 4.1.2 整体实现思路")]),s._v(" "),a("p",[s._v("本案例完整的实现思路参考如下：")]),s._v(" "),a("ul",[a("li",[s._v("biz-pp 定义服务接口，并提供出去 jar 被其他实现工程依赖；")]),s._v(" "),a("li",[s._v("bitpt 与 miz-pt 依赖 biz-pp 的 jar 并实现 SPI 中的方法；")]),s._v(" "),a("li",[s._v("bitpt 与 miz-pt 按照 API 规范实现完成后，打成 jar 包，或者安装到仓库中；")]),s._v(" "),a("li",[s._v("biz-pp 在 pom 中依赖 bitpt 与 miz-pt 的 jar，或者通过启动加载的方式即可得到具体某个实现；")])]),s._v(" "),a("h2",{attrs:{id:"_4-2-biz-pp-关键代码实现过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-biz-pp-关键代码实现过程"}},[s._v("#")]),s._v(" 4.2 biz-pp 关键代码实现过程")]),s._v(" "),a("h3",{attrs:{id:"_4-2-1-添加服务接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-添加服务接口"}},[s._v("#")]),s._v(" 4.2.1 添加服务接口")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public interface MessagePlugin {\n \n    public String sendMsg(Map msgMap);\n \n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"_4-2-2-打成-jar-包并安装到仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2-打成-jar-包并安装到仓库"}},[s._v("#")]),s._v(" 4.2.2 打成 jar 包并安装到仓库")]),s._v(" "),a("p",[s._v("这一步比较简单就不展开了")]),s._v(" "),a("h3",{attrs:{id:"_4-2-3-自定义服务加载工具类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-3-自定义服务加载工具类"}},[s._v("#")]),s._v(" 4.2.3 自定义服务加载工具类")]),s._v(" "),a("p",[s._v("这个类，可以理解为在真实的业务编码中，可以根据业务定义的规则，具体加载哪个插件的实现类进行发送短信的操作；")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('import com.congge.plugin.spi.MessagePlugin;\nimport com.congge.spi.BitptImpl;\nimport com.congge.spi.MizptImpl;\n \nimport java.util.*;\n \npublic class PluginFactory {\n \n    public void installPlugin(){\n        Map context = new LinkedHashMap();\n        context.put("_userId","");\n        context.put("_version","1.0");\n        context.put("_type","sms");\n        ServiceLoader<MessagePlugin> serviceLoader = ServiceLoader.load(MessagePlugin.class);\n        Iterator<MessagePlugin> iterator = serviceLoader.iterator();\n        while (iterator.hasNext()){\n            MessagePlugin messagePlugin = iterator.next();\n            messagePlugin.sendMsg(context);\n        }\n    }\n \n    public static MessagePlugin getTargetPlugin(String type){\n        ServiceLoader<MessagePlugin> serviceLoader = ServiceLoader.load(MessagePlugin.class);\n        Iterator<MessagePlugin> iterator = serviceLoader.iterator();\n        List<MessagePlugin> messagePlugins = new ArrayList<>();\n        while (iterator.hasNext()){\n            MessagePlugin messagePlugin = iterator.next();\n            messagePlugins.add(messagePlugin);\n        }\n        MessagePlugin targetPlugin = null;\n        for (MessagePlugin messagePlugin : messagePlugins) {\n            boolean findTarget = false;\n            switch (type) {\n                case "aliyun":\n                    if (messagePlugin instanceof BitptImpl){\n                        targetPlugin = messagePlugin;\n                        findTarget = true;\n                        break;\n                    }\n                case "tencent":\n                    if (messagePlugin instanceof MizptImpl){\n                        targetPlugin = messagePlugin;\n                        findTarget = true;\n                        break;\n                    }\n            }\n            if(findTarget) break;\n        }\n        return targetPlugin;\n    }\n \n    public static void main(String[] args) {\n        new PluginFactory().installPlugin();\n    }\n \n \n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br")])]),a("h3",{attrs:{id:"_4-2-4-自定义接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-4-自定义接口"}},[s._v("#")]),s._v(" 4.2.4 自定义接口")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@RestController\npublic class SmsController {\n \n    @Autowired\n    private SmsService smsService;\n \n    @Autowired\n    private ServiceLoaderUtils serviceLoaderUtils;\n \n    //localhost:8087/sendMsg?msg=sendMsg\n    @GetMapping("/sendMsg")\n    public String sendMessage(String msg){\n        return smsService.sendMsg(msg);\n    }\n \n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h3",{attrs:{id:"_4-2-5-接口实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-5-接口实现"}},[s._v("#")]),s._v(" 4.2.5 接口实现")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@Service\npublic class SmsService {\n \n    @Value("${msg.type}")\n    private String msgType;\n \n    @Autowired\n    private DefaultSmsService defaultSmsService;\n \n    public String sendMsg(String msg) {\n        MessagePlugin messagePlugin = PluginFactory.getTargetPlugin(msgType);\n        Map paramMap = new HashMap();\n        if(Objects.nonNull(messagePlugin)){\n            return messagePlugin.sendMsg(paramMap);\n        }\n        return defaultSmsService.sendMsg(paramMap);\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("h3",{attrs:{id:"_4-2-6-添加服务依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-6-添加服务依赖"}},[s._v("#")]),s._v(" 4.2.6 添加服务依赖")]),s._v(" "),a("p",[s._v("在该模块中，需要引入对具体实现的两个工程的 jar 依赖（也可以通过启动加载的命令方式）")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<dependencies>\n \n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n \n        \x3c!--依赖具体的实现--\x3e\n        <dependency>\n            <groupId>com.congge</groupId>\n            <artifactId>biz-pt</artifactId>\n            <version>1.0-SNAPSHOT</version>\n        </dependency>\n \n        <dependency>\n            <groupId>com.congge</groupId>\n            <artifactId>miz-pt</artifactId>\n            <version>1.0-SNAPSHOT</version>\n        </dependency>\n \n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n        </dependency>\n \n    </dependencies>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("p",[s._v("biz-pp 的核心代码实现就到此结束了，后面再具体测试的时候再继续；")]),s._v(" "),a("h2",{attrs:{id:"_4-3-bizpt-关键代码实现过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-bizpt-关键代码实现过程"}},[s._v("#")]),s._v(" 4.3 bizpt 关键代码实现过程")]),s._v(" "),a("p",[s._v("接下来就是插件化机制中具体的 SPI 实现过程，两个模块的实现步骤完全一致，挑选其中一个说明，工程目录结构如下：")]),s._v(" "),a("p",[s._v("![](../.vuepress/public/Spring boot/3821bbcbc27c446888d8a54260450c18.png)")]),s._v(" "),a("h3",{attrs:{id:"_4-3-1-添加对-biz-app-的-jar-的依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1-添加对-biz-app-的-jar-的依赖"}},[s._v("#")]),s._v(" 4.3.1 添加对 biz-app 的 jar 的依赖")]),s._v(" "),a("p",[s._v("将上面 biz-app 工程打出来的 jar 依赖过来")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<dependencies>\n        <dependency>\n            <groupId>com.congge</groupId>\n            <artifactId>biz-app</artifactId>\n            <version>1.0-SNAPSHOT</version>\n        </dependency>\n    </dependencies>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"_4-3-2-添加-messageplugin-接口的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-2-添加-messageplugin-接口的实现"}},[s._v("#")]),s._v(" 4.3.2 添加 MessagePlugin 接口的实现")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class BitptImpl implements MessagePlugin {\n \n    @Override\n    public String sendMsg(Map msgMap) {\n        Object userId = msgMap.get("userId");\n        Object type = msgMap.get("_type");\n        //TODO 参数校验\n        System.out.println(" ==== userId :" + userId + ",type :" + type);\n        System.out.println("aliyun send message success");\n        return "aliyun send message success";\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h3",{attrs:{id:"_4-3-3-添加-spi-配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-3-添加-spi-配置文件"}},[s._v("#")]),s._v(" 4.3.3 添加 SPI 配置文件")]),s._v(" "),a("p",[s._v("按照前文的方式，在 resources 目录下创建一个文件，注意文件名称为 SPI 中的接口全名，文件内容为实现类的全类名")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("com.congge.spi.BitptImpl\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"_4-3-4-将-jar-安装到仓库中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-4-将-jar-安装到仓库中"}},[s._v("#")]),s._v(" 4.3.4 将 jar 安装到仓库中")]),s._v(" "),a("p",[s._v("完成实现类的编码后，通过 maven 命令将 jar 安装到仓库中，然后再在上一步的 biz-app 中引入即可；")]),s._v(" "),a("h2",{attrs:{id:"_4-4-效果演示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-效果演示"}},[s._v("#")]),s._v(" 4.4 效果演示")]),s._v(" "),a("p",[s._v("启动 biz-app 服务，调用接口：localhost:8087/sendMsg?msg=sendMsg，可以看到如下效果")]),s._v(" "),a("p",[s._v("![](../.vuepress/public/Spring boot/a273841353454074a5afe8f3ed8847b6.png)")]),s._v(" "),a("p",[s._v("为什么会出现这个效果呢？因为我们在实现类配置了具体使用哪一种方式进行短信的发送，而加载插件的时候正好能够找到对应的服务实现，这样的话就给当前的业务提供了一个较好的扩展点。")]),s._v(" "),a("p",[s._v("![](../.vuepress/public/Spring boot/aeb589d9760a421ca45d7ef868ee310e.png)")]),s._v(" "),a("h1",{attrs:{id:"五、写在文末"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、写在文末"}},[s._v("#")]),s._v(" 五、写在文末")]),s._v(" "),a("p",[s._v("从当前的趋势来看，插件化机制的思想已经遍布各种编程语言，框架，中间件，开源工具等领域，因此掌握插件化的实现机制对于当下做程序实现，或架构设计方面都有着很重要的意义，值得深入研究，本篇到此结束，感谢观看！")])])}),[],!1,null,null,null);a.default=t.exports}}]);