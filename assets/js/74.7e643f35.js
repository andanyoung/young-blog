(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{491:function(e,a,r){"use strict";r.r(a);var t=r(4),o=Object(t.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h3",{attrs:{id:"_1-raft-算法简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-raft-算法简介"}},[e._v("#")]),e._v(" "),a("strong",[e._v("1. Raft 算法简介")])]),e._v(" "),a("h4",{attrs:{id:"_1-1-raft-背景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-raft-背景"}},[e._v("#")]),e._v(" "),a("strong",[e._v("1.1 Raft 背景")])]),e._v(" "),a("p",[e._v("在分布式系统中，一致性算法至关重要。在所有一致性算法中，Paxos 最负盛名，它由莱斯利·兰伯特（Leslie Lamport）于 1990 年提出，是一种基于消息传递的一致性算法，被认为是类似算法中最有效的。")]),e._v(" "),a("p",[e._v("Paxos 算法虽然很有效，但复杂的原理使它实现起来非常困难，截止目前，实现 Paxos 算法的开源软件很少，比较出名的有 Chubby、LibPaxos。此外，Zookeeper 采用的 ZAB（Zookeeper Atomic Broadcast）协议也是基于 Paxos 算法实现的，不过 ZAB 对 Paxos 进行了很多改进与优化，两者的设计目标也存在差异——ZAB 协议主要用于构建一个高可用的分布式数据主备系统，而 Paxos 算法则是用于构建一个分布式的一致性状态机系统。")]),e._v(" "),a("p",[e._v("由于 Paxos 算法过于复杂、实现困难，极大地制约了其应用，而分布式系统领域又亟需一种高效而易于实现的分布式一致性算法，在此背景下，Raft 算法应运而生。")]),e._v(" "),a("p",[e._v("Raft 算法在斯坦福 Diego Ongaro 和 John Ousterhout 于 2013 年发表的《In Search of an Understandable Consensus Algorithm》中提出。相较于 Paxos，Raft 通过逻辑分离使其更容易理解和实现，目前，已经有十多种语言的 Raft 算法实现框架，较为出名的有 etcd、Consul 。")]),e._v(" "),a("h4",{attrs:{id:"_1-2-raft-角色"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-raft-角色"}},[e._v("#")]),e._v(" "),a("strong",[e._v("1.2 Raft 角色")])]),e._v(" "),a("p",[e._v("根据官方文档解释，一个 Raft 集群包含若干节点，Raft 把这些节点分为三种状态：Leader、 Follower、Candidate，每种状态负责的任务也是不一样的。正常情况下，集群中的节点只存在 Leader 与 Follower 两种状态。")]),e._v(" "),a("p",[e._v("• "),a("strong",[e._v("Leader（领导者）")]),e._v(" ：负责日志的同步管理，处理来自客户端的请求，与 Follower 保持 heartBeat 的联系；")]),e._v(" "),a("p",[e._v("• "),a("strong",[e._v("Follower（追随者）")]),e._v(" ：响应 Leader 的日志同步请求，响应 Candidate 的邀票请求，以及把客户端请求到 Follower 的事务转发（重定向）给 Leader；")]),e._v(" "),a("p",[e._v("• "),a("strong",[e._v("Candidate（候选者）")]),e._v(" ：负责选举投票，集群刚启动或者 Leader 宕机时，状态为 Follower 的节点将转为 Candidate 并发起选举，选举胜出（获得超过半数节点的投票）后，从 Candidate 转为 Leader 状态。")]),e._v(" "),a("h4",{attrs:{id:"_1-3-raft-三个子问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-raft-三个子问题"}},[e._v("#")]),e._v(" "),a("strong",[e._v("1.3 Raft 三个子问题")])]),e._v(" "),a("p",[e._v("通常，Raft 集群中只有一个 Leader，其它节点都是 Follower。Follower 都是被动的，不会发送任何请求，只是简单地响应来自 Leader 或者 Candidate 的请求。Leader 负责处理所有的客户端请求（如果一个客户端和 Follower 联系，那么 Follower 会把请求重定向给 Leader）。")]),e._v(" "),a("p",[e._v("为简化逻辑和实现，Raft 将一致性问题分解成了三个相对独立的子问题。")]),e._v(" "),a("p",[e._v("• "),a("strong",[e._v("选举（Leader Election）")]),e._v(" ：当 Leader 宕机或者集群初创时，一个新的 Leader 需要被选举出来；")]),e._v(" "),a("p",[e._v("• "),a("strong",[e._v("日志复制（Log Replication）")]),e._v(" ：Leader 接收来自客户端的请求并将其以日志条目的形式复制到集群中的其它节点，并且强制要求其它节点的日志和自己保持一致；")]),e._v(" "),a("p",[e._v("• "),a("strong",[e._v("安全性（Safety）")]),e._v(" ：如果有任何的服务器节点已经应用了一个确定的日志条目到它的状态机中，那么其它服务器节点不能在同一个日志索引位置应用一个不同的指令。")]),e._v(" "),a("h3",{attrs:{id:"_2-raft-算法之-leader-election-原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-raft-算法之-leader-election-原理"}},[e._v("#")]),e._v(" "),a("strong",[e._v("2. Raft 算法之 Leader Election 原理")])]),e._v(" "),a("p",[e._v("根据 Raft 协议，一个应用 Raft 协议的集群在刚启动时，所有节点的状态都是 Follower。由于没有 Leader，Followers 无法与 Leader 保持心跳（Heart Beat），因此，Followers 会认为 Leader 已经下线，进而转为 Candidate 状态。然后，Candidate 将向集群中其它节点请求投票，同意自己升级为 Leader。如果 Candidate 收到超过半数节点的投票（N/2 + 1），它将获胜成为 Leader。")]),e._v(" "),a("p",[a("strong",[e._v("第一阶段：所有节点都是 Follower。")])]),e._v(" "),a("p",[e._v("上面提到，一个应用 Raft 协议的集群在刚启动（或 Leader 宕机）时，所有节点的状态都是 Follower，初始 Term（任期）为 0。同时启动选举定时器，每个节点的选举定时器超时时间都在 100~500 毫秒之间且并不一致（避免同时发起选举）。")]),e._v(" "),a("p",[a("img",{attrs:{src:"http://md7.admin4j.com/blog/SpringCloud/cc194d25e0c375836aed7ac1331bbf63.png",alt:"img"}})]),e._v(" "),a("p",[e._v("所有节点都是 Follower")]),e._v(" "),a("p",[a("strong",[e._v("第二阶段：Follower 转为 Candidate 并发起投票。")])]),e._v(" "),a("p",[e._v("没有 Leader，Followers 无法与 Leader 保持心跳（Heart Beat），节点启动后在一个选举定时器周期内未收到心跳和投票请求，则状态转为候选者 Candidate 状态，且 Term 自增，并向集群中所有节点发送投票请求并且重置选举定时器。")]),e._v(" "),a("p",[e._v("注意，由于每个节点的选举定时器超时时间都在 100-500 毫秒之间，且彼此不一样，以避免所有 Follower 同时转为 Candidate 并同时发起投票请求。换言之，最先转为 Candidate 并发起投票请求的节点将具有成为 Leader 的“先发优势”。")]),e._v(" "),a("p",[a("img",{attrs:{src:"http://md7.admin4j.com/blog/SpringCloud/90f5a24ca12547125ccbd1c0def560fb.png",alt:"img"}})]),e._v(" "),a("p",[e._v("Follower 转为 Candidate 并发起投票")]),e._v(" "),a("p",[a("strong",[e._v("第三阶段：投票策略。")])]),e._v(" "),a("p",[e._v("节点收到投票请求后会根据以下情况决定是否接受投票请求（每个 follower 刚成为 Candidate 的时候会将票投给自己）：")]),e._v(" "),a("p",[e._v("请求节点的 Term 大于自己的 Term，且自己尚未投票给其它节点，则接受请求，把票投给它；")]),e._v(" "),a("p",[e._v("请求节点的 Term 小于自己的 Term，且自己尚未投票，则拒绝请求，将票投给自己。")]),e._v(" "),a("p",[a("img",{attrs:{src:"http://md7.admin4j.com/blog/SpringCloud/0629de773c76ade51a701d79d2adc993.png",alt:"img"}})]),e._v(" "),a("p",[e._v("投票策略")]),e._v(" "),a("p",[a("strong",[e._v("第四阶段：Candidate 转为 Leader。")])]),e._v(" "),a("p",[e._v("一轮选举过后，正常情况下，会有一个 Candidate 收到超过半数节点（N/2 + 1）的投票，它将胜出并升级为 Leader。然后定时发送心跳给其它的节点，其它节点会转为 Follower 并与 Leader 保持同步，到此，本轮选举结束。")]),e._v(" "),a("p",[e._v("注意：有可能一轮选举中，没有 Candidate 收到超过半数节点投票，那么将进行下一轮选举。")]),e._v(" "),a("p",[a("img",{attrs:{src:"http://md7.admin4j.com/blog/SpringCloud/12d7212d260384dc391a651fc29b6291.png",alt:"img"}})]),e._v(" "),a("p",[e._v("Candidate 转为 Leader")]),e._v(" "),a("h3",{attrs:{id:"_3-raft-算法之-log-replication-原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-raft-算法之-log-replication-原理"}},[e._v("#")]),e._v(" "),a("strong",[e._v("3. Raft 算法之 Log Replication 原理")])]),e._v(" "),a("p",[a("strong",[e._v("在一个 Raft 集群中，只有 Leader 节点能够处理客户端的请求（如果客户端的请求发到了 Follower，Follower 将会把请求重定向到 Leader）")]),e._v("，客户端的每一个请求都包含一条被复制状态机执行的指令。Leader 把这条指令作为一条新的日志条目（Entry）附加到日志中去，然后并行得将附加条目发送给 Followers，让它们复制这条日志条目。")]),e._v(" "),a("p",[e._v("当这条日志条目被 Followers 安全复制，Leader 会将这条日志条目应用到它的状态机中，然后把执行的结果返回给客户端。如果 Follower 崩溃或者运行缓慢，再或者网络丢包，Leader 会不断得重复尝试附加日志条目（尽管已经回复了客户端）直到所有的 Follower 都最终存储了所有的日志条目，确保强一致性。")]),e._v(" "),a("p",[a("strong",[e._v("第一阶段：客户端请求提交到 Leader。")])]),e._v(" "),a("p",[e._v("如下图所示，Leader 收到客户端的请求，比如存储数据 5。Leader 在收到请求后，会将它作为日志条目（Entry）写入本地日志中。需要注意的是，此时该 Entry 的状态是未提交（Uncommitted），Leader 并不会更新本地数据，因此它是不可读的。")]),e._v(" "),a("p",[a("img",{attrs:{src:"http://md7.admin4j.com/blog/SpringCloud/28a6475e89cef4b541baee736518f97f.png",alt:"img"}})]),e._v(" "),a("p",[e._v("客户端请求提交到 Leader")]),e._v(" "),a("p",[a("strong",[e._v("第二阶段：Leader 将 Entry 发送到其它 Follower")])]),e._v(" "),a("p",[e._v("Leader 与 Followers 之间保持着心跳联系，随心跳 Leader 将追加的 Entry（AppendEntries）并行地发送给其它的 Follower，并让它们复制这条日志条目，这一过程称为复制（Replicate）。")]),e._v(" "),a("p",[e._v("有几点需要注意：")]),e._v(" "),a("p",[a("strong",[e._v("1.")]),e._v(" 为什么 Leader 向 Follower 发送的 Entry 是 AppendEntries 呢？")]),e._v(" "),a("p",[e._v("因为 Leader 与 Follower 的心跳是周期性的，而一个周期间 Leader 可能接收到多条客户端的请求，因此，随心跳向 Followers 发送的大概率是多个 Entry，即 AppendEntries。当然，在本例中，我们假设只有一条请求，自然也就是一个 Entry 了。")]),e._v(" "),a("p",[a("strong",[e._v("2.")]),e._v(" Leader 向 Followers 发送的不仅仅是追加的 Entry（AppendEntries）。")]),e._v(" "),a("p",[e._v("在发送追加日志条目的时候，Leader 会把新的日志条目紧接着之前条目的索引位置（prevLogIndex）， Leader 任期号（Term）也包含在其中。如果 Follower 在它的日志中找不到包含相同索引位置和任期号的条目，那么它就会拒绝接收新的日志条目，因为出现这种情况说明 Follower 和 Leader 不一致。")]),e._v(" "),a("p",[a("strong",[e._v("3.")]),e._v(" 如何解决 Leader 与 Follower 不一致的问题？")]),e._v(" "),a("p",[e._v("在正常情况下，Leader 和 Follower 的日志保持一致，所以追加日志的一致性检查从来不会失败。然而，Leader 和 Follower 一系列崩溃的情况会使它们的日志处于不一致状态。Follower 可能会丢失一些在新的 Leader 中有的日志条目，它也可能拥有一些 Leader 没有的日志条目，或者两者都发生。丢失或者多出日志条目可能会持续多个任期。")]),e._v(" "),a("p",[e._v("要使 Follower 的日志与 Leader 恢复一致，Leader 必须找到最后两者达成一致的地方（说白了就是回溯，找到两者最近的一致点），然后删除从那个点之后的所有日志条目，发送自己的日志给 Follower。所有的这些操作都在进行附加日志的一致性检查时完成。")]),e._v(" "),a("p",[e._v("Leader 为每一个 Follower 维护一个 nextIndex，它表示下一个需要发送给 Follower 的日志条目的索引地址。当一个 Leader 刚获得权力的时候，它初始化所有的 nextIndex 值，为自己的最后一条日志的 index 加 1。如果一个 Follower 的日志和 Leader 不一致，那么在下一次附加日志时一致性检查就会失败。在被 Follower 拒绝之后，Leader 就会减小该 Follower 对应的 nextIndex 值并进行重试。最终 nextIndex 会在某个位置使得 Leader 和 Follower 的日志达成一致。当这种情况发生，附加日志就会成功，这时就会把 Follower 冲突的日志条目全部删除并且加上 Leader 的日志。一旦附加日志成功，那么 Follower 的日志就会和 Leader 保持一致，并且在接下来的任期继续保持一致。")]),e._v(" "),a("p",[a("img",{attrs:{src:"http://md7.admin4j.com/blog/SpringCloud/34ab4fcbaa8288ff9725419bfc5d9a63.png",alt:"img"}})]),e._v(" "),a("p",[e._v("如何解决 Leader 与 Follower 不一致的问题")]),e._v(" "),a("p",[a("strong",[e._v("第三阶段：Leader 等待 Followers 回应。")])]),e._v(" "),a("p",[e._v("Followers 接收到 Leader 发来的复制请求后，有两种可能的回应：")]),e._v(" "),a("p",[e._v("写入本地日志中，返回 Success；")]),e._v(" "),a("p",[e._v("一致性检查失败，拒绝写入，返回 False，原因和解决办法上面已做了详细说明。")]),e._v(" "),a("p",[e._v("需要注意的是，此时该 Entry 的状态也是未提交（Uncommitted）。完成上述步骤后，Followers 会向 Leader 发出 Success 的回应，当 Leader 收到大多数 Followers 的回应后，会将第一阶段写入的 Entry 标记为提交状态（Committed），并把这条日志条目应用到它的状态机中。")]),e._v(" "),a("p",[a("img",{attrs:{src:"http://md7.admin4j.com/blog/SpringCloud/84d8d83b617d226100909d0fa4377aeb.png",alt:"img"}})]),e._v(" "),a("p",[e._v("Leader 等待 Followers 回应")]),e._v(" "),a("p",[a("strong",[e._v("第四阶段：Leader 回应客户端。")])]),e._v(" "),a("p",[e._v("完成前三个阶段后，Leader 会向客户端回应 OK，表示写操作成功。")]),e._v(" "),a("p",[a("img",{attrs:{src:"http://md7.admin4j.com/blog/SpringCloud/f24c72d03f555e45fddc85c617c510d3.png",alt:"img"}})]),e._v(" "),a("p",[e._v("Leader 回应客户端")]),e._v(" "),a("p",[a("strong",[e._v("第五阶段，Leader 通知 Followers Entry 已提交")])]),e._v(" "),a("p",[e._v("Leader 回应客户端后，将随着下一个心跳通知 Followers，Followers 收到通知后也会将 Entry 标记为提交状态。至此，Raft 集群超过半数节点已经达到一致状态，可以确保强一致性。")]),e._v(" "),a("p",[e._v("需要注意的是，由于网络、性能、故障等各种原因导致“反应慢”、“不一致”等问题的节点，最终也会与 Leader 达成一致。")]),e._v(" "),a("p",[a("img",{attrs:{src:"http://md7.admin4j.com/blog/SpringCloud/5531eeaab08dbf8e7ef79e0c983b5400.png",alt:"img"}})]),e._v(" "),a("p",[e._v("Leader 通知 Followers Entry 已提交")]),e._v(" "),a("h3",{attrs:{id:"_4-raft-算法之安全性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-raft-算法之安全性"}},[e._v("#")]),e._v(" "),a("strong",[e._v("4. Raft 算法之安全性")])]),e._v(" "),a("p",[e._v("前面描述了 Raft 算法是如何选举 Leader 和复制日志的。然而，到目前为止描述的机制并不能充分地保证每一个状态机会按照相同的顺序执行相同的指令。例如，一个 Follower 可能处于不可用状态，同时 Leader 已经提交了若干的日志条目；然后这个 Follower 恢复（尚未与 Leader 达成一致）而 Leader 故障；如果该 Follower 被选举为 Leader 并且覆盖这些日志条目，就会出现问题，即不同的状态机执行不同的指令序列。")]),e._v(" "),a("p",[e._v("鉴于此，在 Leader 选举的时候需增加一些限制来完善 Raft 算法。这些限制可保证任何的 Leader 对于给定的任期号（Term），都拥有之前任期的所有被提交的日志条目（所谓 Leader 的完整特性）。关于这一选举时的限制，下文将详细说明。")]),e._v(" "),a("h4",{attrs:{id:"_4-1-选举限制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-选举限制"}},[e._v("#")]),e._v(" "),a("strong",[e._v("4.1 选举限制")])]),e._v(" "),a("p",[e._v("在所有基于 Leader 机制的一致性算法中，Leader 都必须存储所有已经提交的日志条目。为了保障这一点，Raft 使用了一种简单而有效的方法，以保证所有之前的任期号中已经提交的日志条目在选举的时候都会出现在新的 Leader 中。换言之，日志条目的传送是单向的，只从 Leader 传给 Follower，并且 Leader 从不会覆盖自身本地日志中已经存在的条目。")]),e._v(" "),a("p",[e._v("Raft 使用投票的方式来阻止一个 Candidate 赢得选举，除非这个 Candidate 包含了所有已经提交的日志条目。Candidate 为了赢得选举必须联系集群中的大部分节点。这意味着每一个已经提交的日志条目肯定存在于至少一个服务器节点上。如果 Candidate 的日志至少和大多数的服务器节点一样新（这个新的定义会在下面讨论），那么它一定持有了所有已经提交的日志条目（多数派的思想）。投票请求的限制中请求中包含了 Candidate 的日志信息，然后投票人会拒绝那些日志没有自己新的投票请求。")]),e._v(" "),a("p",[e._v("Raft 通过比较两份日志中最后一条日志条目的索引值和任期号，确定谁的日志比较新。如果两份日志最后条目的任期号不同，那么任期号大的日志更加新。如果两份日志最后的条目任期号相同，那么日志比较长的那个就更加新。")]),e._v(" "),a("h4",{attrs:{id:"_4-2-提交之前任期内的日志条目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-提交之前任期内的日志条目"}},[e._v("#")]),e._v(" "),a("strong",[e._v("4.2 提交之前任期内的日志条目")])]),e._v(" "),a("p",[e._v("如同 4.1 节介绍的那样，Leader 知道一条当前任期内的日志记录是可以被提交的，只要它被复制到了大多数的 Follower 上（多数派的思想）。如果一个 Leader 在提交日志条目之前崩溃了，继任的 Leader 会继续尝试复制这条日志记录。然而，一个 Leader 并不能断定被保存到大多数 Follower 上的一个之前任期里的日志条目 就一定已经提交了。这很明显，从日志复制的过程可以看出。")]),e._v(" "),a("p",[e._v("鉴于上述情况，Raft 算法不会通过计算副本数目的方式去提交一个之前任期内的日志条目。只有 Leader 当前任期里的日志条目通过计算副本数目可以被提交；一旦当前任期的日志条目以这种方式被提交，那么由于日志匹配特性，之前的日志条目也都会被间接的提交。在某些情况下，Leader 可以安全地知道一个老的日志条目是否已经被提交（只需判断该条目是否存储到所有节点上），但是 Raft 为了简化问题使用了一种更加保守的方法。")]),e._v(" "),a("p",[e._v("当 Leader 复制之前任期里的日志时，Raft 会为所有日志保留原始的任期号，这在提交规则上产生了额外的复杂性。但是，这种策略更加容易辨别出日志，即使随着时间和日志的变化，日志仍维护着同一个任期编号。此外，该策略使得新 Leader 只需要发送较少日志条目。")]),e._v(" "),a("h3",{attrs:{id:"_5、线性化语义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、线性化语义"}},[e._v("#")]),e._v(" 5、线性化语义")]),e._v(" "),a("p",[e._v("raft 的读写都在 leader 节点中进行，它保证了读的都是最新的值，它是符合强一致性的（线性一致性），raft 除了这个还在【客户端交互】那块也做了一些保证，详情可以参考论文。但是 zookeeper 不同，zookeeper 写在 leader，读可以在 follower 进行，可能会读到了旧值，它不符合强一致性（只考虑写一致性，不考虑读一致性），但是 zookeeper 去 follower 读可以有效提升读取的效率。")]),e._v(" "),a("h3",{attrs:{id:"_6、后记"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、后记"}},[e._v("#")]),e._v(" 6、后记")]),e._v(" "),a("p",[e._v("对比于 zab、raft，我们发现他们选举、setData 都是需要过半机制才行，所以他们针对网络分区的处理方法都是一样的。")]),e._v(" "),a("p",[e._v("一个集群的节点经过网络分区后，如一共有 A、B、C、D、E 5 个节点，如果 A 是 leader，网络分区为 A、B、C 和 D、E，在 A、B、C 分区还是能正常提供服务的，而在 D、E 分区因为不能得到大多数成员确认（虽然分区了，但是因为配置的原因他们还是能知道所有的成员数量，比如 zk 集群启动前需要配置所有成员地址，raft 也一样），是不能进行选举的，所以保证只会有一个 leader。")]),e._v(" "),a("p",[e._v("如果分区为 A、B 和 C、D、E ，A、B 分区虽然 A 还是 leader，但是却不能提供事务服务（setData），C、D、E 分区能重新选出 leader，还是能正常向外提供服务。")])])}),[],!1,null,null,null);a.default=o.exports}}]);