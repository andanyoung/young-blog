(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{916:function(n,a,s){"use strict";s.r(a);var e=s(4),t=Object(e.a)({},(function(){var n=this,a=n._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"第-3-章-spring-ioc-核心容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-3-章-spring-ioc-核心容器"}},[n._v("#")]),n._v(" 第 3 章 Spring IOC 核心容器")]),n._v(" "),a("p",[n._v("在上一章节中，我们大致了解了 Spring 框架，并学习了控制反转（IOC）和面向切面编程（AOP）两个重要的编程思想，这一章我们将开始学习 Spring 框架中的核心容器。\n本章主要涉及的知识点：")]),n._v(" "),a("ul",[a("li",[n._v("IOC 容器：容器概念、BeanFactory、ApplicationContext。")]),n._v(" "),a("li",[n._v("beans 的配置：三种配置方式。")]),n._v(" "),a("li",[n._v("bean 的注入：三种注入方式以及常见数据类型注入介绍。")]),n._v(" "),a("li",[n._v("bean 的生命周期和五大作用域。")])]),n._v(" "),a("blockquote",[a("p",[n._v("注意\n为了能深入理解 Spring 框架，本章主要使用 XML 的方式来说明 Spring 框架的使用，虽然现在提倡使用注解方式配置，简单一些，但是为了更好、更深入地理解，这里还是建议要学习一下 XML 的配置方式。")])]),n._v(" "),a("h2",{attrs:{id:"_3-1-ioc-容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-ioc-容器"}},[n._v("#")]),n._v(" 3.1 IOC 容器")]),n._v(" "),a("p",[n._v("在第 2 章中介绍什么是依赖注入时有提到：依赖注入是组件之间的依赖关系由容器在运行期决定的，即由容器动态地将某个依赖关系注入组件之中。那什么是容器呢？既然 Spring 框架实现了 IOC，那么 Spring 中的容器是什么呢？")]),n._v(" "),a("h3",{attrs:{id:"_3-1-1-容器介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-容器介绍"}},[n._v("#")]),n._v(" 3.1.1 容器介绍")]),n._v(" "),a("p",[n._v("在日常生活中，容器是指用以容纳物料并以壳体为主的基本装置，是用来盛放东西的。在编程中，容器是用来存储和组织其他对象的对象，首先要确定容器也是对象，也可以当作 bean，只是这个对象是用来存储和组织其他对象的，那其他对象是什么呢？其他对象其实就是 bean 对象，这也是面向对象编程的一种体现，万物皆对象。Spring 提供了 BeanFactory、ApplicationContext 两个 IOC 容器来管理众多的 bean 对象。")]),n._v(" "),a("h3",{attrs:{id:"_3-1-2-beanfactory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-beanfactory"}},[n._v("#")]),n._v(" 3.1.2 BeanFactory")]),n._v(" "),a("p",[n._v("一提到工厂，我们可能就会想到富某康。工厂是一类用以生产货物的大型工业建筑物。BeanFactory 不是用来生产货物的，而是用来生产管理 bean 的。BeanFactory 会在 bean 生命周期的各个阶段中对 bean 进行管理，并且 Spring 将这些阶段通过各种接口暴露给我们，让我们可以对 bean 进行各种处理。我们只要让 bean 实现对应的接口，那么 Spring 就会在 bean 的生命周期调用我们实现的接口来处理该 bean。这是怎么实现的呢？主要分为以下两个阶段。")]),n._v(" "),a("h4",{attrs:{id:"_1-bean-容器的启动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-bean-容器的启动"}},[n._v("#")]),n._v(" 1．bean 容器的启动")]),n._v(" "),a("p",[n._v("工厂要生产货物，首先得把工厂运转起来。同样，bean 容器要管理 bean，也需要先把容器启动起来，获取到 bean 的定义信息之后才能管理。")]),n._v(" "),a("ul",[a("li",[n._v("（1）读取 bean 的 xml 配置文件，然后将 xml 中每个 bean 元素分别转换成 BeanDefinition 对象。")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('public abstract class AbstractBeanDefinition extends BeanMetadataAttributeAccessor implements BeanDefinition, Cloneable {\n    public static final String SCOPE_DEFAULT = "";\n    private boolean lazyInit;\n    private int autowireMode;\n    private int dependencyCheck;\n    @Nullable\n    private String[] dependsOn;\n    private ConstructorArgumentValues constructorArgumentValues;\n    private MutablePropertyValues propertyValues;\n    @Nullable\n    private String factoryBeanName;\n    @Nullable\n    private String factoryMethodName;\n    @Nullable\n    private String initMethodName;\n    @Nullable\n    private String destroyMethodName;\n    //...\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br")])]),a("p",[n._v("BeanClass 保存 bean 的 class 属性，scope 保存 Bean 的作用域，abstractFlag 保存该 bean 是否抽象，lazyInit 保存是否延迟初始化，autowireMode 保存是否自动装配，dependencyCheck 保存是否坚持依赖，dependsOn 保存该 bean 依赖于哪些 bean（这些 bean 必须提取初始化），constructorArgumentValues 保存通过构造函数注入的依赖，propertyValues 保存通过 setter 方法注入的依赖，factoryBeanName 和 factoryMethodName 用于 factorybean，也就是工厂类型的 bean，initMethodName 和 destroyMethodName 分别对应 bean 的 init-method 和 destroy-method 属性。后面会对这些内容进行详细介绍。")]),n._v(" "),a("ul",[a("li",[n._v("（2）通过 BeanDefinitionRegistry 将 bean 注册到 beanFactory 中。")])]),n._v(" "),a("p",[n._v("上面获取到 bean 的信息之后，是怎么注册到 BeanFactory 中的呢？其实是通过 BeanDefinitionRegistry 将 bean 注册到 beanFactory 中的，因为 BeanFactory 的实现类需要实现 BeanDefinitionRegistry 接口。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public interface BeanDefinitionRegistry extends AliasRegistry {\n    void registerBeanDefinition(String var1, BeanDefinition var2) throws BeanDefinitionStoreException;\n\n    void removeBeanDefinition(String var1) throws NoSuchBeanDefinitionException;\n\n    BeanDefinition getBeanDefinition(String var1) throws NoSuchBeanDefinitionException;\n\n    boolean containsBeanDefinition(String var1);\n\n    String[] getBeanDefinitionNames();\n\n    int getBeanDefinitionCount();\n\n    boolean isBeanNameInUse(String var1);\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br")])]),a("p",[n._v("BeanDefinitionRegistry 接口提供了根据 beanName 注册对应 beanDefinition 的方法。在 DefaultListableBeanFactory 类中实现了该方法，并将 beanDefinition 保存在了 ConcurrentHash-Map 中。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public class DefaultListableBeanFactory extends AbstractAutowireCapableBeanFactory implements ConfigurableListableBeanFactory, BeanDefinitionRegistry, Serializable {\n\t private final Map<String, BeanDefinition> beanDefinitionMap = new ConcurrentHashMap(256);\n\t public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException {\n        ...\n             this.beanDefinitionMap.put(beanName, beanDefinition);\n        ...\n       }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br")])]),a("p",[n._v("另外，Spring 还对外暴露了一些接口来对 bean 初始化，例如 BeanFactoryPostProcessor。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("@FunctionalInterface\npublic interface BeanFactoryPostProcessor {\n    void postProcessBeanFactory(ConfigurableListableBeanFactory var1) throws BeansException;\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("p",[n._v("我们可以翻译一下 postProcessBeanFactory 的注释信息。postProcessBeanFactory 可以修改应用上下文中已经进行 standard 初始化的 beanFactory，此时所有 bean 的定义信息已经加载完成，但还未实例化，允许覆盖、新增甚至重新初始化 bean 信息，一个典型的例子就是属性覆盖器 PropertyOverrideConfigurer。对于一些参数，可以配置在 properties 中，而不用配置在 Spring 的 XML 配置文件中。")]),n._v(" "),a("h4",{attrs:{id:"_2-bean-容器的实例化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-bean-容器的实例化"}},[n._v("#")]),n._v(" 2．bean 容器的实例化")]),n._v(" "),a("p",[n._v("上面把 bean 容器启动之后，工厂算是运转起来了，配方（beanDefinition）也已经准备充分，然后就是生产（实例化）、管理货物（bean）了。实例化 bean 主要通过反射和 CGLIB 两种方式，在 bean 的实例化过程中，Spring 也暴露了一些接口，如表 3-1 所示。\n表 3-1 在 bean 的实例化过程中 Spring 暴露的一些接口\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/93f6cf5f0a774c1d7886764b6ae2d787.png",alt:"表3-1 在bean的实例化过程中Spring暴露的一些接口"}}),n._v("\n我们可以通过示例演示一下这几个接口的使用。")]),n._v(" "),a("ul",[a("li",[n._v("（1）创建 Maven project，在 pom.xml 中引入 spring-core、spring-context。")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("<name>BeanFactoryDemo</name>\n\n<properties>\n  <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n  <spring.version>5.0.0.RELEASE</spring.version>\n</properties>\n<dependencies>\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-core</artifactId>\n    <version>${spring.version}</version>\n  </dependency>\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-context</artifactId>\n    <version>${spring.version}</version>\n  </dependency>\n  <dependency>\n    <groupId>junit</groupId>\n    <artifactId>junit</artifactId>\n    <version>4.11</version>\n    <scope>test</scope>\n  </dependency>\n</dependencies>\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br")])]),a("p",[n._v("-（2）创建 bean 对象，实现上面列出的接口。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('package spring.tutorial.chapter3.entity;\n\npublic class UserBean implements BeanNameAware, BeanFactoryAware, InitializingBean, DisposableBean, ApplicationContextAware {\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n        System.out.println("set方法被调用");\n    }\n\n    public UserBean() {\n        System.out.println("UserBean类构造方法");\n    }\n\n    public void setBeanName(String name) {\n        System.out.println("BeanNameAware被调用");\n    }\n\n    @Override\n    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n        System.out.println("BeanFactoryAware被调用");\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        System.out.println("InitializingBean被调用");\n    }\n\n    public void destroy() throws Exception {\n        System.out.println("DisposableBean被调用");\n    }\n    //自定义的初始化函数\n    public void myInit() {\n        System.out.println("myInit被调用");\n    }\n    //自定义的销毁方法\n    public void myDestroy() {\n        System.out.println("myDestroy被调用");\n    }\n\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        System.out.println("setApplicationContext被调用");\n    }\n\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br")])]),a("ul",[a("li",[n._v("（3）bean 配置。")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('<bean id="user" class="spring.tutorial.chapter3.entity.UserBean" destroy-method="myDestroy" init-method="myInit">\n    <property name="name" value="abc"></property>\n</bean>\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("ul",[a("li",[a("p",[n._v("（4）测试。")]),n._v(" "),a("p",[n._v("使用 ApplicationContext 获取 BeanFactory，再通过 getBean 方法获取对应的 bean，最后调用 destroy 方法进行销毁，从输出结果可以看到依次调用了 BeanNameAware、BeanFactoryAware、InitializingBean、DisposableBean 接口。")])])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('@Test\npublic void userBean() throws Exception {\n    ApplicationContext context = new ClassPathXmlApplicationContext(new String()[]{"applicationContext.xml"})\n\n    BeanFactory factory = context;\n    UserBean user = (UserBean)factory.getBean("user");\n    user.destroy();\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br")])]),a("h3",{attrs:{id:"_3-1-3-applicationcontext"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-3-applicationcontext"}},[n._v("#")]),n._v(" 3.1.3 ApplicationContext")]),n._v(" "),a("p",[n._v("在上面的示例中，使用 ApplicationContext 获取了 bean 的配置，然后直接将 ApplicationContext 接口对象赋值给了 BeanFactory 接口对象，为什么可以赋值呢？其实 ApplicationContext 接口实现了 BeanFactory 接口。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public interface ApplicationContext extends EnvironmentCapable,ListableBeanFactory, HierarchicalBeanFactory,MessageSource, ApplicationEventPublisher, ResourcePatternResolver\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br")])]),a("p",[n._v("从上面 ApplicationContext 接口的继承关系可以看到，它还通过继承其他接口扩展了 BeanFactory 的功能。")]),n._v(" "),a("ul",[a("li",[n._v("MessageSource：为应用提供国际化访问功能。")]),n._v(" "),a("li",[n._v("ResourcePattern Resolver：提供资源（如 URL 和文件系统）的访问支持。")]),n._v(" "),a("li",[n._v("ApplicationEventPublisher：引入事件机制，包括启动事件、关闭事件等，让容器在上下文中提供了对应用事件的支持。它代表的是一个应用的上下文环境。")])]),n._v(" "),a("p",[n._v("BeanFactory 主要是面对 Spring 框架的基础设施，面对 Spring 自己。Applicationcontext 主要面对于 Spring 使用的开发者。开发者基本都会使用 Applicationcontext，而非 BeanFactory，所以在上面实例中使用 ApplicationContext 获取 BeanFactory 接口对象。\n上面的 ApplicationContext 对象是通过 ClassPathXmlApplicationContext 方法获取的，还有一种获取方式，即使用 FileSystemXmlApplicationContext 方法获取。")]),n._v(" "),a("ul",[a("li",[n._v("ClassPathXmlApplicationContext 表示从类路径下加载配置文件。文件路径默认指的是项目的 classpath 路径下，所以不需要写前缀“classpath:”，如果指向绝对路径，需要加上“file:”。\n"),a("code",[n._v('new ClassPathXmlApplicationContext(new String[] {"ApplicationContext.xml"});')])]),n._v(" "),a("li",[n._v("FileSystemXmlApplicationContext 表示从文件系统中加载配置文件。文件路径默认指的是项目的根目录下，若想使用项目的 classpath 路径，则需要加上“classpath:”。\n"),a("code",[n._v('new FileSystemXmlApplicationContext(new String[]{"classpath:ApplicationContext.xml"});')])])]),n._v(" "),a("h2",{attrs:{id:"_3-2-bean-的配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-bean-的配置"}},[n._v("#")]),n._v(" 3.2 Bean 的配置")]),n._v(" "),a("p",[n._v("在上一小节中为了演示容器 Bean 实例化时暴露出的几个接口，将 UserBean 配置在 XML 中，其实常见的 Bean 配置有 3 种：基于 XML 配置 Bean，使用注解定义 Bean，基于 Java 类提供 Bean 定义。")]),n._v(" "),a("h3",{attrs:{id:"_3-2-1-基于-xml-配置-bean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-基于-xml-配置-bean"}},[n._v("#")]),n._v(" 3.2.1 基于 XML 配置 Bean")]),n._v(" "),a("p",[n._v("基于 XML 配置 Bean 时，Spring 通过"),a("code",[n._v("<bean>")]),n._v("配置来实例化、设置 bean 的属性以及设置 bean 间的相互依赖性。一个"),a("code",[n._v("<bean>")]),n._v("通常需要定义 id 和 class 属性。class 属性是必需的，不然 Spring 怎么知道是哪个呢。id 不是必需的，不过如果配置文件中配置的其他 bean 要引用该 bean，那么 id 也是必需的，通常都加上。\n"),a("code",[n._v('<beanid="user"class="com.demo.model.UserBean"></bean>')])]),n._v(" "),a("h3",{attrs:{id:"_3-2-2-使用注解定义-bean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-使用注解定义-bean"}},[n._v("#")]),n._v(" 3.2.2 使用注解定义 Bean")]),n._v(" "),a("p",[n._v("如果采用基于 XML 的配置，bean 定义信息和 bean 实现类本身是分离的，而采用基于注解的配置方式时，bean 定义信息即通过在 bean 实现类上标注注解实现。在第 2 章中，定义 Air 和 Person 时都使用了@Component 来注解 bean。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('@Component\npublic class CleanAir implements IAir {\n    public  String toString(){\n        return "CleanAir";\n    }\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br")])]),a("p",[n._v("我们使用@Component 注解在 CleanAir 类声明处对类进行标注，它可以被 Spring 容器识别，自动将 POJO 转换为容器管理的 bean。它和"),a("code",[n._v('<bean id="CleanAir"class="com.demo.model.CleanAir"></bean>')]),n._v("是等效的。除了@Component 以外，Spring 提供了以下 3 个功能基本和@Component 等效的注解，分别用于对 DAO、Service 及 Web 层的 Controller 进行注解，所以也称这些注解为 Bean 的衍型注解：")]),n._v(" "),a("ul",[a("li",[n._v("@Repository：用于对 DAO 实现类进行标注。")]),n._v(" "),a("li",[n._v("@Service：用于对 Service 实现类进行标注。")]),n._v(" "),a("li",[n._v("@Controller：用于对 Controller 实现类进行标注。")])]),n._v(" "),a("p",[n._v("那问题来了：既然都是 bean，为什么还提供 4 个呢？因为这样能让注解的用途更加清晰，而且不同的注解也有各自特殊的功能。")]),n._v(" "),a("h3",{attrs:{id:"_3-2-3-基于-java-类提供-bean-定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-3-基于-java-类提供-bean-定义"}},[n._v("#")]),n._v(" 3.2.3 基于 Java 类提供 Bean 定义")]),n._v(" "),a("p",[n._v("在普通的 POJO 类中只要标注@Configuration 注解，就可以为 Spring 容器提供 bean 定义的信息了。每个标注了@Bean 的类方法都相当于提供了一个 bean 的定义信息。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("@Configuration\npublic class AppConf {\n\n    @Bean\n    public CleanAir cleanAir(){\n        return new CleanAir();\n    }\n\n    @Bean\n    public DirtyAir dirtyAir(){\n        return new DirtyAir();\n    }\n\n\n    @Bean\n    public Person person(){\n        return new Person(dirtyAir());\n    }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br")])]),a("p",[n._v("我们只需在 XML 中配置开启 context 扫描即可实现 bean 的配置，省去了配置 Person、DirtyAir。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('<context:component-scan base-package="spring.tutorial.chapter3"/>\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('ApplicationContext context = new ClassPathXmlApplicationContext(new String[]{\n        "applicationContext.xml"\n});\nBeanFactory  factory = context;\nAppConf conf =(AppConf) factory.getBean("appConf");\nconf.person().breath();\nSystem.out.println("====getBean========");\nCleanAir cleanAir = (CleanAir) factory.getBean("cleanAir");\nSystem.out.println(cleanAir);\nDirtyAir dirtyAir = factory.getBean(DirtyAir.class);\nSystem.out.println(dirtyAir);\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br")])]),a("blockquote",[a("p",[n._v("输出结果")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("DirtyAir\n====getBean========\nCleanAir\nDirtyAir\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("p",[n._v("基于 Java 类的配置方式和基于 XML 或基于注解的配置方式相比，前者通过代码的方式更加灵活地实现了 Bean 的实例化及 Bean 之间的装配，后面两者是通过配置声明的方式实现的，在灵活性上要稍逊一些，但是配置上要更简单一些。")]),n._v(" "),a("h2",{attrs:{id:"_3-3-bean-的注入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-bean-的注入"}},[n._v("#")]),n._v(" 3.3 Bean 的注入")]),n._v(" "),a("p",[n._v("在 Bean 的配置中介绍的是 Bean 的声明问题，即在哪声明、怎么声明的问题。本节将要讲解的 Bean 的注入是怎么实例化、怎么注入的问题。Bean 注入的方式有两种：一种是在 XML 中配置，另一种是使用注解的方式注入。")]),n._v(" "),a("h3",{attrs:{id:"_3-3-1-xml-方式注入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-xml-方式注入"}},[n._v("#")]),n._v(" 3.3.1 XML 方式注入")]),n._v(" "),a("p",[n._v("XML 方式注入一般有三种方式：属性注入、构造函数注入和工厂方法注入。")]),n._v(" "),a("h4",{attrs:{id:"_1-属性注入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-属性注入"}},[n._v("#")]),n._v(" 1．属性注入")]),n._v(" "),a("p",[n._v("在传统的对象实例化时可以先使用"),a("code",[n._v("new class()")]),n._v("，然后通过 setXXX()方法设置对象的属性值或依赖对象，属性注入也是采用这种方式，只是 Spring 框架会在内部完成这些操作，它会先调用 Bean 的默认构造函数实例化 Bean 对象，然后通过反射的方式调用 Setter 方法注入属性值。它会使用默认的构造函数（无参数构造函数），只需为注入的属性设置 set 方法，可选择性和灵活性比较高，所以也是比较常用的一种注入方式。这里还是在 IOC 章节人和空气的基础上稍作修改来演示。IAir 接口和 CleanAir、DirtyAir 类不变，这里就不贴了。")]),n._v(" "),a("blockquote",[a("p",[n._v("（1）新建 XMLInstance 类")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('public class XMLInstance {\n    private String name;\n    private IAir air;\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public void setAir(IAir air) {\n        this.air = air;\n    }\n\n    public void Breath()\n    {\n        System.out.println("Name:"+this.name+";Air:"+this.air.toString());\n    }\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br")])]),a("p",[n._v("在 XMLInstance 类中并未声明构造函数，对于 air 属性只设置了 set 方法，get 方法也没设置。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('<bean id="xmlinstance" class="spring.tutorial.chapter3.entity.XMLInstance" scope="prototype">\n    <property name="air" ref="cleanAir"></property>\n    <property name="name" value="abc"></property>\n</bean>\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('<bean id="xmlinstance" class="spring.tutorial.chapter3.entity.XMLInstance" scope="prototype">\n    <property name="air" ref="cleanAir"></property>\n    <property name="name" value="abc"></property>\n</bean>\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("p",[n._v("在 XML 中使用 property 类配置属性，name 表示属性名，value 用来设置基本数据类型的属性值。在 Spring 配置文件中，bean 之间可以相互引用，引用时可以用"),a("code",[n._v("<ref>")]),n._v("标签配置 bean 的 id 属性。"),a("code",[n._v("<ref>")]),n._v("可以用在"),a("code",[n._v("<property>")]),n._v("属性中，也可以用在"),a("code",[n._v("<construct-arg>")]),n._v("构造函数的参数值中，还可以用在其他地方，通过引用能减少 bean 的声明。")]),n._v(" "),a("h4",{attrs:{id:"_2-构造函数注入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-构造函数注入"}},[n._v("#")]),n._v(" 2．构造函数注入")]),n._v(" "),a("p",[n._v("在属性注入时先使用默认的构造函数（无参数构造函数）实例化，然后通过 set 方法注入属性，在传统实例化对象时可以自定义构造函数进行实例化。构造函数注入就是通过自定义构造函数来进行对象的实例化。这里在 XMLInstance 类的基础上增加了一个构造函数，第一个参数是 String 类型的 name，第二个参数是 IAir 类型的 air。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public XMLInstance(String name, IAir air) {\n   super();\n   this.name = name;\n   this.air = air;\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("p",[n._v("在 XML 中，使用"),a("code",[n._v("<construect-arg>")]),n._v("来设置构造函数的参数，index 属性设置参数的顺序，参数顺序应该与构造函数一致，ref 设置引用 bean 的 id，value 设置构造函数参数的值。")]),n._v(" "),a("h4",{attrs:{id:"_3-工厂方法注入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-工厂方法注入"}},[n._v("#")]),n._v(" 3．工厂方法注入")]),n._v(" "),a("p",[n._v("工厂方法注入参考的是工厂设计模式，在工厂类中实现对象的实例化。工厂类负责创建一个或多个目标类实例，一般以接口或抽象类变量的形式返回目标类实例。工厂类对外屏蔽了目标类的实例化步骤，调用者甚至不用知道具体的目标类是什么。工厂方法也分静态工厂方法和非静态工厂方法。静态工厂方法不用实例化工厂类，直接通过类名调用。非静态工厂方法需要先实例化工厂类，然后通过工厂类对象调用获取对象。这里创建了一个工厂类 XMLFactory，在类中定义了一个静态方法和一个实例方法（用来实例化 bean 对象）。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('public class XMLFactory {\n    public XMLInstance CreateInstance()\n    {\n        return new XMLInstance("instance",new CleanAir());\n    }\n\n    public static XMLInstance CreateStaticInstance()\n    {\n        return new XMLInstance("static instance",new CleanAir());\n    }\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br")])]),a("ul",[a("li",[n._v("（1）静态工厂方法\n只需设置工厂方法对应的类，以及对应的工厂方法。")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('<bean id="xmlfactorystaticinstance" class="spring.tutorial.chapter3.entity.XMLFactory" factory-method="CreateStaticInstance"></bean>\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br")])]),a("ul",[a("li",[n._v("（2）实例工厂方法\n需要先实例化工厂类，再通过工厂类对象调用实例方法获取 bean 对象。")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('<bean id="xmlfactory" class="spring.tutorial.chapter3.entity.XMLFactory" ></bean>\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br")])]),a("h4",{attrs:{id:"_4-常见数据类型注入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-常见数据类型注入"}},[n._v("#")]),n._v(" 4．常见数据类型注入")]),n._v(" "),a("ul",[a("li",[n._v("（1）List 属性注入\n使用"),a("code",[n._v("<list>")]),n._v("配置 java.util.List 类型的属性。List 属性中的元素可以是任何数据类型的值，如果是 Java 对象，可以使用 ref 指定，或使用"),a("code",[n._v("<bean>")]),n._v("定义新实例。如果是基础数据类型，可直接使用字符串。"),a("code",[n._v("<list>")]),n._v("中的元素会按配置的先后顺序排序。")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('<property name="lists">\n   <list>\n      <value>1</value>\n      <ref bean="CleanAir" />\n       <bean class="spring.tutorial.chapter3.CleanAir"/>\n  </list>\n</property>\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br")])]),a("ul",[a("li",[n._v("（2）Set 属性注入\n使用"),a("code",[n._v("<set>")]),n._v("配置 java.util.Set 类型的属性。Set 属性中的元素可以是任何数据类型的值，如果是 Java 对象，可以使用 ref 指定，或使用"),a("code",[n._v("<bean>")]),n._v("定义新实例。如果是基础数据类型，可直接使用字符串。"),a("code",[n._v("<set>")]),n._v("中的元素没有先后顺序。")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v(' <property name="sets">\n    <set>\n        <value>1</value>\n        <ref bean="CleanAir" />\n         <bean class="spring.tutorial.chapter3.CleanAir"/>\n    </set>\n</property>\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br")])]),a("ul",[a("li",[n._v("（3）Map 属性注入\n使用"),a("code",[n._v("<map>")]),n._v("配置 java.util.Map 类型的属性。"),a("code",[n._v("<entry>")]),n._v("配置 Map 里的元素，key 指定索引，value 指定值。如果是 Java 对象，可以使用 ref 指定，或使用"),a("code",[n._v("<bean>")]),n._v("定义新实例。")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('<property name="maps">\n    <map>\n       <entry key="key1" value="1"></entry>\n        <entry key="key2" value-ref="CleanAir"></entry>\n        <entry key="key3" >\n             <bean class="spring.tutorial.chapter3.CleanAir"/>\n        </entry>\n    </map>\n</property>\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br")])]),a("ul",[a("li",[a("p",[n._v("（4）Properties 属性注入\n使用"),a("code",[n._v("<props>")]),n._v("配置 java.util.Properties 类型的属性。"),a("code",[n._v("<props>")]),n._v("配置一个 Properties 对象，"),a("code",[n._v("<prop>")]),n._v("配置一条属性，属性 key 配置索引。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('<property name="pros">\n    <props>\n        <prop key="prokey1">prokeyA</prop>\n        <prop key="prokey2">prokeyB</prop>\n    </props>\n</property>\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br")])])]),n._v(" "),a("li",[a("p",[n._v("（5）自定义属性编辑器\n有一些属性是没法注入的，此时就需要自定义，比如日期类型。可以通过继承 PropertyEditorSupport 的类，重写 setAsText 方法来实现注入。这里定义了 CustomerProperty 继承 PropertyEditorSupport，重写了 setAsText 方法，并将该 bean 配置到 XML 中。")])])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('public class CustomerProperty  extends PropertyEditorSupport {\n    private String format="yyyy-MM-dd";\n    public String getFormat() {\n        return format;\n    }\n    public void setFormat(String format) {\n        this.format = format;\n    }\n    @Override\n    public void setAsText(String text) throws IllegalArgumentException {\n\n        SimpleDateFormat sdf=new SimpleDateFormat(format);\n        //super.setAsText(text);\n        try {\n            //转换对象，能过setValue方法重新赋值\n            this.setValue(sdf.parse(text));\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n    }\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v(' <bean id="customEditorConfigurer" class="org.springframework.beans.factory.config.CustomEditorConfigurer">\n     <property name="customEditors">\n          <map>\n               <entry key="java.util.Date" value="spring.tutorial.chapter3.CustomerProperty"/>\n           </map>\n     </property>\n</bean>\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br")])]),a("p",[n._v("配置之后就可以注入 Date 类型的属性了。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('<propertyname="date"value="2018-8-20"/>\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br")])]),a("p",[n._v("新建 XmlCollectionsDemo 类，配置上面几个类型的属性来演示。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('public class XmlCollectionsDemo {\n    private List<Object> list;\n\n    private Properties pros;\n\n    private Set<Object> sets;\n\n    private Map<String,Object> maps;\n\n    private Date date;\n\n    public Date getDate() {\n        return date;\n    }\n\n    public void setDate(Date date) {\n        this.date = date;\n    }\n\n    public List<Object> list() {\n        return list;\n    }\n\n    public void setLists(List<Object> list) {\n        this.list = list;\n    }\n\n    public Properties getPros() {\n        return pros;\n    }\n\n    public void setPros(Properties pros) {\n        this.pros = pros;\n    }\n\n    public Set<Object> getSets() {\n        return sets;\n    }\n\n    public void setSets(Set<Object> sets) {\n        this.sets = sets;\n    }\n\n    public Map<String, Object> getMaps() {\n        return maps;\n    }\n\n    public void setMaps(Map<String, Object> maps) {\n        this.maps = maps;\n    }\n\n    public static void main( String[] args ) throws Exception\n    {\n\n        ApplicationContext context=new ClassPathXmlApplicationContext(new String[]{"ApplicationContext.xml"});\n        BeanFactory factory=context;\n        XmlCollectionsDemo annontationInstance=(XmlCollectionsDemo)factory.getBean("xmlCollectionsDemo");\n        System.out.println(annontationInstance.list);\n        System.out.println(annontationInstance.pros);\n        System.out.println(annontationInstance.sets);\n        System.out.println(annontationInstance.maps);\n        System.out.println(annontationInstance.date);\n    }\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br"),a("span",{staticClass:"line-number"},[n._v("58")]),a("br"),a("span",{staticClass:"line-number"},[n._v("59")]),a("br"),a("span",{staticClass:"line-number"},[n._v("60")]),a("br"),a("span",{staticClass:"line-number"},[n._v("61")]),a("br"),a("span",{staticClass:"line-number"},[n._v("62")]),a("br"),a("span",{staticClass:"line-number"},[n._v("63")]),a("br"),a("span",{staticClass:"line-number"},[n._v("64")]),a("br")])]),a("p",[n._v("下面是属性对应的 XML 配置文件。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('<bean id="xmlCollectionsDemo" class="spring.tutorial.chapter3.entity.XmlCollectionsDemo">\n    <property name="lists">\n        <list>\n            <value>1</value>\n            <ref bean="cleanAir" />\n            <bean class="spring.tutorial.chapter3.cleanAir"/>\n        </list>\n    </property>\n    <property name="sets">\n        <set>\n            <value>1</value>\n            <ref bean="cleanAir" />\n            <bean class="spring.tutorial.chapter3.air.impl.CleanAir"/>\n        </set>\n    </property>\n    <property name="maps">\n        <map>\n            <entry key="key1" value="1"></entry>\n            <entry key="key2" value-ref="cleanAir"></entry>\n            <entry key="key3" >\n                <bean class="spring.tutorial.chapter3.air.impl.CleanAir"/>\n            </entry>\n        </map>\n    </property>\n    <property name="pros">\n        <props>\n            <prop key="prokey1">prokeyA</prop>\n            <prop key="prokey2">prokeyB</prop>\n        </props>\n    </property>\n    <property name="date" value="2018-8-20"/>\n</bean>\n<bean id="customEditorConfigurer" class="org.springframework.beans.factory.config.CustomEditorConfigurer">\n    <property name="customEditors">\n        <map>\n            <entry key="java.util.Date" value="spring.tutorial.chapter3.entity.CustomerProperty"/>\n        </map>\n    </property>\n</bean>\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br")])]),a("blockquote",[a("p",[n._v("通过运行 main 方法，打印出属性值：")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("[1, CleanAir, CleanAir]\n{prokey2=prokeyB, prokey1=prokeyA}\n[1, CleanAir, CleanAir]\n{key1=1, key2=CleanAir, key3=CleanAir}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("h4",{attrs:{id:"_5-初始化函数、销毁函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-初始化函数、销毁函数"}},[n._v("#")]),n._v(" 5．初始化函数、销毁函数")]),n._v(" "),a("p",[n._v("通过上面几种注入方式的学习，对通过 XML 对 bean 实例化有了了解。有的对象在实例化之后还需要执行某些初始化代码，但这些初始化代码还不能写在构造函数中，此时可以将初始化代码写到某个方法中。将 init-method 属性值设置为该方法，Spring 会强制执行该方法进行初始化。有的对象在使用完毕之后需要释放，可以使用 destroy-method 来进行销毁。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('public void DestoryMethod()\n{\n    System.out.println("DestoryMethod");\n}\npublic void InitMethod()\n{\n    System.out.println("InitMethod");\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br")])]),a("p",[n._v("这里先在 XMLInstance 类中增加上面两个方法来模拟销毁和初始化方法，然后在 xml 配置 bean 时设置 destroy-method、init-method 属性值对应两个方法的方法名。注解中的@PostConstruct 对应 init-method、@PreDestory 对应 destroy-method。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('<bean id="xmlfactoryinstance" factory-bean="xmlfactory" factory-method=\n            "CreateInstance" destroy-method="DestoryMethod" init-method="InitMethod"></bean>\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br")])]),a("h3",{attrs:{id:"_3-3-2-注解方式注入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-注解方式注入"}},[n._v("#")]),n._v(" 3.3.2 注解方式注入")]),n._v(" "),a("h4",{attrs:{id:"_1-常用注解介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-常用注解介绍"}},[n._v("#")]),n._v(" 1．常用注解介绍")]),n._v(" "),a("p",[n._v("学习完 XML 注入之后再学习注解方式注入就容易得多了，注解方式注入主要涉及@Autowired、@Resource、@Required、@Qualifier、@Value 这几个注解。在 2.2.4 节定义 Person 时就使用过@Autowired、@Qualifier。下面来了解一下它们的具体用法。")]),n._v(" "),a("ul",[a("li",[n._v("@Autowired：默认按"),a("code",[n._v("类型（byType）")]),n._v("匹配注入 bean，可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。在使用@Autowired 时，首先在容器中查询对应类型的 bean。如果查询结果刚好为一个，就将该 bean 装配给@Autowired 指定的数据；如果查询的结果不止一个，那么@Autowired 会根据名称(byName)来查找。如果查询的结果为空，那么会抛出异常。解决方法时，使用 required=false。")]),n._v(" "),a("li",[n._v("@Required：适用于 bean 属性 setter 方法，并表示受影响的 bean 属性必须在 XML 配置文件在配置时进行填充；否则，容器会抛出一个 BeanInitializationException 异常。")]),n._v(" "),a("li",[n._v("@Qualifier：@Autowired 默认是单实例的，但是在面向接口编程中，如果把一个属性设置为接口类型，一个接口就可能有多个实现，那么到底注入哪一个呢？为了解决这个问题，就有了@Qualifier。")]),n._v(" "),a("li",[n._v("@Value：在 xml 配置属性时可以通过 property 的 value 设置默认值，@Value 也可以为属性设置默认值。")]),n._v(" "),a("li",[n._v("@Resource：默认按名称匹配注入 bean。要求提供一个 bean 名称(byName)的属性，如果属性为空，就自动采用标注处的变量名或方法名作为 bean 的名称。如果我们没有在使用@Resource 时指定 bean 的名字，同时 Spring 容器中又没有该名字的 bean，这时@Resource 就会退化为@Autowired，即按照类型注入。")])]),n._v(" "),a("p",[n._v("用标注处的变量名或方法名作为 bean 的名称。如果我们没有在使用@Resource 时指定 bean 的名字，同时 Spring 容器中又没有该名字的 bean，这时@Resource 就会退化为@Autowired，即按照类型注入。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('@Component\npublic class AnnontationInstance {\n    @Value("abc")\n    private String name;\n\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    //@Resource与@Autowired两者选其一\n    // @Autowired\n    // @Qualifier(value="cleanAir")\n    private IAir air;\n    @Resource(name="cleanAir")\n    public void setAir(IAir air) {\n        this.air = air;\n    }\n\n    public void Breath()\n    {\n        System.out.println("Name:"+this.name+";Air:"+this.air.toString());\n    }\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br")])]),a("p",[n._v("在上面的代码中，使用@Value 注解为 name 设置了默认值，使用@Resources 设置 bean 的名称为 IAir 属性注入 bean，也可以使用@Autowired+@Qualifier 为 IAir 注入 bean。")]),n._v(" "),a("h4",{attrs:{id:"_2-开启注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-开启注解"}},[n._v("#")]),n._v(" 2．开启注解")]),n._v(" "),a("p",[n._v("配置完注解之后，还要告诉 Spring 开启注解，这样@Autowired、@Resources 这些注解才起作用。开启注解有两种比较简单的方式。\n（1）在 xml 配置文件中使用 context:annotation-config：\n"),a("code",[n._v("<context:annotation-config />")]),n._v("\n（2）在 xml 配置文件中使用 context:component-scan：\n"),a("code",[n._v('<context:component-scan base-package="spring.tutorial.chapter3"/>')])]),n._v(" "),a("h2",{attrs:{id:"_3-4-bean-的作用域和生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-bean-的作用域和生命周期"}},[n._v("#")]),n._v(" 3.4 Bean 的作用域和生命周期")]),n._v(" "),a("p",[n._v("在 3.1.2 节容器启动获得 BeanDefinition 对象中有一个 scope 属性。该属性控制着 bean 对象的作用域。本节介绍 Bean 的作用域及生命周期，了解 bean 是怎么来的、怎么没的。")]),n._v(" "),a("h3",{attrs:{id:"_3-4-1-bean-的作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-1-bean-的作用域"}},[n._v("#")]),n._v(" 3.4.1 Bean 的作用域")]),n._v(" "),a("p",[n._v("在 3.1.2 节中介绍到 Bean 容器启动会先读取 bean 的 xml 配置文件，然后将 xml 中每个 bean 元素分别转换成 BeanDefinition 对象。在 BeanDefinition 对象中有 scope 属性，就是它控制着 bean 的作用域。\nSpring 框架支持 5 种作用域，有 3 种作用域是当开发者使用基于 Web 的 ApplicationContext 时才生效的。表 3-2 给出了 Spring 直接支持的作用域。当然开发者也可以自己定制作用域。\n表 3-2 Spring 直接支持的作用域\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/5c87eda105f41178222eb56cb0d47bdb.png",alt:"表3-2 Spring直接支持的作用域"}}),n._v("\n我们可以以 XMLInstance 类为基础演示一下 singleton 和 prototype 作用域。这里使用通过 BeanFactory 的 getBean 方法获取两次 bean 对象。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('XMLInstance instance=(XMLInstance)factory.getBean("xmlinstance");\ninstance.setName("123");\ninstance.Breath();\ninstance=(XMLInstance)factory.getBean("xmlinstance");\ninstance.Breath();\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("p",[n._v("如果我们采用 bean 默认的作用域 singleton，如下配置，那么两个 getBean 获取的对象是一致的。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('<bean id="xmlinstance" class="spring.tutorial.chapter3.entity.XMLInstance" scope="singleton">\n    <property name="air" ref="cleanAir"></property>\n    <property name="name" value="abc"></property>\n</bean>\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("blockquote",[a("p",[n._v("输出结果：")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("Name:123;Air:CleanAir\nName:123;Air:CleanAir\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br")])]),a("p",[n._v("如果我们采用 bean 默认的作用域 prototype，如下配置，那么两个 getBean 获取的对象是不一致的。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('<bean id="xmlinstance" class="spring.tutorial.chapter3.entity.XMLInstance" scope="prototype">\n    <property name="air" ref="cleanAir"></property>\n    <property name="name" value="abc"></property>\n</bean>\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("blockquote",[a("p",[n._v("输出结果：")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("Name:123;Air:CleanAir\nName:abc;Air:CleanAir\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br")])]),a("h3",{attrs:{id:"_3-4-2-bean-的生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-2-bean-的生命周期"}},[n._v("#")]),n._v(" 3.4.2 Bean 的生命周期")]),n._v(" "),a("p",[n._v("前面章节介绍了 bean 容器以及 bean 的配置与注入，本节学习 bean 的生命周期（见图 3-1），了解 bean 是怎么来的、怎么没的。")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/d1ebf6c787f6e5fb30bedf75cbdcc054.png",alt:"图3-1"}})]),n._v(" "),a("p",[n._v("图 3-1")]),n._v(" "),a("p",[n._v("在 ApplicationContext 容器中，Bean 的生命周期流程如图 3-1 所示。")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("（1）容器启动后，会对 scope 为 singleton 且非懒加载的 bean 进行实例化。")])]),n._v(" "),a("li",[a("p",[n._v("（2）按照 Bean 定义信息配置信息，注入所有的属性。")])]),n._v(" "),a("li",[a("p",[n._v("（3）如果 Bean 实现了 BeanNameAware 接口，会回调该接口的 setBeanName()方法，传入该 Bean 的 id，此时该 Bean 就获得了自己在配置文件中的 id。")])]),n._v(" "),a("li",[a("p",[n._v("（4）如果 Bean 实现了 BeanFactoryAware 接口，会回调该接口的 setBeanFactory()方法，传入该 Bean 的 BeanFactory，这样该 Bean 就获得了自己所在的 BeanFactory。")])]),n._v(" "),a("li",[a("p",[n._v("（5）如果 Bean 实现了 ApplicationContextAware 接口，会回调该接口的 setApplicationContext()方法，传入该 Bean 的 ApplicationContext，这样该 Bean 就获得了自己所在的 ApplicationContext。")])]),n._v(" "),a("li",[a("p",[n._v("（6）如果有 Bean 实现了 BeanPostProcessor 接口，就会回调该接口的 postProcessBefore-Initialzation()方法。")])]),n._v(" "),a("li",[a("p",[n._v("（7）如果 Bean 实现了 InitializingBean 接口，就会回调该接口的 afterPropertiesSet()方法。")])]),n._v(" "),a("li",[a("p",[n._v("（8）如果 Bean 配置了 init-method 方法，就会执行 init-method 配置的方法。")])]),n._v(" "),a("li",[a("p",[n._v("（9）如果 Bean 实现了 BeanPostProcessor 接口，就会回调该接口的 postProcessAfterInitialization()方法。")])]),n._v(" "),a("li",[a("p",[n._v("（10）之后，就可以正式使用该 Bean 了。对于 scope 为 singleton 的 Bean，Spring 的 ioc 容器中会缓存一份该 Bean 的实例；对于 scope 为 prototype 的 Bean，每次被调用都会新建一个新的对象，其生命周期就交给调用方管理了，不再是由 Spring 容器进行管理了。")])]),n._v(" "),a("li",[a("p",[n._v("（11）容器关闭后，如果 Bean 实现了 DisposableBean 接口，就会回调该接口的 destroy()方法。")])]),n._v(" "),a("li",[a("p",[n._v("（12）如果 Bean 配置了 destroy-method 方法，就会执行 destroy-method 配置的方法。至此，整个 Bean 的生命周期结束。")]),n._v(" "),a("p",[n._v("​")]),n._v(" "),a("p",[n._v("这里在 UserBean 类基础上进行改造，增加 name 属性并实现 ApplicationContextAware 接口。")])])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('public class UserBean implements BeanNameAware, BeanFactoryAware, InitializingBean, DisposableBean, ApplicationContextAware {\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n        System.out.println("set方法被调用");\n    }\n\n    public UserBean() {\n        System.out.println("UserBean类构造方法");\n    }\n\n    public void setBeanName(String name) {\n        System.out.println("BeanNameAware被调用："+name);\n    }\n\n    @Override\n    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n        System.out.println("BeanFactoryAware被调用");\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        System.out.println("InitializingBean被调用");\n    }\n\n    public void destroy() throws Exception {\n        System.out.println("DisposableBean被调用");\n    }\n    //自定义的初始化函数\n    public void myInit() {\n        System.out.println("myInit被调用");\n    }\n    //自定义的销毁方法\n    public void myDestroy() {\n        System.out.println("myDestroy被调用");\n    }\n\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        System.out.println("setApplicationContext被调用");\n    }\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br")])]),a("p",[n._v("定义后置处理器 CusBeanPostProcessor，实现 BeanPostProcessor 接口。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('public class CusBeanPostProcessor implements BeanPostProcessor {\n\n    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n        System.out.println(bean);\n        System.out.println("postProcessBeforeInitialization被调用："+beanName);\n        return bean;\n\n    }\n\n    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n        System.out.println(bean);\n        System.out.println("postProcessAfterInitialization被调用："+beanName);\n        return bean;\n    }\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br")])]),a("p",[n._v("在 xml 中配置 bean 和 BeanPostProcessor。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('  <bean id="user" class="spring.tutorial.chapter3.entity.UserBean" destroy-method="myDestroy" init-method="myInit">\n        <property name="name" value="abc"></property>\n    </bean>\n<bean id="postProcessor" class="spring.tutorial.chapter3.entity.CusBeanPostProcessor" />\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("blockquote",[a("p",[n._v("测试：")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('ApplicationContext context = new ClassPathXmlApplicationContext(new String[]{\n                "applicationContext.xml"\n        });\n        BeanFactory  factory = context;\n        UserBean user = (UserBean)factory.getBean("user");\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/7c412a271866350c9403431603b2eb5d.png",alt:"image-20201124230029832"}})]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("UserBean类构造方法\nset方法被调用\nBeanNameAware被调用：user\nBeanFactoryAware被调用\nsetApplicationContext被调用\nspring.tutorial.chapter3.entity.UserBean@55a561cf\npostProcessBeforeInitialization被调用：user\nInitializingBean被调用\nmyInit被调用\nspring.tutorial.chapter3.entity.UserBean@55a561cf\npostProcessAfterInitialization被调用：user\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br")])]),a("h2",{attrs:{id:"_3-5-小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-小结"}},[n._v("#")]),n._v(" 3.5 小结")]),n._v(" "),a("p",[n._v("本章主要介绍了 Bean 容器 BeanFactory 和 ApplicationContext，学习了 Bean 的配置和注入、Bean 的作用域和生命周期。通过本章的学习，了解了 Spring 最核心、最基本的模块，为后面的学习打下基础。")])])}),[],!1,null,null,null);a.default=t.exports}}]);