(window.webpackJsonp=window.webpackJsonp||[]).push([[141],{1396:function(e,n,a){"use strict";a.r(n);var s=a(4),l=Object(s.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"spring-boot-的日志详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-的日志详解"}},[e._v("#")]),e._v(" Spring Boot 的日志详解")]),e._v(" "),n("h2",{attrs:{id:"日志框架的介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#日志框架的介绍"}},[e._v("#")]),e._v(" 日志框架的介绍")]),e._v(" "),n("p",[e._v("Logback 是由 log4j 创始人设计的另一个开源日志组件,官方网站： http://logback.qos.ch。它当前分为下面下个模块：")]),e._v(" "),n("ul",[n("li",[e._v("logback-core：其它两个模块的基础模块")]),e._v(" "),n("li",[e._v("logback-classic：它是 log4j 的一个改良版本，同时它完整实现了 slf4j API 使你可以很方便地更换成其它日志系统如 log4j 或 JDK14 Logging")]),e._v(" "),n("li",[e._v("logback-access：访问模块与 Servlet 容器集成提供通过 Http 来访问日志的功能\nSpring Boot 默认使用的是 Logback 这个日志框架，一般而言，使用默认的就足够了，如果读者不习惯的话，只需要更换对应框架的 Starter 就足够了。")])]),e._v(" "),n("h3",{attrs:{id:"日志格式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#日志格式"}},[e._v("#")]),e._v(" 日志格式")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/andanyoung/springnotes/raw/master/image/Logging%E6%A0%BC%E5%BC%8F.png",alt:"日志格式"}})]),e._v(" "),n("ul",[n("li",[e._v("日期时间：精确到毫秒")]),e._v(" "),n("li",[e._v("日志级别：ERROR， WARN， INFO， DEBUG or TRACE")]),e._v(" "),n("li",[e._v("进程 id")]),e._v(" "),n("li",[e._v("分割符：用于区分实际的日志记录")]),e._v(" "),n("li",[e._v("线程名：括在方括号中")]),e._v(" "),n("li",[e._v("日志名字：通常是源类名")]),e._v(" "),n("li",[e._v("日志信息")])]),e._v(" "),n("h2",{attrs:{id:"加入依赖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#加入依赖"}},[e._v("#")]),e._v(" 加入依赖")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-logging</artifactId>\n</dependency>\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("h3",{attrs:{id:"更改配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#更改配置"}},[e._v("#")]),e._v(" 更改配置")]),e._v(" "),n("ul",[n("li",[e._v("application.properties")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("server.port=8888\nspring.output.ansi.enabled=always\nlogging.level.org.springframework.web=warn\nlogging.level.root=INFO\nlogging.path=D:/java/log\nlogging.file.max-size=10MB\n#写入文件的格式\n#logging.pattern.file=\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("ul",[n("li",[e._v("控制台输出\n日志级别从低到高分为 TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为 WARN，则低于 WARN 的信息都不会输出。\nSpring Boot 中默认配置 ERROR、WARN 和 INFO 级别的日志输出到控制台。您还可以通过启动您的应用程序--debug 标志来启用“调试”模式（开发的时候推荐开启）")]),e._v(" "),n("li",[e._v("文件输出\n默认情况下，Spring Boot 将日志输出到控制台，不会写到日志文件。如果要编写除控制台输出之外的日志文件，则需在 application.properties 中设置 logging.file 或 logging.path 属性。\n"),n("ul",[n("li",[e._v("logging.file，设置文件，可以是绝对路径，也可以是相对路径。如：logging.file=my.log")]),e._v(" "),n("li",[e._v("logging.path，设置目录，会在该目录下创建 spring.log 文件，并写入日志内容，如：logging.path=/var/log\n如果只配置 logging.file，会在项目的当前路径下生成一个 xxx.log 日志文件。")])])])]),e._v(" "),n("blockquote",[n("p",[e._v("如果只配置 logging.path，在 /var/log 文件夹生成一个日志文件为 spring.log\n注：二者不能同时使用，如若同时使用，则只有 logging.file 生效\n默认情况下，日志文件的大小达到 10MB 时会切分一次，产生新的日志文件，默认级别为：ERROR、WARN、INFO")])]),e._v(" "),n("h2",{attrs:{id:"logback-的配置介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#logback-的配置介绍"}},[e._v("#")]),e._v(" logback 的配置介绍")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("Logger、appender 及 layout\n　　 Logger 作为日志的记录器，把它关联到应用的对应的 context 上后，主要用于存放日志对象，也可以定义日志类型、级别。\n　　 Appender 主要用于指定日志输出的目的地，目的地可以是控制台、文件、远程套接字服务器、 MySQL、PostreSQL、 Oracle 和其他数据库、 JMS 和远程 UNIX Syslog 守护进程等。\n　　 Layout 负责把事件转换成字符串，格式化的日志信息的输出。")])]),e._v(" "),n("li",[n("p",[e._v("logger context\n　　各个 logger 都被关联到一个 LoggerContext，LoggerContext 负责制造 logger，也负责以树结构排列各 logger。其他所有 logger 也通过 org.slf4j.LoggerFactory 类的静态方法 getLogger 取得。 getLogger 方法以 logger 名称为参数。用同一名字调用 LoggerFactory.getLogger 方法所得到的永远都是同一个 logger 对象的引用。")])]),e._v(" "),n("li",[n("p",[e._v("有效级别及级别的继承\n　　 Logger 可以被分配级别。级别包括：TRACE、DEBUG、INFO、WARN 和 ERROR，定义于 ch.qos.logback.classic.Level 类。如果 logger 没有被分配级别，那么它将从有被分配级别的最近的祖先那里继承级别。root logger 默认级别是 DEBUG。")])]),e._v(" "),n("li",[n("p",[e._v('打印方法与基本的选择规则\n　　打印方法决定记录请求的级别。例如，如果 L 是一个 logger 实例，那么，语句 L.info("..")是一条级别为 INFO 的记录语句。记录请求的级别在高于或等于其 logger 的有效级别时被称为被启用，否则，称为被禁用。记录请求级别为 p，其 logger 的有效级别为 q，只有则当 p>=q 时，该请求才会被执行。\n该规则是 logback 的核心。级别排序为： '),n("code",[e._v("TRACE < DEBUG < INFO < WARN < ERROR")])])])]),e._v(" "),n("h2",{attrs:{id:"自定义日志配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义日志配置"}},[e._v("#")]),e._v(" 自定义日志配置")]),e._v(" "),n("p",[e._v("由于日志服务一般都在 ApplicationContext 创建前就初始化了，它并不是必须通过 Spring 的配置文件控制。因此通过系统属性和传统的 Spring Boot 外部配置文件依然可以很好的支持日志控制和管理。\n根据不同的日志系统，你可以按如下规则组织配置文件名，就能被正确加载：")]),e._v(" "),n("ul",[n("li",[e._v("Logback：logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy")]),e._v(" "),n("li",[e._v("Log4j：log4j-spring.properties, log4j-spring.xml, log4j.properties, log4j.xml")]),e._v(" "),n("li",[e._v("Log4j2：log4j2-spring.xml, log4j2.xml")]),e._v(" "),n("li",[e._v("JDK (Java Util Logging)：logging.properties\nSpring Boot 官方推荐优先使用带有-spring 的文件名作为你的日志配置（如使用 logback-spring.xml，而不是 logback.xml），命名为 logback-spring.xml 的日志配置文件，spring boot 可以为它添加一些 spring boot 特有的配置项（下面会提到）。\n上面是默认的命名规则，并且放在 src/main/resources 下面即可。")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("logging.config=classpath:logging-config.xml\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("ul",[n("li",[e._v("下面我们来看看一个普通的 logback-spring.xml 例子")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<?xml version="1.0" encoding="UTF-8"?>\n<configuration scan="true" scanPeriod="60 seconds" debug="false">\n    <contextName>spring-boot-logging</contextName>\n    <property name="logPath" value="log"/>\n\n    \x3c!--输出到控制台--\x3e\n    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">\n        <encoder>\n            <pattern>%d{yyyy-MM-dd-HH:mm:ss} [%thread] %-5level %logger- %msg%n</pattern>\n        </encoder>\n    </appender>\n\n    \x3c!--输出到文件--\x3e\n    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">\n        \x3c!--<file>${logPath}/spring-boot-logging.log</file>--\x3e\n\n        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">\n            <fileNamePattern>${logPath}/spring-boot-logging.%d{yyyy-MM-dd}.log.zip</fileNamePattern>\n            \x3c!-- 日志保存周期 --\x3e\n            <maxHistory>30</maxHistory>\n            \x3c!-- 总大小 --\x3e\n            <totalSizeCap>100KB</totalSizeCap>\n        </rollingPolicy>\n        <encoder>\n            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n        </encoder>\n    </appender>\n\n    <root level="INFO">\n        <appender-ref ref="console"/>\n        <appender-ref ref="file"/>\n    </root>\n    <logger name="cn.andyoung.logback.controller" level="WARN">\n        <appender-ref ref="console"/>\n        <appender-ref ref="file"/>\n    </logger>\n</configuration>\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br")])]),n("h2",{attrs:{id:"logback-xml-常用配置详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#logback-xml-常用配置详解"}},[e._v("#")]),e._v(" logback.xml 常用配置详解")]),e._v(" "),n("ul",[n("li",[e._v("scan:当此属性设置为 true 时，配置文件如果发生改变，将会被重新加载，默认值为 true。")]),e._v(" "),n("li",[e._v("scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当 scan 为 true 时，此属性生效。默认的时间间隔为 1 分钟。")]),e._v(" "),n("li",[e._v("debug:当此属性设置为 true 时，将打印出 logback 内部日志信息，实时查看 logback 运行状态。默认值为 false。")])]),e._v(" "),n("h2",{attrs:{id:"根节点-configuration-的子节点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#根节点-configuration-的子节点"}},[e._v("#")]),e._v(" 根节点"),n("code",[e._v("<configuration>")]),e._v("的子节点：")]),e._v(" "),n("p",[n("code",[e._v("<configuration>")]),e._v("下面一共有 2 个属性，3 个子节点，分别是：")]),e._v(" "),n("h2",{attrs:{id:"属性一-设置上下文名称-contextname"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#属性一-设置上下文名称-contextname"}},[e._v("#")]),e._v(" 属性一：设置上下文名称"),n("code",[e._v("<contextName>")])]),e._v(" "),n("p",[e._v("每个 logger 都关联到 logger 上下文，默认上下文名称为“default”。但可以使用"),n("code",[e._v("<contextName>")]),e._v("设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改,可以通过"),n("code",[e._v("%contextName")]),e._v("来打印日志上下文名称。\n"),n("code",[e._v("<contextName>logback</contextName>")])]),e._v(" "),n("h2",{attrs:{id:"属性二-设置变量-property"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#属性二-设置变量-property"}},[e._v("#")]),e._v(" 属性二：设置变量"),n("code",[e._v("<property>")])]),e._v(" "),n("p",[e._v("用来定义变量值的标签，"),n("code",[e._v("<property>")]),e._v(" 有两个属性，name 和 value；其中 name 的值是变量的名称，value 的值时变量定义的值。通过"),n("code",[e._v("<property>")]),e._v("定义的值会被插入到 logger 上下文中。定义变量后，可以使“${}”来使用变量。\n"),n("code",[e._v('<property name="logPath" value="log"/>')])]),e._v(" "),n("h2",{attrs:{id:"子节点一-appender"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#子节点一-appender"}},[e._v("#")]),e._v(" 子节点一"),n("code",[e._v("<appender>")])]),e._v(" "),n("p",[e._v("appender 用来格式化日志输出节点，有俩个属性 name 和 class，class 用来指定哪种输出策略，常用就是控制台输出策略和文件输出策略。")]),e._v(" "),n("h2",{attrs:{id:"控制台输出-consoleappender"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#控制台输出-consoleappender"}},[e._v("#")]),e._v(" 控制台输出 ConsoleAppender：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('\x3c!--输出到控制台--\x3e\n    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">\n        <filter class="ch.qos.logback.classic.filter.LevelFilter">\n            <level>ERROR</level>\n        </filter>\n        <encoder>\n            <pattern>%d{yyyy-MM-dd-HH:mm:ss} [%thread] %-5level %logger- %msg%n</pattern>\n        </encoder>\n    </appender>\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br")])]),n("ul",[n("li",[n("code",[e._v("<encoder>")]),e._v("表示对日志进行编码：\n"),n("ul",[n("li",[e._v("%d{HH: mm:ss.SSS}——日志输出时间")]),e._v(" "),n("li",[e._v("%thread——输出日志的进程名字，这在 Web 应用以及异步任务处理中很有用")]),e._v(" "),n("li",[e._v("%-5level——日志级别，并且使用 5 个字符靠左对齐")]),e._v(" "),n("li",[e._v("%logger{36}——日志输出者的名字")]),e._v(" "),n("li",[e._v("%msg——日志消息")]),e._v(" "),n("li",[e._v("%n——平台的换行符")])])])]),e._v(" "),n("p",[e._v("ThresholdFilter 为系统定义的拦截器，例如我们用 ThresholdFilter 来过滤掉 ERROR 级别以下的日志不输出到文件中。如果不用记得注释掉，不然你控制台会发现没日志~")]),e._v(" "),n("h2",{attrs:{id:"fileappender-把日志添加到文件-有以下子节点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#fileappender-把日志添加到文件-有以下子节点"}},[e._v("#")]),e._v(" FileAppender：把日志添加到文件，有以下子节点：")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("<file>")]),e._v("：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。")]),e._v(" "),n("li",[n("code",[e._v("<append>")]),e._v("：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是 true。")]),e._v(" "),n("li",[n("code",[e._v("<encoder>")]),e._v("：对记录事件进行格式化。（具体参数稍后讲解 ）")]),e._v(" "),n("li",[n("code",[e._v("<prudent>")]),e._v("：如果是 true，日志会被安全的写入文件，即使其他的 FileAppender 也在向此文件做写入操作，效率低，默认是 false。")])]),e._v(" "),n("h2",{attrs:{id:"rollingfileappender-滚动记录文件-先将日志记录到指定文件-当符合某个条件时-将日志记录到其他文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#rollingfileappender-滚动记录文件-先将日志记录到指定文件-当符合某个条件时-将日志记录到其他文件"}},[e._v("#")]),e._v(" RollingFileAppender:滚动记录文件,先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件")]),e._v(" "),n("p",[e._v("另一种常见的日志输出到文件，随着应用的运行时间越来越长，日志也会增长的越来越多，将他们输出到同一个文件并非一个好办法。RollingFileAppender 用于切分文件日志：")]),e._v(" "),n("ul",[n("li",[n("p",[n("code",[e._v("<file>")]),e._v("：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("<append>")]),e._v("：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是 true。")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("<rollingPolicy>")]),e._v(":当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。属性 class 定义具体的滚动策略类")])]),e._v(" "),n("li",[n("p",[n("code",[e._v('class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"')]),e._v("： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。有以下子节点：")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("<fileNamePattern>")]),e._v("：必要节点，包含文件名及“%d”转换符，“%d”可以包含一个 java.text.SimpleDateFormat 指定的时间格式，如：%d{yyyy-MM}。如果直接使用 %d，默认格式是 yyyy-MM-dd。RollingFileAppender 的 file 字节点可有可无，通过设置 file，可以为活动文件和归档文件指定不同位置，当前日志总是记录到 file 指定的文件（活动文件），活动文件的名字不会改变；如果没设置 file，活动文件的名字会根据 fileNamePattern 的值，每隔一段时间改变一次。“/”或者“\\”会被当做目录分隔符。")]),e._v(" "),n("li",[n("code",[e._v("<maxHistory>")]),e._v(":\n可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每个月滚动，且"),n("code",[e._v("<maxHistory>")]),e._v("是 6，则只保存最近 6 个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除。")])])]),e._v(" "),n("li",[n("p",[n("code",[e._v('class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"')]),e._v("： 查看当前活动文件的大小，如果超过指定大小会告知 RollingFileAppender 触发当前活动文件滚动。只有一个节点:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("<maxFileSize>")]),e._v(":这是活动文件的大小，默认值是 10MB。")]),e._v(" "),n("li",[n("code",[e._v("<prudent>")]),e._v("：当为 true 时，不支持 FixedWindowRollingPolicy。支持 TimeBasedRollingPolicy，但是有两个限制，1 不支持也不允许文件压缩，2 不能设置 file 属性，必须留空。")]),e._v(" "),n("li",[n("code",[e._v("<triggeringPolicy>")]),e._v(": 告知 RollingFileAppender 合适激活滚动。")]),e._v(" "),n("li",[n("code",[e._v('class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy"')]),e._v(" 根据固定窗口算法重命名文件的滚动策略。有以下子节点：")]),e._v(" "),n("li",[n("code",[e._v("<minIndex>")]),e._v(":窗口索引最小值")]),e._v(" "),n("li",[n("code",[e._v("<maxIndex>")]),e._v(":窗口索引最大值，当用户指定的窗口过大时，会自动将窗口设置为 12。")]),e._v(" "),n("li",[n("code",[e._v("<fileNamePattern>")]),e._v(":必须包含“%i”例如，假设最小值和最大值分别为 1 和 2，命名模式为 mylog%i.log,会产生归档文件 mylog1.log 和 mylog2.log。还可以指定文件压缩选项，")])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("<encoder>")]),e._v("：对记录事件进行格式化。负责两件事，一是把日志信息转换成字节数组，二是把字节数组写入到输出流。")])]),e._v(" "),n("li",[n("p",[e._v("PatternLayoutEncoder 是唯一有用的且默认的 encoder ，有一个"),n("code",[e._v("<pattern>")]),e._v("节点，用来设置日志的输入格式。使用“%”加“转换符”方式，如果要输出“%”，则必须用“\\”对“%”进行转义。")])]),e._v(" "),n("li",[n("p",[e._v("还有 SocketAppender、SMTPAppender、DBAppender、SyslogAppender、SiftingAppender，并不常用，这里就不详解了。\n大家可以参考官方文档（http://logback.qos.ch/documentation.html），还可以编写自己的Appender。")])]),e._v(" "),n("li",[n("p",[e._v("子节点"),n("code",[e._v("<loger>")]),e._v("：用来设置某一个包或具体的某一个类的日志打印级别、以及指定"),n("code",[e._v("<appender>")]),e._v("。"),n("code",[e._v("<loger>")]),e._v("仅有一个 name 属性，一个可选的 level 和一个可选的 addtivity 属性。\n可以包含零个或多个"),n("code",[e._v("<appender-ref>")]),e._v("元素，标识这个"),n("code",[e._v("appender")]),e._v("将会添加到这个 loger")]),e._v(" "),n("ul",[n("li",[e._v("name: 用来指定受此 loger 约束的某一个包或者具体的某一个类。")]),e._v(" "),n("li",[e._v("level: 用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值 INHERITED 或者同义词 NULL，代表强制执行上级的级别。 如果未设置此属性，那么当前 loger 将会继承上级的级别。")]),e._v(" "),n("li",[e._v("addtivity: 是否向上级 loger 传递打印信息。默认是 true。同"),n("code",[e._v("<loger>")]),e._v("一样，可以包含零个或多个"),n("code",[e._v("<appender-ref>")]),e._v("元素，标识这个 appender 将会添加到这个 loger。")])])]),e._v(" "),n("li",[n("p",[e._v("子节点"),n("code",[e._v("<root>")]),e._v(":它也是"),n("code",[e._v("<loger>")]),e._v("元素，但是它是根 loger,是所有"),n("code",[e._v("<loger>")]),e._v('的上级。只有一个 level 属性，因为 name 已经被命名为"root",且已经是最上级了。')]),e._v(" "),n("ul",[n("li",[e._v("level: 用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为 INHERITED 或者同义词 NULL。 默认是 DEBUG。")])])])]),e._v(" "),n("h1",{attrs:{id:"常用-logger-配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常用-logger-配置"}},[e._v("#")]),e._v(" 常用 logger 配置")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('\x3c!--输出到文件--\x3e\n    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">\n        <file>${logPath}/spring-boot-logging.log</file>\n\n        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">\n            <fileNamePattern>${logPath}/spring-boot-logging.%d{yyyy-MM-dd}.log</fileNamePattern>\n            \x3c!-- 日志保存周期 --\x3e\n            <maxHistory>30</maxHistory>\n            \x3c!-- 总大小 --\x3e\n            <totalSizeCap>100KB</totalSizeCap>\n        </rollingPolicy>\n        <encoder>\n            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n        </encoder>\n    </appender>\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br")])]),n("p",[e._v("其中重要的是 rollingPolicy 的定义，上例中"),n("code",[e._v("<fileNamePattern>")]),e._v("logback.%d{yyyy-MM-dd}.log"),n("code",[e._v("</fileNamePattern>")]),e._v("定义了日志的切分方式——把每一天的日志归档到一个文件中，"),n("code",[e._v("<maxHistory>")]),e._v("30"),n("code",[e._v("</maxHistory>")]),e._v("表示只保留最近 30 天的日志，以防止日志填满整个磁盘空间。同理，可以使用%d{yyyy-MM-dd_HH-mm}来定义精确到分的日志切分方式。"),n("code",[e._v("<totalSizeCap>")]),e._v("1GB"),n("code",[e._v("</totalSizeCap")]),e._v(">用来指定日志文件的上限大小，例如设置为 1GB 的话，那么到了这个值，就会删除旧的日志")]),e._v(" "),n("blockquote",[n("p",[e._v("说明：当天的日志会记录在"),n("code",[e._v("spring-boot-logging.log")]),e._v("文件里。昨天的日志会被转移到"),n("code",[e._v("<fileNamePattern>")]),e._v("logback.%d{yyyy-MM-dd}.log"),n("code",[e._v("</fileNamePattern>")]),e._v("文件")])]),e._v(" "),n("h1",{attrs:{id:"使用-spring-参数-日志配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用-spring-参数-日志配置"}},[e._v("#")]),e._v(" 使用 Spring 参数 日志配置")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<?xml version="1.0" encoding="UTF-8"?>\n<configuration scan="false">\n\n    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>\n    <jmxConfigurator/>\n    <springProperty scope="context" name="appName" source="spring.application.name"/>\n\n    <contextName>${appName}</contextName>\n    \x3c!-- 日志的输出目录 --\x3e\n    <property name="log.path" value="./logs"/>\n\n    \x3c!--控制台日志格式：彩色日志--\x3e\n    \x3c!-- magenta:洋红 --\x3e\n    \x3c!-- boldMagenta:粗红--\x3e\n    \x3c!-- cyan:青色 --\x3e\n    \x3c!-- white:白色 --\x3e\n    \x3c!-- magenta:洋红 --\x3e\n    <property name="CONSOLE_LOG_PATTERN"\n              value="%yellow(%date{yyyy-MM-dd HH:mm:ss}) %highlight([%-5level]) %thread %green(%logger) %msg%n"/>\n\n    \x3c!--文件日志格式--\x3e\n    <property name="FILE_LOG_PATTERN"\n              value="%date{yyyy-MM-dd HH:mm:ss} [%-5level] %thread %file:%line %logger %msg%n"/>\n\n    \x3c!--编码--\x3e\n    <property name="ENCODING"\n              value="UTF-8"/>\n\n\n    \x3c!-- 控制台日志 --\x3e\n    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">\n        <encoder>\n            <pattern>${CONSOLE_LOG_PATTERN}</pattern>\n            <charset>${ENCODING}</charset>\n        </encoder>\n    </appender>\n\n    \x3c!-- 文件日志 --\x3e\n    \x3c!--    <appender name="FILE" class="ch.qos.logback.core.FileAppender">--\x3e\n    \x3c!--        <file>${log.path}/${appName}-file.log</file>--\x3e\n    \x3c!--        <append>true</append>--\x3e\n    \x3c!--        <encoder>--\x3e\n    \x3c!--            <pattern>${FILE_LOG_PATTERN}</pattern>--\x3e\n    \x3c!--            <charset>${ENCODING}</charset>--\x3e\n    \x3c!--        </encoder>--\x3e\n    \x3c!--    </appender>--\x3e\n\n    <appender name="ROLLING_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">\n\n        \x3c!--  要区别于其他的appender中的文件名字  --\x3e\n        <file>${log.path}/${appName}.log</file>\n        <encoder>\n            <pattern>${FILE_LOG_PATTERN}</pattern>\n            <charset>${ENCODING}</charset>\n        </encoder>\n\n\n        \x3c!-- 设置滚动日志记录的滚动策略 --\x3e\n        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">\n            \x3c!-- 日志归档路径以及格式 --\x3e\n            <fileNamePattern>${log.path}/${appName}-%d{yyyy-MM-dd}.%i.log</fileNamePattern>\n            \x3c!--归档日志文件保留的最大数量--\x3e\n            <maxHistory>15</maxHistory>\n\n            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">\n                <maxFileSize>10MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n        </rollingPolicy>\n\n    </appender>\n\n    \x3c!-- 日志记录器  --\x3e\n    \x3c!--    <logger name="com.gkcrm" level="INFO">--\x3e\n    \x3c!--        <appender-ref ref="CONSOLE" />--\x3e\n    \x3c!--        <appender-ref ref="FILE" />--\x3e\n    \x3c!--    </logger>--\x3e\n    <root level="ERROR">\n        <appender-ref ref="CONSOLE"/>\n        <appender-ref ref="ROLLING_FILE"/>\n    </root>\n    \x3c!-- 开发环境和测试环境 --\x3e\n    <springProfile name="dev,test">\n        <logger name="com.gkcrm.server" level="DEBUG" additivity="false">\n            <appender-ref ref="CONSOLE"/>\n            <appender-ref ref="ROLLING_FILE"/>\n        </logger>\n    </springProfile>\n\n    \x3c!-- 生产环境 --\x3e\n    <springProfile name="prod">\n        <logger name="com.gkcrm.server" level="ERROR" additivity="false">\n            <appender-ref ref="CONSOLE"/>\n            <appender-ref ref="ROLLING_FILE"/>\n        </logger>\n    </springProfile>\n</configuration>\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br"),n("span",{staticClass:"line-number"},[e._v("43")]),n("br"),n("span",{staticClass:"line-number"},[e._v("44")]),n("br"),n("span",{staticClass:"line-number"},[e._v("45")]),n("br"),n("span",{staticClass:"line-number"},[e._v("46")]),n("br"),n("span",{staticClass:"line-number"},[e._v("47")]),n("br"),n("span",{staticClass:"line-number"},[e._v("48")]),n("br"),n("span",{staticClass:"line-number"},[e._v("49")]),n("br"),n("span",{staticClass:"line-number"},[e._v("50")]),n("br"),n("span",{staticClass:"line-number"},[e._v("51")]),n("br"),n("span",{staticClass:"line-number"},[e._v("52")]),n("br"),n("span",{staticClass:"line-number"},[e._v("53")]),n("br"),n("span",{staticClass:"line-number"},[e._v("54")]),n("br"),n("span",{staticClass:"line-number"},[e._v("55")]),n("br"),n("span",{staticClass:"line-number"},[e._v("56")]),n("br"),n("span",{staticClass:"line-number"},[e._v("57")]),n("br"),n("span",{staticClass:"line-number"},[e._v("58")]),n("br"),n("span",{staticClass:"line-number"},[e._v("59")]),n("br"),n("span",{staticClass:"line-number"},[e._v("60")]),n("br"),n("span",{staticClass:"line-number"},[e._v("61")]),n("br"),n("span",{staticClass:"line-number"},[e._v("62")]),n("br"),n("span",{staticClass:"line-number"},[e._v("63")]),n("br"),n("span",{staticClass:"line-number"},[e._v("64")]),n("br"),n("span",{staticClass:"line-number"},[e._v("65")]),n("br"),n("span",{staticClass:"line-number"},[e._v("66")]),n("br"),n("span",{staticClass:"line-number"},[e._v("67")]),n("br"),n("span",{staticClass:"line-number"},[e._v("68")]),n("br"),n("span",{staticClass:"line-number"},[e._v("69")]),n("br"),n("span",{staticClass:"line-number"},[e._v("70")]),n("br"),n("span",{staticClass:"line-number"},[e._v("71")]),n("br"),n("span",{staticClass:"line-number"},[e._v("72")]),n("br"),n("span",{staticClass:"line-number"},[e._v("73")]),n("br"),n("span",{staticClass:"line-number"},[e._v("74")]),n("br"),n("span",{staticClass:"line-number"},[e._v("75")]),n("br"),n("span",{staticClass:"line-number"},[e._v("76")]),n("br"),n("span",{staticClass:"line-number"},[e._v("77")]),n("br"),n("span",{staticClass:"line-number"},[e._v("78")]),n("br"),n("span",{staticClass:"line-number"},[e._v("79")]),n("br"),n("span",{staticClass:"line-number"},[e._v("80")]),n("br"),n("span",{staticClass:"line-number"},[e._v("81")]),n("br"),n("span",{staticClass:"line-number"},[e._v("82")]),n("br"),n("span",{staticClass:"line-number"},[e._v("83")]),n("br"),n("span",{staticClass:"line-number"},[e._v("84")]),n("br"),n("span",{staticClass:"line-number"},[e._v("85")]),n("br"),n("span",{staticClass:"line-number"},[e._v("86")]),n("br"),n("span",{staticClass:"line-number"},[e._v("87")]),n("br"),n("span",{staticClass:"line-number"},[e._v("88")]),n("br"),n("span",{staticClass:"line-number"},[e._v("89")]),n("br"),n("span",{staticClass:"line-number"},[e._v("90")]),n("br"),n("span",{staticClass:"line-number"},[e._v("91")]),n("br"),n("span",{staticClass:"line-number"},[e._v("92")]),n("br"),n("span",{staticClass:"line-number"},[e._v("93")]),n("br"),n("span",{staticClass:"line-number"},[e._v("94")]),n("br"),n("span",{staticClass:"line-number"},[e._v("95")]),n("br"),n("span",{staticClass:"line-number"},[e._v("96")]),n("br")])]),n("p",[n("a",{attrs:{href:"https://github.com/andanyoung/springnotes/blob/master/notes/springboot/SpringBoot%E7%9A%84%E6%97%A5%E5%BF%97%E8%AF%A6%E8%A7%A3.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("demo 获取,欢迎 start"),n("OutboundLink")],1)])])}),[],!1,null,null,null);n.default=l.exports}}]);