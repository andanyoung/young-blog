(window.webpackJsonp=window.webpackJsonp||[]).push([[203],{1531:function(l,e,a){"use strict";a.r(e);var s=a(4),t=Object(s.a)({},(function(){var l=this,e=l._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":l.$parent.slotKey}},[e("h1",{attrs:{id:"scala-eq-equals"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#scala-eq-equals"}},[l._v("#")]),l._v(" scala eq，equals，==，===")]),l._v(" "),e("blockquote",[e("p",[l._v("scala 中"),e("code",[l._v("eq")]),l._v("，"),e("code",[l._v("equals")]),l._v("，"),e("code",[l._v("==")]),l._v("，"),e("code",[l._v("===")]),l._v("经常搞混，这里总结一下")])]),l._v(" "),e("ul",[e("li",[e("p",[l._v("equals 比较的是值是否相等")])]),l._v(" "),e("li",[e("p",[l._v("eq 比较的是 地址是否相等")])]),l._v(" "),e("li",[e("p",[l._v("==（等值符），如果比较的对象是 null，==调用的是 eq 方法，如果比较的对象不是 null，==调用的是 equals 方法。当等号两边的值为相同类型时比较值是否相同，类型不同时会发生类型的自动转换，转换为相同的类型后再作比较")])]),l._v(" "),e("li",[e("p",[l._v("=== 一般用于 spark 中，是在 Column 类中定义的函数，对应的不等于是 =!=")])])])])}),[],!1,null,null,null);e.default=t.exports}}]);